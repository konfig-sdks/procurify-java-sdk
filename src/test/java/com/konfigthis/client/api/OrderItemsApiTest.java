/*
 * Procurify API Documentation
 *  # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.time.LocalDate;
import com.konfigthis.client.model.PaginatedOrderItemList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrderItemsApi
 */
@Disabled
public class OrderItemsApiTest {

    private static OrderItemsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new OrderItemsApi(apiClient);
    }

    /**
     * Get list of all order items
     *
     * **Order Item Status Codes**  | Order Item Type          | Code      | Description                       | |--------------------------|-----------|-----------------------------------| | PURCHASE_PENDING         | 0         | Approved but not purchased.       | | PURCHASE_INUSE           | 1         | Added to purchaser&#39;s PO list.     | | RECEIVE_PENDING          | 2         | Purchased but not yet received, i.e. receivedPassQty &#x3D;&#x3D; 0. | | RECEIVED                 | 3         | Fully received, i.e. receivedPassQty &#x3D;&#x3D; quantity. | | REJECTED_FOR_PURCHASE    | 4         | Rejected at procurement, i.e. denied. | | RECEIVE_PARTIAL          | 5         | Partially received, i.e. receivedPassQty !&#x3D; quantity and receivedPassQty &gt; 0. | | FULFILLED                | 6         | Received but unused. | | APPROVAL_DENIED          | 7         | Denied in approval routing (by approver). | | REQUEST_DRAFT            | 8         | Preparing for draft instead of using sessions. |
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listItemsTest() throws ApiException {
        Integer account = null;
        Integer accountCode = null;
        Boolean active = null;
        LocalDate approvedDatetime0 = null;
        LocalDate approvedDatetime1 = null;
        Double approvedPrice = null;
        Double approvedQuantity = null;
        Double approver = null;
        Double approverId = null;
        Integer branch = null;
        Boolean catalog = null;
        String catalogItem = null;
        Integer currency = null;
        Integer department = null;
        String departments = null;
        String exclude = null;
        Boolean excludePunchout = null;
        String format = null;
        String fulfilmentStatus = null;
        Boolean isPurchased = null;
        Boolean isRecurring = null;
        Integer lastChangedBy = null;
        LocalDate lastModified0 = null;
        LocalDate lastModified1 = null;
        String lineComment = null;
        Integer location = null;
        String locations = null;
        String name = null;
        String num = null;
        Integer orderNum = null;
        Integer orderNumStatus = null;
        String orderBy = null;
        LocalDate orderCreatedDate0 = null;
        LocalDate orderCreatedDate1 = null;
        Integer page = null;
        Integer pageSize = null;
        LocalDate poCreatedDate0 = null;
        LocalDate poCreatedDate1 = null;
        Integer poVendor = null;
        Integer prefVendor = null;
        Double price = null;
        Double purchaseAgreement = null;
        LocalDate purchasedDate0 = null;
        LocalDate purchasedDate1 = null;
        Integer purchaser = null;
        Double quantity = null;
        Double receivedFailQty = null;
        Double receivedPassQty = null;
        Integer requester = null;
        String search = null;
        String sku = null;
        Integer status = null;
        Integer type = null;
        String unit = null;
        PaginatedOrderItemList response = api.listItems()
                .account(account)
                .accountCode(accountCode)
                .active(active)
                .approvedDatetime0(approvedDatetime0)
                .approvedDatetime1(approvedDatetime1)
                .approvedPrice(approvedPrice)
                .approvedQuantity(approvedQuantity)
                .approver(approver)
                .approverId(approverId)
                .branch(branch)
                .catalog(catalog)
                .catalogItem(catalogItem)
                .currency(currency)
                .department(department)
                .departments(departments)
                .exclude(exclude)
                .excludePunchout(excludePunchout)
                .format(format)
                .fulfilmentStatus(fulfilmentStatus)
                .isPurchased(isPurchased)
                .isRecurring(isRecurring)
                .lastChangedBy(lastChangedBy)
                .lastModified0(lastModified0)
                .lastModified1(lastModified1)
                .lineComment(lineComment)
                .location(location)
                .locations(locations)
                .name(name)
                .num(num)
                .orderNum(orderNum)
                .orderNumStatus(orderNumStatus)
                .orderBy(orderBy)
                .orderCreatedDate0(orderCreatedDate0)
                .orderCreatedDate1(orderCreatedDate1)
                .page(page)
                .pageSize(pageSize)
                .poCreatedDate0(poCreatedDate0)
                .poCreatedDate1(poCreatedDate1)
                .poVendor(poVendor)
                .prefVendor(prefVendor)
                .price(price)
                .purchaseAgreement(purchaseAgreement)
                .purchasedDate0(purchasedDate0)
                .purchasedDate1(purchasedDate1)
                .purchaser(purchaser)
                .quantity(quantity)
                .receivedFailQty(receivedFailQty)
                .receivedPassQty(receivedPassQty)
                .requester(requester)
                .search(search)
                .sku(sku)
                .status(status)
                .type(type)
                .unit(unit)
                .execute();
        // TODO: test validations
    }

}
