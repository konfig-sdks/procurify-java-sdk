/*
 * Procurify API Documentation
 *  # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ApiNestedEditDeletePurchaseOrderDetail;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.OrderItemPurchaseEditRequest;
import com.konfigthis.client.model.POWithListPurchaseOrderDocs;
import com.konfigthis.client.model.PurchaseOrderBillingHistorySerializerList;
import com.konfigthis.client.model.PurchaseOrderDetailSerializerSingle;
import com.konfigthis.client.model.PurchaseOrderReadDocsSerializerSingle;
import com.konfigthis.client.model.PurchaseOrderUpdateRequest;
import com.konfigthis.client.model.PurchaseOrderUpdateSerializerSingle;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PurchaseOrdersApi
 */
@Disabled
public class PurchaseOrdersApiTest {

    private static PurchaseOrdersApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PurchaseOrdersApi(apiClient);
    }

    /**
     * Close a Purchase Order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void closeOrderTest() throws ApiException {
        Integer procurifyPO = null;
        String format = null;
        PurchaseOrderReadDocsSerializerSingle response = api.closeOrder(procurifyPO)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Purchase Order by ID (with items)
     *
     * **Purchase Order State Codes**  | Order Type          | Code      | |---------------------|-----------| | PURCHASED           | 0         | | CANCELLED           | 1         | | (legacy code)       | 2         | | CLOSED              | 3         | | PAID                | 4         | | REOPENED            | 5         |
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdWithItemsTest() throws ApiException {
        String id = null;
        String format = null;
        ApiNestedEditDeletePurchaseOrderDetail response = api.getByIdWithItems(id)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Purchase Orders by Role &amp; Status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByRoleAndStatusTest() throws ApiException {
        String role = null;
        String status = null;
        Integer contract = null;
        LocalDate date0 = null;
        LocalDate date1 = null;
        LocalDate expiryDate0 = null;
        LocalDate expiryDate1 = null;
        Boolean hasBlanketOrderItems = null;
        LocalDate modifiedDate0 = null;
        LocalDate modifiedDate1 = null;
        String orderBy = null;
        Integer page = null;
        Integer pageSize = null;
        Integer prefVendor = null;
        LocalDate promiseDate0 = null;
        LocalDate promiseDate1 = null;
        POWithListPurchaseOrderDocs response = api.getByRoleAndStatus(role, status)
                .contract(contract)
                .date0(date0)
                .date1(date1)
                .expiryDate0(expiryDate0)
                .expiryDate1(expiryDate1)
                .hasBlanketOrderItems(hasBlanketOrderItems)
                .modifiedDate0(modifiedDate0)
                .modifiedDate1(modifiedDate1)
                .orderBy(orderBy)
                .page(page)
                .pageSize(pageSize)
                .prefVendor(prefVendor)
                .promiseDate0(promiseDate0)
                .promiseDate1(promiseDate1)
                .execute();
        // TODO: test validations
    }

    /**
     * Reopen a Purchase Order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reopenProcurifyPoTest() throws ApiException {
        Integer procurifyPO = null;
        String format = null;
        api.reopenProcurifyPo(procurifyPO)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Revise a Purchase Order
     *
     * Deprecated method for revising a purchase order. Pending removable after November 16, 2023. Use &#x60;PUT&#x60; on &#x60;/api/v3/purchase-orders/{id}&#x60; instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reviseProcurifyPOTest() throws ApiException {
        Integer version = null;
        List<OrderItemPurchaseEditRequest> orderItems = null;
        String buyerName = null;
        String buyerContact = null;
        String buyerAddressLineOne = null;
        String buyerPostalCode = null;
        String buyerCity = null;
        String buyerCountry = null;
        Integer buyerAddress = null;
        String receiverName = null;
        String receiverContact = null;
        String receiverAddressLineOne = null;
        String receiverPostalCode = null;
        String receiverCity = null;
        String receiverCountry = null;
        Integer receiverAddress = null;
        OffsetDateTime promiseDate = null;
        Map<String, Object> discount = null;
        Map<String, Object> tax = null;
        Integer procurifyPO = null;
        List<Map<String, Object>> customFields = null;
        String poNum = null;
        String buyerStateProvince = null;
        String comment = null;
        String receiverStateProvince = null;
        BigDecimal freight = null;
        BigDecimal other = null;
        String disclaimerDescription = null;
        String disclaimerText = null;
        Integer paymentTermRef = null;
        Integer shippingTermRef = null;
        Integer paymentMethodRef = null;
        Integer shippingMethodRef = null;
        Integer creditcard = null;
        OffsetDateTime expiryDate = null;
        Integer contract = null;
        String confirmDuplicateExternalPoNumber = null;
        String format = null;
        PurchaseOrderDetailSerializerSingle response = api.reviseProcurifyPO(version, orderItems, buyerName, buyerContact, buyerAddressLineOne, buyerPostalCode, buyerCity, buyerCountry, buyerAddress, receiverName, receiverContact, receiverAddressLineOne, receiverPostalCode, receiverCity, receiverCountry, receiverAddress, promiseDate, discount, tax, procurifyPO)
                .customFields(customFields)
                .poNum(poNum)
                .buyerStateProvince(buyerStateProvince)
                .comment(comment)
                .receiverStateProvince(receiverStateProvince)
                .freight(freight)
                .other(other)
                .disclaimerDescription(disclaimerDescription)
                .disclaimerText(disclaimerText)
                .paymentTermRef(paymentTermRef)
                .shippingTermRef(shippingTermRef)
                .paymentMethodRef(paymentMethodRef)
                .shippingMethodRef(shippingMethodRef)
                .creditcard(creditcard)
                .expiryDate(expiryDate)
                .contract(contract)
                .confirmDuplicateExternalPoNumber(confirmDuplicateExternalPoNumber)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a Purchase Order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrderTest() throws ApiException {
        Integer version = null;
        List<OrderItemPurchaseEditRequest> orderItems = null;
        String buyerName = null;
        String buyerContact = null;
        String buyerAddressLineOne = null;
        String buyerPostalCode = null;
        String buyerCity = null;
        String buyerCountry = null;
        Integer buyerAddress = null;
        String receiverName = null;
        String receiverContact = null;
        String receiverAddressLineOne = null;
        String receiverPostalCode = null;
        String receiverCity = null;
        String receiverCountry = null;
        Integer receiverAddress = null;
        OffsetDateTime promiseDate = null;
        Map<String, Object> discount = null;
        Map<String, Object> tax = null;
        Integer procurifyPO = null;
        List<Map<String, Object>> customFields = null;
        String poNum = null;
        String buyerStateProvince = null;
        String comment = null;
        String receiverStateProvince = null;
        BigDecimal freight = null;
        BigDecimal other = null;
        String disclaimerDescription = null;
        String disclaimerText = null;
        Integer paymentTermRef = null;
        Integer shippingTermRef = null;
        Integer paymentMethodRef = null;
        Integer shippingMethodRef = null;
        Integer creditcard = null;
        OffsetDateTime expiryDate = null;
        Integer contract = null;
        String format = null;
        PurchaseOrderUpdateSerializerSingle response = api.updateOrder(version, orderItems, buyerName, buyerContact, buyerAddressLineOne, buyerPostalCode, buyerCity, buyerCountry, buyerAddress, receiverName, receiverContact, receiverAddressLineOne, receiverPostalCode, receiverCity, receiverCountry, receiverAddress, promiseDate, discount, tax, procurifyPO)
                .customFields(customFields)
                .poNum(poNum)
                .buyerStateProvince(buyerStateProvince)
                .comment(comment)
                .receiverStateProvince(receiverStateProvince)
                .freight(freight)
                .other(other)
                .disclaimerDescription(disclaimerDescription)
                .disclaimerText(disclaimerText)
                .paymentTermRef(paymentTermRef)
                .shippingTermRef(shippingTermRef)
                .paymentMethodRef(paymentMethodRef)
                .shippingMethodRef(shippingMethodRef)
                .creditcard(creditcard)
                .expiryDate(expiryDate)
                .contract(contract)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * View billing history of a Purchase Order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void viewBillingHistoryTest() throws ApiException {
        String format = null;
        PurchaseOrderBillingHistorySerializerList response = api.viewBillingHistory()
                .format(format)
                .execute();
        // TODO: test validations
    }

}
