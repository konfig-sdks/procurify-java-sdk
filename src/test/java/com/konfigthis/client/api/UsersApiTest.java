/*
 * Procurify API Documentation
 *  # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.InviteFunctionalUserRequest;
import com.konfigthis.client.model.PaginatedUserProfileUnoptimizedList;
import com.konfigthis.client.model.UserProfileMeSerializerSingle;
import com.konfigthis.client.model.UserProfileUnoptimizedSerializerList;
import com.konfigthis.client.model.UserProfileUnoptimizedSerializerSingle;
import com.konfigthis.client.model.UserProfileUpsertRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private static UsersApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new UsersApi(apiClient);
    }

    /**
     * Create New User
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        String format = null;
        UserProfileUnoptimizedSerializerList response = api.create()
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Deactivate User
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destroyTest() throws ApiException {
        Integer id = null;
        String format = null;
        api.destroy(id)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Logged-in User
     *
     * Get the logged in user account information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLoggedInUserTest() throws ApiException {
        String format = null;
        UserProfileMeSerializerSingle response = api.getLoggedInUser()
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * List Users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        String format = null;
        Boolean isActive = null;
        String location = null;
        String orderBy = null;
        Integer page = null;
        Integer pageSize = null;
        Boolean pendingInvite = null;
        String permission = null;
        Double role = null;
        String search = null;
        PaginatedUserProfileUnoptimizedList response = api.list()
                .format(format)
                .isActive(isActive)
                .location(location)
                .orderBy(orderBy)
                .page(page)
                .pageSize(pageSize)
                .pendingInvite(pendingInvite)
                .permission(permission)
                .role(role)
                .search(search)
                .execute();
        // TODO: test validations
    }

    /**
     * Update User
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        String email = null;
        String firstName = null;
        String lastName = null;
        Integer location = null;
        Integer department = null;
        Integer id = null;
        Integer id = null;
        Integer user = null;
        String position = null;
        String phone = null;
        String profileImage = null;
        Boolean isSsoEnabled = null;
        Boolean markForSkip = null;
        Boolean markForDelete = null;
        String format = null;
        UserProfileUnoptimizedSerializerSingle response = api.update(email, firstName, lastName, location, department, id)
                .id(id)
                .user(user)
                .position(position)
                .phone(phone)
                .profileImage(profileImage)
                .isSsoEnabled(isSsoEnabled)
                .markForSkip(markForSkip)
                .markForDelete(markForDelete)
                .format(format)
                .execute();
        // TODO: test validations
    }

}
