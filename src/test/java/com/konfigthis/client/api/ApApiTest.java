/*
 * Procurify API Documentation
 *  # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ApproverChoicesMetadataApproverReadDocs;
import com.konfigthis.client.model.BillMetadataBillRead;
import com.konfigthis.client.model.BillMetadataListSimpleBill;
import com.konfigthis.client.model.CompanyPaymentMethod;
import com.konfigthis.client.model.CompanyPaymentMethodRequest;
import com.konfigthis.client.model.ItemMetadataItemRead;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PaginatedCompanyPaymentMethodReadList;
import com.konfigthis.client.model.PaginatedVendorPaymentMethodReadList;
import com.konfigthis.client.model.PaymentMetadataPaymentListRead;
import com.konfigthis.client.model.PaymentMethodTypeEnum;
import java.util.UUID;
import com.konfigthis.client.model.VendorPaymentMethod;
import com.konfigthis.client.model.VendorPaymentMethodRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApApi
 */
@Disabled
public class ApApiTest {

    private static ApApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ApApi(apiClient);
    }

    /**
     * Get Bills by ID
     *
     *  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void billsGetByIdTest() throws ApiException {
        String id = null;
        String format = null;
        BillMetadataBillRead response = api.billsGetById(id)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Bills
     *
     * list: This endpoint supports OPTIONS method which returns a list of available fields and their types.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void billsListTest() throws ApiException {
        Double approver = null;
        Double contract = null;
        Integer currency = null;
        LocalDate dueDate0 = null;
        LocalDate dueDate1 = null;
        String excludeBillGroupIds = null;
        String excludeExpenseBills = null;
        String expense = null;
        String format = null;
        LocalDate glPostDate0 = null;
        LocalDate glPostDate1 = null;
        Integer group = null;
        Boolean hasPayment = null;
        Boolean hasPostingDate = null;
        String includeBillGroupIds = null;
        LocalDate invoiceDate0 = null;
        LocalDate invoiceDate1 = null;
        Boolean isExported = null;
        LocalDate lastExportDate0 = null;
        LocalDate lastExportDate1 = null;
        Double lastExportUser = null;
        OffsetDateTime lastModifiedDatetime0 = null;
        OffsetDateTime lastModifiedDatetime1 = null;
        LocalDate modifiedDate0 = null;
        LocalDate modifiedDate1 = null;
        String orderBy = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        LocalDate submittedDate0 = null;
        LocalDate submittedDate1 = null;
        String syncStatus = null;
        String syncStatusV2 = null;
        Integer type = null;
        Integer user = null;
        Integer vendor = null;
        BillMetadataListSimpleBill response = api.billsList()
                .approver(approver)
                .contract(contract)
                .currency(currency)
                .dueDate0(dueDate0)
                .dueDate1(dueDate1)
                .excludeBillGroupIds(excludeBillGroupIds)
                .excludeExpenseBills(excludeExpenseBills)
                .expense(expense)
                .format(format)
                .glPostDate0(glPostDate0)
                .glPostDate1(glPostDate1)
                .group(group)
                .hasPayment(hasPayment)
                .hasPostingDate(hasPostingDate)
                .includeBillGroupIds(includeBillGroupIds)
                .invoiceDate0(invoiceDate0)
                .invoiceDate1(invoiceDate1)
                .isExported(isExported)
                .lastExportDate0(lastExportDate0)
                .lastExportDate1(lastExportDate1)
                .lastExportUser(lastExportUser)
                .lastModifiedDatetime0(lastModifiedDatetime0)
                .lastModifiedDatetime1(lastModifiedDatetime1)
                .modifiedDate0(modifiedDate0)
                .modifiedDate1(modifiedDate1)
                .orderBy(orderBy)
                .page(page)
                .pageSize(pageSize)
                .search(search)
                .submittedDate0(submittedDate0)
                .submittedDate1(submittedDate1)
                .syncStatus(syncStatus)
                .syncStatusV2(syncStatusV2)
                .type(type)
                .user(user)
                .vendor(vendor)
                .execute();
        // TODO: test validations
    }

    /**
     * Get list of Company Payment Methods
     *
     * **Payment Method Types:**  | Payment Method | Type      | |----------------|-----------| | OTHER          | 0         | | CHECK          | 1         | | CHEQUE         | 1         | | ACH            | 2         | | EFT            | 3         | | WIRE           | 4         |  **The context of &#39;data&#39; field varies based on different Payment Method type:**  | Payment Method | &#39;data&#39; field structure | |----------------|------------------------| | OTHER          | &#x60;&#x60;&#x60;{\&quot;description\&quot;: &lt;string&gt;}&#x60;&#x60;&#x60; | | CHECK/CHEQUE   | &#x60;&#x60;&#x60;{\&quot;payable_to\&quot;: &lt;string&gt;}&#x60;&#x60;&#x60;  | | ACH            | &#x60;&#x60;&#x60;{\&quot;routing_number\&quot;: &lt;string&gt;, \&quot;account_number\&quot;: &lt;string&gt;, \&quot;company_name\&quot;: &lt;string&gt;}&#x60;&#x60;&#x60; | 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void companyPaymentMethodsListTest() throws ApiException {
        Integer currency = null;
        String format = null;
        String orderBy = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        Integer type = null;
        PaginatedCompanyPaymentMethodReadList response = api.companyPaymentMethodsList()
                .currency(currency)
                .format(format)
                .orderBy(orderBy)
                .page(page)
                .pageSize(pageSize)
                .search(search)
                .type(type)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Company Payment Method
     *
     * **Payment Method Types:**  | Payment Method | Type      | |----------------|-----------| | OTHER          | 0         | | CHECK          | 1         | | CHEQUE         | 1         | | ACH            | 2         | | EFT            | 3         | | WIRE           | 4         |  **The context of &#39;data&#39; field varies based on different Payment Method type:**  | Payment Method | &#39;data&#39; field structure | |----------------|------------------------| | OTHER          | &#x60;&#x60;&#x60;{\&quot;description\&quot;: &lt;string&gt;}&#x60;&#x60;&#x60; | | CHECK/CHEQUE   | &#x60;&#x60;&#x60;{\&quot;payable_to\&quot;: &lt;string&gt;}&#x60;&#x60;&#x60;  | | ACH            | &#x60;&#x60;&#x60;{\&quot;routing_number\&quot;: &lt;string&gt;, \&quot;account_number\&quot;: &lt;string&gt;, \&quot;company_name\&quot;: &lt;string&gt;}&#x60;&#x60;&#x60; | 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCompanyPaymentMethodTest() throws ApiException {
        Map<String, Object> data = null;
        String name = null;
        PaymentMethodTypeEnum type = null;
        Integer currency = null;
        String glCode = null;
        String format = null;
        CompanyPaymentMethod response = api.createCompanyPaymentMethod(data)
                .name(name)
                .type(type)
                .currency(currency)
                .glCode(glCode)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Vendor Payment Method
     *
     * **Payment Method Types:**  | Payment Method | Type      | |----------------|-----------| | OTHER          | 0         | | CHECK          | 1         | | CHEQUE         | 1         | | ACH            | 2         | | EFT            | 3         | | WIRE           | 4         |  **The context of &#39;data&#39; field varies based on different Payment Method type:**  | Payment Method | &#39;data&#39; field structure | |----------------|------------------------| | OTHER          | &#x60;&#x60;&#x60;{\&quot;description\&quot;: &lt;string&gt;}&#x60;&#x60;&#x60; | | CHECK/CHEQUE   | &#x60;&#x60;&#x60;{\&quot;payable_to\&quot;: &lt;string&gt;}&#x60;&#x60;&#x60;  | | ACH            | &#x60;&#x60;&#x60;{\&quot;routing_number\&quot;: &lt;string&gt;, \&quot;account_number\&quot;: &lt;string&gt;, \&quot;company_name\&quot;: &lt;string&gt;}&#x60;&#x60;&#x60; | 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createVendorPaymentMethodTest() throws ApiException {
        Integer vendor = null;
        Map<String, Object> data = null;
        String name = null;
        PaymentMethodTypeEnum type = null;
        Integer currency = null;
        String format = null;
        VendorPaymentMethod response = api.createVendorPaymentMethod(vendor, data)
                .name(name)
                .type(type)
                .currency(currency)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Payments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentsTest() throws ApiException {
        String approver = null;
        Integer currency = null;
        String format = null;
        String orderBy = null;
        Integer page = null;
        Integer pageSize = null;
        LocalDate paymentDate0 = null;
        LocalDate paymentDate1 = null;
        Integer paymentMethodType = null;
        String search = null;
        PaymentMetadataPaymentListRead response = api.getPayments()
                .approver(approver)
                .currency(currency)
                .format(format)
                .orderBy(orderBy)
                .page(page)
                .pageSize(pageSize)
                .paymentDate0(paymentDate0)
                .paymentDate1(paymentDate1)
                .paymentMethodType(paymentMethodType)
                .search(search)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Unbilled/Billed Items
     *
     *  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void itemsGetTest() throws ApiException {
        Integer bill = null;
        UUID billUuid = null;
        Boolean billed = null;
        Integer budget = null;
        LocalDate createdAt0 = null;
        LocalDate createdAt1 = null;
        Double department = null;
        String exclude = null;
        String format = null;
        Double location = null;
        String orderBy = null;
        Integer page = null;
        Integer pageSize = null;
        LocalDate receivedOn0 = null;
        LocalDate receivedOn1 = null;
        Boolean reimburse = null;
        Double requester = null;
        String search = null;
        Integer vendor = null;
        ItemMetadataItemRead response = api.itemsGet()
                .bill(bill)
                .billUuid(billUuid)
                .billed(billed)
                .budget(budget)
                .createdAt0(createdAt0)
                .createdAt1(createdAt1)
                .department(department)
                .exclude(exclude)
                .format(format)
                .location(location)
                .orderBy(orderBy)
                .page(page)
                .pageSize(pageSize)
                .receivedOn0(receivedOn0)
                .receivedOn1(receivedOn1)
                .reimburse(reimburse)
                .requester(requester)
                .search(search)
                .vendor(vendor)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Approver Choices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void paymentsApproverChoicesRetrieveTest() throws ApiException {
        Integer id = null;
        String format = null;
        ApproverChoicesMetadataApproverReadDocs response = api.paymentsApproverChoicesRetrieve(id)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Get list of Vendor Payment Methods
     *
     * **Payment Method Types:**  | Payment Method | Type      | |----------------|-----------| | OTHER          | 0         | | CHECK          | 1         | | CHEQUE         | 1         | | ACH            | 2         | | EFT            | 3         | | WIRE           | 4         |  **The context of &#39;data&#39; field varies based on different Payment Method type:**  | Payment Method | &#39;data&#39; field structure | |----------------|------------------------| | OTHER          | &#x60;&#x60;&#x60;{\&quot;description\&quot;: &lt;string&gt;}&#x60;&#x60;&#x60; | | CHECK/CHEQUE   | &#x60;&#x60;&#x60;{\&quot;payable_to\&quot;: &lt;string&gt;}&#x60;&#x60;&#x60;  | | ACH            | &#x60;&#x60;&#x60;{\&quot;routing_number\&quot;: &lt;string&gt;, \&quot;account_number\&quot;: &lt;string&gt;, \&quot;company_name\&quot;: &lt;string&gt;}&#x60;&#x60;&#x60; | 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vendorPaymentMethodsListTest() throws ApiException {
        Integer currency = null;
        String format = null;
        String orderBy = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        Integer type = null;
        Integer vendor = null;
        PaginatedVendorPaymentMethodReadList response = api.vendorPaymentMethodsList()
                .currency(currency)
                .format(format)
                .orderBy(orderBy)
                .page(page)
                .pageSize(pageSize)
                .search(search)
                .type(type)
                .vendor(vendor)
                .execute();
        // TODO: test validations
    }

}
