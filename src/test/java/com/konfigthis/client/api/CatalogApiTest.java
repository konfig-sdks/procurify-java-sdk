/*
 * Procurify API Documentation
 *  # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.math.BigDecimal;
import com.konfigthis.client.model.CatalogItemReadSerializerSingleCreate;
import com.konfigthis.client.model.CatalogItemReadSerializerSingleUpdate;
import com.konfigthis.client.model.CatalogItemUpsertRequest;
import com.konfigthis.client.model.PaginatedCatalogItemBundleReadList;
import com.konfigthis.client.model.PaginatedCatalogItemReadList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CatalogApi
 */
@Disabled
public class CatalogApiTest {

    private static CatalogApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CatalogApi(apiClient);
    }

    /**
     * Get All Catalog Bundles
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllBundlesTest() throws ApiException {
        String format = null;
        String orderBy = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        PaginatedCatalogItemBundleReadList response = api.getAllBundles()
                .format(format)
                .orderBy(orderBy)
                .page(page)
                .pageSize(pageSize)
                .search(search)
                .execute();
        // TODO: test validations
    }

    /**
     * Get All Catalog Items
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllItemsTest() throws ApiException {
        Integer bundle = null;
        String department = null;
        String format = null;
        String internalSKU = null;
        String location = null;
        Double maxPrice = null;
        Double minPrice = null;
        String orderBy = null;
        Integer page = null;
        Integer pageSize = null;
        Integer prefVendor = null;
        String search = null;
        PaginatedCatalogItemReadList response = api.getAllItems()
                .bundle(bundle)
                .department(department)
                .format(format)
                .internalSKU(internalSKU)
                .location(location)
                .maxPrice(maxPrice)
                .minPrice(minPrice)
                .orderBy(orderBy)
                .page(page)
                .pageSize(pageSize)
                .prefVendor(prefVendor)
                .search(search)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Catalog Item
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void itemCreateTest() throws ApiException {
        String name = null;
        Integer currency = null;
        List<Map<String, Object>> customFields = null;
        String description = null;
        Integer id = null;
        String image = null;
        String unitType = null;
        Integer prefVendor = null;
        Integer accountCode = null;
        String internalSKU = null;
        String productUrl = null;
        BigDecimal price = null;
        Boolean rfoLock = null;
        List<Integer> departments = null;
        String format = null;
        CatalogItemReadSerializerSingleCreate response = api.itemCreate(name, currency, customFields)
                .description(description)
                .id(id)
                .image(image)
                .unitType(unitType)
                .prefVendor(prefVendor)
                .accountCode(accountCode)
                .internalSKU(internalSKU)
                .productUrl(productUrl)
                .price(price)
                .rfoLock(rfoLock)
                .departments(departments)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Catalog Item
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateItemTest() throws ApiException {
        String name = null;
        Integer currency = null;
        List<Map<String, Object>> customFields = null;
        Integer id = null;
        String description = null;
        Integer id = null;
        String image = null;
        String unitType = null;
        Integer prefVendor = null;
        Integer accountCode = null;
        String internalSKU = null;
        String productUrl = null;
        BigDecimal price = null;
        Boolean rfoLock = null;
        List<Integer> departments = null;
        String format = null;
        CatalogItemReadSerializerSingleUpdate response = api.updateItem(name, currency, customFields, id)
                .description(description)
                .id(id)
                .image(image)
                .unitType(unitType)
                .prefVendor(prefVendor)
                .accountCode(accountCode)
                .internalSKU(internalSKU)
                .productUrl(productUrl)
                .price(price)
                .rfoLock(rfoLock)
                .departments(departments)
                .format(format)
                .execute();
        // TODO: test validations
    }

}
