/*
 * Procurify API Documentation
 *  # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.DepartmentLocationRead;
import com.konfigthis.client.model.DomainSwitching;
import com.konfigthis.client.model.SimpleUserSummaryApprovalDelegatee;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * Model tests for UserProfileMe
 */
public class UserProfileMeTest {
    private final UserProfileMe model = new UserProfileMe();

    /**
     * Model tests for UserProfileMe
     */
    @Test
    public void testUserProfileMe() {
        // TODO: test UserProfileMe
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'domains'
     */
    @Test
    public void domainsTest() {
        // TODO: test domains
    }

    /**
     * Test the property 'headquarterLogo'
     */
    @Test
    public void headquarterLogoTest() {
        // TODO: test headquarterLogo
    }

    /**
     * Test the property 'systemaccessCache'
     */
    @Test
    public void systemaccessCacheTest() {
        // TODO: test systemaccessCache
    }

    /**
     * Test the property 'approvalDelegatee'
     */
    @Test
    public void approvalDelegateeTest() {
        // TODO: test approvalDelegatee
    }

    /**
     * Test the property 'isApprovalDelegatee'
     */
    @Test
    public void isApprovalDelegateeTest() {
        // TODO: test isApprovalDelegatee
    }

    /**
     * Test the property 'department'
     */
    @Test
    public void departmentTest() {
        // TODO: test department
    }

    /**
     * Test the property 'createdAt'
     */
    @Test
    public void createdAtTest() {
        // TODO: test createdAt
    }

    /**
     * Test the property 'updatedAt'
     */
    @Test
    public void updatedAtTest() {
        // TODO: test updatedAt
    }

    /**
     * Test the property 'firstName'
     */
    @Test
    public void firstNameTest() {
        // TODO: test firstName
    }

    /**
     * Test the property 'lastName'
     */
    @Test
    public void lastNameTest() {
        // TODO: test lastName
    }

    /**
     * Test the property 'email'
     */
    @Test
    public void emailTest() {
        // TODO: test email
    }

    /**
     * Test the property 'position'
     */
    @Test
    public void positionTest() {
        // TODO: test position
    }

    /**
     * Test the property 'phone'
     */
    @Test
    public void phoneTest() {
        // TODO: test phone
    }

    /**
     * Test the property 'address'
     */
    @Test
    public void addressTest() {
        // TODO: test address
    }

    /**
     * Test the property 'notifications'
     */
    @Test
    public void notificationsTest() {
        // TODO: test notifications
    }

    /**
     * Test the property 'isActive'
     */
    @Test
    public void isActiveTest() {
        // TODO: test isActive
    }

    /**
     * Test the property 'pendingInvite'
     */
    @Test
    public void pendingInviteTest() {
        // TODO: test pendingInvite
    }

    /**
     * Test the property 'role'
     */
    @Test
    public void roleTest() {
        // TODO: test role
    }

    /**
     * Test the property 'mobile'
     */
    @Test
    public void mobileTest() {
        // TODO: test mobile
    }

    /**
     * Test the property 'profileImage'
     */
    @Test
    public void profileImageTest() {
        // TODO: test profileImage
    }

    /**
     * Test the property 'slackUserId'
     */
    @Test
    public void slackUserIdTest() {
        // TODO: test slackUserId
    }

    /**
     * Test the property 'isSsoEnabled'
     */
    @Test
    public void isSsoEnabledTest() {
        // TODO: test isSsoEnabled
    }

    /**
     * Test the property 'lastChangedBy'
     */
    @Test
    public void lastChangedByTest() {
        // TODO: test lastChangedBy
    }

    /**
     * Test the property 'user'
     */
    @Test
    public void userTest() {
        // TODO: test user
    }

}
