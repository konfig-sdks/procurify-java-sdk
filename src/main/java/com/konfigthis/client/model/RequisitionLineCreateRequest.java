/*
 * Procurify API Documentation
 *  # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.LineItemCustomFieldRequest;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * RequisitionLineCreateRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class RequisitionLineCreateRequest {
  public static final String SERIALIZED_NAME_ITEM_NAME = "item_name";
  @SerializedName(SERIALIZED_NAME_ITEM_NAME)
  private String itemName;

  public static final String SERIALIZED_NAME_VENDOR_NAME = "vendor_name";
  @SerializedName(SERIALIZED_NAME_VENDOR_NAME)
  private String vendorName;

  public static final String SERIALIZED_NAME_ACCOUNT_CODE = "account_code";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_CODE)
  private String accountCode;

  public static final String SERIALIZED_NAME_UNIT_PRICE = "unit_price";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private BigDecimal unitPrice;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private BigDecimal quantity;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currency_code";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private List<LineItemCustomFieldRequest> customFields = new ArrayList<>();

  public RequisitionLineCreateRequest() {
  }

  public RequisitionLineCreateRequest itemName(String itemName) {
    
    
    if (itemName != null && itemName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for itemName. Length must be greater than or equal to 1.");
    }
    
    this.itemName = itemName;
    return this;
  }

   /**
   * Get itemName
   * @return itemName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getItemName() {
    return itemName;
  }


  public void setItemName(String itemName) {
    
    
    if (itemName != null && itemName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for itemName. Length must be greater than or equal to 1.");
    }
    this.itemName = itemName;
  }


  public RequisitionLineCreateRequest vendorName(String vendorName) {
    
    
    if (vendorName != null && vendorName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for vendorName. Length must be greater than or equal to 1.");
    }
    
    this.vendorName = vendorName;
    return this;
  }

   /**
   * Get vendorName
   * @return vendorName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getVendorName() {
    return vendorName;
  }


  public void setVendorName(String vendorName) {
    
    
    if (vendorName != null && vendorName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for vendorName. Length must be greater than or equal to 1.");
    }
    this.vendorName = vendorName;
  }


  public RequisitionLineCreateRequest accountCode(String accountCode) {
    
    
    if (accountCode != null && accountCode.length() < 1) {
      throw new IllegalArgumentException("Invalid value for accountCode. Length must be greater than or equal to 1.");
    }
    
    this.accountCode = accountCode;
    return this;
  }

   /**
   * Get accountCode
   * @return accountCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getAccountCode() {
    return accountCode;
  }


  public void setAccountCode(String accountCode) {
    
    
    if (accountCode != null && accountCode.length() < 1) {
      throw new IllegalArgumentException("Invalid value for accountCode. Length must be greater than or equal to 1.");
    }
    this.accountCode = accountCode;
  }


  public RequisitionLineCreateRequest unitPrice(BigDecimal unitPrice) {
    
    
    
    
    this.unitPrice = unitPrice;
    return this;
  }

   /**
   * Get unitPrice
   * @return unitPrice
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public BigDecimal getUnitPrice() {
    return unitPrice;
  }


  public void setUnitPrice(BigDecimal unitPrice) {
    
    
    
    this.unitPrice = unitPrice;
  }


  public RequisitionLineCreateRequest quantity(BigDecimal quantity) {
    
    
    
    
    this.quantity = quantity;
    return this;
  }

   /**
   * Get quantity
   * @return quantity
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public BigDecimal getQuantity() {
    return quantity;
  }


  public void setQuantity(BigDecimal quantity) {
    
    
    
    this.quantity = quantity;
  }


  public RequisitionLineCreateRequest unit(String unit) {
    
    
    if (unit != null && unit.length() < 1) {
      throw new IllegalArgumentException("Invalid value for unit. Length must be greater than or equal to 1.");
    }
    
    this.unit = unit;
    return this;
  }

   /**
   * Get unit
   * @return unit
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getUnit() {
    return unit;
  }


  public void setUnit(String unit) {
    
    
    if (unit != null && unit.length() < 1) {
      throw new IllegalArgumentException("Invalid value for unit. Length must be greater than or equal to 1.");
    }
    this.unit = unit;
  }


  public RequisitionLineCreateRequest currencyCode(String currencyCode) {
    
    
    if (currencyCode != null && currencyCode.length() < 1) {
      throw new IllegalArgumentException("Invalid value for currencyCode. Length must be greater than or equal to 1.");
    }
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * Get currencyCode
   * @return currencyCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(String currencyCode) {
    
    
    if (currencyCode != null && currencyCode.length() < 1) {
      throw new IllegalArgumentException("Invalid value for currencyCode. Length must be greater than or equal to 1.");
    }
    this.currencyCode = currencyCode;
  }


  public RequisitionLineCreateRequest customFields(List<LineItemCustomFieldRequest> customFields) {
    
    
    
    
    this.customFields = customFields;
    return this;
  }

  public RequisitionLineCreateRequest addCustomFieldsItem(LineItemCustomFieldRequest customFieldsItem) {
    this.customFields.add(customFieldsItem);
    return this;
  }

   /**
   * Get customFields
   * @return customFields
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<LineItemCustomFieldRequest> getCustomFields() {
    return customFields;
  }


  public void setCustomFields(List<LineItemCustomFieldRequest> customFields) {
    
    
    
    this.customFields = customFields;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the RequisitionLineCreateRequest instance itself
   */
  public RequisitionLineCreateRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequisitionLineCreateRequest requisitionLineCreateRequest = (RequisitionLineCreateRequest) o;
    return Objects.equals(this.itemName, requisitionLineCreateRequest.itemName) &&
        Objects.equals(this.vendorName, requisitionLineCreateRequest.vendorName) &&
        Objects.equals(this.accountCode, requisitionLineCreateRequest.accountCode) &&
        Objects.equals(this.unitPrice, requisitionLineCreateRequest.unitPrice) &&
        Objects.equals(this.quantity, requisitionLineCreateRequest.quantity) &&
        Objects.equals(this.unit, requisitionLineCreateRequest.unit) &&
        Objects.equals(this.currencyCode, requisitionLineCreateRequest.currencyCode) &&
        Objects.equals(this.customFields, requisitionLineCreateRequest.customFields)&&
        Objects.equals(this.additionalProperties, requisitionLineCreateRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(itemName, vendorName, accountCode, unitPrice, quantity, unit, currencyCode, customFields, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequisitionLineCreateRequest {\n");
    sb.append("    itemName: ").append(toIndentedString(itemName)).append("\n");
    sb.append("    vendorName: ").append(toIndentedString(vendorName)).append("\n");
    sb.append("    accountCode: ").append(toIndentedString(accountCode)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("item_name");
    openapiFields.add("vendor_name");
    openapiFields.add("account_code");
    openapiFields.add("unit_price");
    openapiFields.add("quantity");
    openapiFields.add("unit");
    openapiFields.add("currency_code");
    openapiFields.add("custom_fields");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("item_name");
    openapiRequiredFields.add("vendor_name");
    openapiRequiredFields.add("account_code");
    openapiRequiredFields.add("unit_price");
    openapiRequiredFields.add("quantity");
    openapiRequiredFields.add("unit");
    openapiRequiredFields.add("currency_code");
    openapiRequiredFields.add("custom_fields");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RequisitionLineCreateRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RequisitionLineCreateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RequisitionLineCreateRequest is not found in the empty JSON string", RequisitionLineCreateRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RequisitionLineCreateRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("item_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `item_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item_name").toString()));
      }
      if (!jsonObj.get("vendor_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor_name").toString()));
      }
      if (!jsonObj.get("account_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_code").toString()));
      }
      if (!jsonObj.get("unit_price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit_price").toString()));
      }
      if (!jsonObj.get("quantity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quantity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quantity").toString()));
      }
      if (!jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
      if (!jsonObj.get("currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency_code").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("custom_fields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_fields` to be an array in the JSON string but got `%s`", jsonObj.get("custom_fields").toString()));
      }

      JsonArray jsonArraycustomFields = jsonObj.getAsJsonArray("custom_fields");
      // validate the required field `custom_fields` (array)
      for (int i = 0; i < jsonArraycustomFields.size(); i++) {
        LineItemCustomFieldRequest.validateJsonObject(jsonArraycustomFields.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RequisitionLineCreateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RequisitionLineCreateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RequisitionLineCreateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RequisitionLineCreateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RequisitionLineCreateRequest>() {
           @Override
           public void write(JsonWriter out, RequisitionLineCreateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public RequisitionLineCreateRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             RequisitionLineCreateRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RequisitionLineCreateRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RequisitionLineCreateRequest
  * @throws IOException if the JSON string is invalid with respect to RequisitionLineCreateRequest
  */
  public static RequisitionLineCreateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RequisitionLineCreateRequest.class);
  }

 /**
  * Convert an instance of RequisitionLineCreateRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

