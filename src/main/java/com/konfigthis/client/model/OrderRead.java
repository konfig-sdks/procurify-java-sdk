/*
 * Procurify API Documentation
 *  # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AddressDocsNullable;
import com.konfigthis.client.model.Branch;
import com.konfigthis.client.model.CurrencySummary;
import com.konfigthis.client.model.DepartmentSummary;
import com.konfigthis.client.model.MasterLogger;
import com.konfigthis.client.model.OrderStatusEnum;
import com.konfigthis.client.model.PunchOutReadDocsNullable;
import com.konfigthis.client.model.UserSummary;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * OrderRead
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class OrderRead {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NUM = "num";
  @SerializedName(SERIALIZED_NAME_NUM)
  private Integer num;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private UUID uuid;

  public static final String SERIALIZED_NAME_BRANCH = "branch";
  @SerializedName(SERIALIZED_NAME_BRANCH)
  private Branch branch;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private UserSummary user;

  public static final String SERIALIZED_NAME_DEPARTMENT = "department";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT)
  private DepartmentSummary department;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private CurrencySummary currency;

  public static final String SERIALIZED_NAME_TOTAL_COST_IN_BASE_CURRENCY = "total_cost_in_base_currency";
  @SerializedName(SERIALIZED_NAME_TOTAL_COST_IN_BASE_CURRENCY)
  private Float totalCostInBaseCurrency;

  public static final String SERIALIZED_NAME_LOGS = "logs";
  @SerializedName(SERIALIZED_NAME_LOGS)
  private List<MasterLogger> logs = new ArrayList<>();

  public static final String SERIALIZED_NAME_ITEM_COUNT = "item_count";
  @SerializedName(SERIALIZED_NAME_ITEM_COUNT)
  private Integer itemCount;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ip_address";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_DATE_REQUIRED = "dateRequired";
  @SerializedName(SERIALIZED_NAME_DATE_REQUIRED)
  private OffsetDateTime dateRequired;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "dateModified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_LINE_COUNT = "lineCount";
  @SerializedName(SERIALIZED_NAME_LINE_COUNT)
  private Integer lineCount;

  public static final String SERIALIZED_NAME_PURCHASED_COUNT = "purchasedCount";
  @SerializedName(SERIALIZED_NAME_PURCHASED_COUNT)
  private Integer purchasedCount;

  public static final String SERIALIZED_NAME_TOTAL_PRICE = "totalPrice";
  @SerializedName(SERIALIZED_NAME_TOTAL_PRICE)
  private BigDecimal totalPrice;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private OrderStatusEnum status;

  public static final String SERIALIZED_NAME_NEXT_APPROVER = "next_approver";
  @SerializedName(SERIALIZED_NAME_NEXT_APPROVER)
  private UserSummary nextApprover;

  public static final String SERIALIZED_NAME_APPROVAL_DELEGATEE = "approval_delegatee";
  @SerializedName(SERIALIZED_NAME_APPROVAL_DELEGATEE)
  private Integer approvalDelegatee;

  public static final String SERIALIZED_NAME_PUNCHOUT_GROUP = "punchout_group";
  @SerializedName(SERIALIZED_NAME_PUNCHOUT_GROUP)
  private PunchOutReadDocsNullable punchoutGroup;

  public static final String SERIALIZED_NAME_PUNCHOUT_SHIPPING_ADDRESS = "punchout_shipping_address";
  @SerializedName(SERIALIZED_NAME_PUNCHOUT_SHIPPING_ADDRESS)
  private AddressDocsNullable punchoutShippingAddress;

  public static final String SERIALIZED_NAME_PUNCHOUT_ITEMS_REJECTED = "punchout_items_rejected";
  @SerializedName(SERIALIZED_NAME_PUNCHOUT_ITEMS_REJECTED)
  private Boolean punchoutItemsRejected;

  public static final String SERIALIZED_NAME_PUNCHOUT_SUPPLIER_NAME = "punchout_supplier_name";
  @SerializedName(SERIALIZED_NAME_PUNCHOUT_SUPPLIER_NAME)
  private String punchoutSupplierName;

  public static final String SERIALIZED_NAME_PUNCHOUT_SUPPLIER_ICON = "punchout_supplier_icon";
  @SerializedName(SERIALIZED_NAME_PUNCHOUT_SUPPLIER_ICON)
  private String punchoutSupplierIcon;

  public static final String SERIALIZED_NAME_PUNCHOUT_VENDOR_REFERENCE = "punchout_vendor_reference";
  @SerializedName(SERIALIZED_NAME_PUNCHOUT_VENDOR_REFERENCE)
  private Integer punchoutVendorReference;

  public static final String SERIALIZED_NAME_HAS_BLANKET_ORDER_ITEMS = "has_blanket_order_items";
  @SerializedName(SERIALIZED_NAME_HAS_BLANKET_ORDER_ITEMS)
  private Boolean hasBlanketOrderItems;

  public OrderRead() {
  }

  
  public OrderRead(
     Integer num, 
     Float totalCostInBaseCurrency, 
     Integer itemCount, 
     OffsetDateTime date, 
     OffsetDateTime dateModified, 
     Boolean punchoutItemsRejected, 
     String punchoutSupplierName, 
     String punchoutSupplierIcon, 
     Integer punchoutVendorReference, 
     Boolean hasBlanketOrderItems
  ) {
    this();
    this.num = num;
    this.totalCostInBaseCurrency = totalCostInBaseCurrency;
    this.itemCount = itemCount;
    this.date = date;
    this.dateModified = dateModified;
    this.punchoutItemsRejected = punchoutItemsRejected;
    this.punchoutSupplierName = punchoutSupplierName;
    this.punchoutSupplierIcon = punchoutSupplierIcon;
    this.punchoutVendorReference = punchoutVendorReference;
    this.hasBlanketOrderItems = hasBlanketOrderItems;
  }

  public OrderRead description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


   /**
   * Get num
   * @return num
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getNum() {
    return num;
  }




  public OrderRead uuid(UUID uuid) {
    
    
    
    
    this.uuid = uuid;
    return this;
  }

   /**
   * Get uuid
   * @return uuid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UUID getUuid() {
    return uuid;
  }


  public void setUuid(UUID uuid) {
    
    
    
    this.uuid = uuid;
  }


  public OrderRead branch(Branch branch) {
    
    
    
    
    this.branch = branch;
    return this;
  }

   /**
   * Get branch
   * @return branch
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Branch getBranch() {
    return branch;
  }


  public void setBranch(Branch branch) {
    
    
    
    this.branch = branch;
  }


  public OrderRead user(UserSummary user) {
    
    
    
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UserSummary getUser() {
    return user;
  }


  public void setUser(UserSummary user) {
    
    
    
    this.user = user;
  }


  public OrderRead department(DepartmentSummary department) {
    
    
    
    
    this.department = department;
    return this;
  }

   /**
   * Get department
   * @return department
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public DepartmentSummary getDepartment() {
    return department;
  }


  public void setDepartment(DepartmentSummary department) {
    
    
    
    this.department = department;
  }


  public OrderRead currency(CurrencySummary currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CurrencySummary getCurrency() {
    return currency;
  }


  public void setCurrency(CurrencySummary currency) {
    
    
    
    this.currency = currency;
  }


   /**
   * Get totalCostInBaseCurrency
   * @return totalCostInBaseCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getTotalCostInBaseCurrency() {
    return totalCostInBaseCurrency;
  }




  public OrderRead logs(List<MasterLogger> logs) {
    
    
    
    
    this.logs = logs;
    return this;
  }

  public OrderRead addLogsItem(MasterLogger logsItem) {
    this.logs.add(logsItem);
    return this;
  }

   /**
   * Get logs
   * @return logs
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<MasterLogger> getLogs() {
    return logs;
  }


  public void setLogs(List<MasterLogger> logs) {
    
    
    
    this.logs = logs;
  }


   /**
   * Get itemCount
   * @return itemCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getItemCount() {
    return itemCount;
  }




  public OrderRead ipAddress(String ipAddress) {
    
    
    
    
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * Get ipAddress
   * @return ipAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIpAddress() {
    return ipAddress;
  }


  public void setIpAddress(String ipAddress) {
    
    
    
    this.ipAddress = ipAddress;
  }


   /**
   * Get date
   * @return date
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getDate() {
    return date;
  }




  public OrderRead dateRequired(OffsetDateTime dateRequired) {
    
    
    
    
    this.dateRequired = dateRequired;
    return this;
  }

   /**
   * Get dateRequired
   * @return dateRequired
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getDateRequired() {
    return dateRequired;
  }


  public void setDateRequired(OffsetDateTime dateRequired) {
    
    
    
    this.dateRequired = dateRequired;
  }


   /**
   * Get dateModified
   * @return dateModified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getDateModified() {
    return dateModified;
  }




  public OrderRead lineCount(Integer lineCount) {
    if (lineCount != null && lineCount < -2147483648) {
      throw new IllegalArgumentException("Invalid value for lineCount. Must be greater than or equal to -2147483648.");
    }
    if (lineCount != null && lineCount > 2147483647) {
      throw new IllegalArgumentException("Invalid value for lineCount. Must be less than or equal to 2147483647.");
    }
    
    
    this.lineCount = lineCount;
    return this;
  }

   /**
   * Get lineCount
   * minimum: -2147483648
   * maximum: 2147483647
   * @return lineCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getLineCount() {
    return lineCount;
  }


  public void setLineCount(Integer lineCount) {
    if (lineCount != null && lineCount < -2147483648) {
      throw new IllegalArgumentException("Invalid value for lineCount. Must be greater than or equal to -2147483648.");
    }
    if (lineCount != null && lineCount > 2147483647) {
      throw new IllegalArgumentException("Invalid value for lineCount. Must be less than or equal to 2147483647.");
    }
    
    this.lineCount = lineCount;
  }


  public OrderRead purchasedCount(Integer purchasedCount) {
    if (purchasedCount != null && purchasedCount < -2147483648) {
      throw new IllegalArgumentException("Invalid value for purchasedCount. Must be greater than or equal to -2147483648.");
    }
    if (purchasedCount != null && purchasedCount > 2147483647) {
      throw new IllegalArgumentException("Invalid value for purchasedCount. Must be less than or equal to 2147483647.");
    }
    
    
    this.purchasedCount = purchasedCount;
    return this;
  }

   /**
   * Get purchasedCount
   * minimum: -2147483648
   * maximum: 2147483647
   * @return purchasedCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPurchasedCount() {
    return purchasedCount;
  }


  public void setPurchasedCount(Integer purchasedCount) {
    if (purchasedCount != null && purchasedCount < -2147483648) {
      throw new IllegalArgumentException("Invalid value for purchasedCount. Must be greater than or equal to -2147483648.");
    }
    if (purchasedCount != null && purchasedCount > 2147483647) {
      throw new IllegalArgumentException("Invalid value for purchasedCount. Must be less than or equal to 2147483647.");
    }
    
    this.purchasedCount = purchasedCount;
  }


  public OrderRead totalPrice(BigDecimal totalPrice) {
    
    
    
    
    this.totalPrice = totalPrice;
    return this;
  }

   /**
   * Get totalPrice
   * @return totalPrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getTotalPrice() {
    return totalPrice;
  }


  public void setTotalPrice(BigDecimal totalPrice) {
    
    
    
    this.totalPrice = totalPrice;
  }


  public OrderRead status(OrderStatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderStatusEnum getStatus() {
    return status;
  }


  public void setStatus(OrderStatusEnum status) {
    
    
    
    this.status = status;
  }


  public OrderRead nextApprover(UserSummary nextApprover) {
    
    
    
    
    this.nextApprover = nextApprover;
    return this;
  }

   /**
   * Get nextApprover
   * @return nextApprover
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UserSummary getNextApprover() {
    return nextApprover;
  }


  public void setNextApprover(UserSummary nextApprover) {
    
    
    
    this.nextApprover = nextApprover;
  }


  public OrderRead approvalDelegatee(Integer approvalDelegatee) {
    
    
    
    
    this.approvalDelegatee = approvalDelegatee;
    return this;
  }

   /**
   * Get approvalDelegatee
   * @return approvalDelegatee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getApprovalDelegatee() {
    return approvalDelegatee;
  }


  public void setApprovalDelegatee(Integer approvalDelegatee) {
    
    
    
    this.approvalDelegatee = approvalDelegatee;
  }


  public OrderRead punchoutGroup(PunchOutReadDocsNullable punchoutGroup) {
    
    
    
    
    this.punchoutGroup = punchoutGroup;
    return this;
  }

   /**
   * Get punchoutGroup
   * @return punchoutGroup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PunchOutReadDocsNullable getPunchoutGroup() {
    return punchoutGroup;
  }


  public void setPunchoutGroup(PunchOutReadDocsNullable punchoutGroup) {
    
    
    
    this.punchoutGroup = punchoutGroup;
  }


  public OrderRead punchoutShippingAddress(AddressDocsNullable punchoutShippingAddress) {
    
    
    
    
    this.punchoutShippingAddress = punchoutShippingAddress;
    return this;
  }

   /**
   * Get punchoutShippingAddress
   * @return punchoutShippingAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AddressDocsNullable getPunchoutShippingAddress() {
    return punchoutShippingAddress;
  }


  public void setPunchoutShippingAddress(AddressDocsNullable punchoutShippingAddress) {
    
    
    
    this.punchoutShippingAddress = punchoutShippingAddress;
  }


   /**
   * Get punchoutItemsRejected
   * @return punchoutItemsRejected
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getPunchoutItemsRejected() {
    return punchoutItemsRejected;
  }




   /**
   * Get punchoutSupplierName
   * @return punchoutSupplierName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPunchoutSupplierName() {
    return punchoutSupplierName;
  }




   /**
   * Get punchoutSupplierIcon
   * @return punchoutSupplierIcon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPunchoutSupplierIcon() {
    return punchoutSupplierIcon;
  }




   /**
   * Get punchoutVendorReference
   * @return punchoutVendorReference
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPunchoutVendorReference() {
    return punchoutVendorReference;
  }




   /**
   * Get hasBlanketOrderItems
   * @return hasBlanketOrderItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getHasBlanketOrderItems() {
    return hasBlanketOrderItems;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OrderRead instance itself
   */
  public OrderRead putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderRead orderRead = (OrderRead) o;
    return Objects.equals(this.description, orderRead.description) &&
        Objects.equals(this.num, orderRead.num) &&
        Objects.equals(this.uuid, orderRead.uuid) &&
        Objects.equals(this.branch, orderRead.branch) &&
        Objects.equals(this.user, orderRead.user) &&
        Objects.equals(this.department, orderRead.department) &&
        Objects.equals(this.currency, orderRead.currency) &&
        Objects.equals(this.totalCostInBaseCurrency, orderRead.totalCostInBaseCurrency) &&
        Objects.equals(this.logs, orderRead.logs) &&
        Objects.equals(this.itemCount, orderRead.itemCount) &&
        Objects.equals(this.ipAddress, orderRead.ipAddress) &&
        Objects.equals(this.date, orderRead.date) &&
        Objects.equals(this.dateRequired, orderRead.dateRequired) &&
        Objects.equals(this.dateModified, orderRead.dateModified) &&
        Objects.equals(this.lineCount, orderRead.lineCount) &&
        Objects.equals(this.purchasedCount, orderRead.purchasedCount) &&
        Objects.equals(this.totalPrice, orderRead.totalPrice) &&
        Objects.equals(this.status, orderRead.status) &&
        Objects.equals(this.nextApprover, orderRead.nextApprover) &&
        Objects.equals(this.approvalDelegatee, orderRead.approvalDelegatee) &&
        Objects.equals(this.punchoutGroup, orderRead.punchoutGroup) &&
        Objects.equals(this.punchoutShippingAddress, orderRead.punchoutShippingAddress) &&
        Objects.equals(this.punchoutItemsRejected, orderRead.punchoutItemsRejected) &&
        Objects.equals(this.punchoutSupplierName, orderRead.punchoutSupplierName) &&
        Objects.equals(this.punchoutSupplierIcon, orderRead.punchoutSupplierIcon) &&
        Objects.equals(this.punchoutVendorReference, orderRead.punchoutVendorReference) &&
        Objects.equals(this.hasBlanketOrderItems, orderRead.hasBlanketOrderItems)&&
        Objects.equals(this.additionalProperties, orderRead.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, num, uuid, branch, user, department, currency, totalCostInBaseCurrency, logs, itemCount, ipAddress, date, dateRequired, dateModified, lineCount, purchasedCount, totalPrice, status, nextApprover, approvalDelegatee, punchoutGroup, punchoutShippingAddress, punchoutItemsRejected, punchoutSupplierName, punchoutSupplierIcon, punchoutVendorReference, hasBlanketOrderItems, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderRead {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    num: ").append(toIndentedString(num)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    totalCostInBaseCurrency: ").append(toIndentedString(totalCostInBaseCurrency)).append("\n");
    sb.append("    logs: ").append(toIndentedString(logs)).append("\n");
    sb.append("    itemCount: ").append(toIndentedString(itemCount)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    dateRequired: ").append(toIndentedString(dateRequired)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    lineCount: ").append(toIndentedString(lineCount)).append("\n");
    sb.append("    purchasedCount: ").append(toIndentedString(purchasedCount)).append("\n");
    sb.append("    totalPrice: ").append(toIndentedString(totalPrice)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    nextApprover: ").append(toIndentedString(nextApprover)).append("\n");
    sb.append("    approvalDelegatee: ").append(toIndentedString(approvalDelegatee)).append("\n");
    sb.append("    punchoutGroup: ").append(toIndentedString(punchoutGroup)).append("\n");
    sb.append("    punchoutShippingAddress: ").append(toIndentedString(punchoutShippingAddress)).append("\n");
    sb.append("    punchoutItemsRejected: ").append(toIndentedString(punchoutItemsRejected)).append("\n");
    sb.append("    punchoutSupplierName: ").append(toIndentedString(punchoutSupplierName)).append("\n");
    sb.append("    punchoutSupplierIcon: ").append(toIndentedString(punchoutSupplierIcon)).append("\n");
    sb.append("    punchoutVendorReference: ").append(toIndentedString(punchoutVendorReference)).append("\n");
    sb.append("    hasBlanketOrderItems: ").append(toIndentedString(hasBlanketOrderItems)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("num");
    openapiFields.add("uuid");
    openapiFields.add("branch");
    openapiFields.add("user");
    openapiFields.add("department");
    openapiFields.add("currency");
    openapiFields.add("total_cost_in_base_currency");
    openapiFields.add("logs");
    openapiFields.add("item_count");
    openapiFields.add("ip_address");
    openapiFields.add("date");
    openapiFields.add("dateRequired");
    openapiFields.add("dateModified");
    openapiFields.add("lineCount");
    openapiFields.add("purchasedCount");
    openapiFields.add("totalPrice");
    openapiFields.add("status");
    openapiFields.add("next_approver");
    openapiFields.add("approval_delegatee");
    openapiFields.add("punchout_group");
    openapiFields.add("punchout_shipping_address");
    openapiFields.add("punchout_items_rejected");
    openapiFields.add("punchout_supplier_name");
    openapiFields.add("punchout_supplier_icon");
    openapiFields.add("punchout_vendor_reference");
    openapiFields.add("has_blanket_order_items");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("uuid");
    openapiRequiredFields.add("branch");
    openapiRequiredFields.add("user");
    openapiRequiredFields.add("department");
    openapiRequiredFields.add("logs");
    openapiRequiredFields.add("dateRequired");
    openapiRequiredFields.add("next_approver");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrderRead
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OrderRead.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderRead is not found in the empty JSON string", OrderRead.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrderRead.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("description").isJsonNull() && (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      // validate the required field `branch`
      Branch.validateJsonObject(jsonObj.getAsJsonObject("branch"));
      // validate the required field `user`
      UserSummary.validateJsonObject(jsonObj.getAsJsonObject("user"));
      // validate the required field `department`
      DepartmentSummary.validateJsonObject(jsonObj.getAsJsonObject("department"));
      // validate the optional field `currency`
      if (jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) {
        CurrencySummary.validateJsonObject(jsonObj.getAsJsonObject("currency"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("logs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `logs` to be an array in the JSON string but got `%s`", jsonObj.get("logs").toString()));
      }

      JsonArray jsonArraylogs = jsonObj.getAsJsonArray("logs");
      // validate the required field `logs` (array)
      for (int i = 0; i < jsonArraylogs.size(); i++) {
        MasterLogger.validateJsonObject(jsonArraylogs.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("ip_address").isJsonNull() && (jsonObj.get("ip_address") != null && !jsonObj.get("ip_address").isJsonNull()) && !jsonObj.get("ip_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip_address").toString()));
      }
      if (!jsonObj.get("totalPrice").isJsonNull() && (jsonObj.get("totalPrice") != null && !jsonObj.get("totalPrice").isJsonNull()) && !jsonObj.get("totalPrice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalPrice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalPrice").toString()));
      }
      // validate the required field `next_approver`
      UserSummary.validateJsonObject(jsonObj.getAsJsonObject("next_approver"));
      // validate the optional field `punchout_group`
      if (jsonObj.get("punchout_group") != null && !jsonObj.get("punchout_group").isJsonNull()) {
        PunchOutReadDocsNullable.validateJsonObject(jsonObj.getAsJsonObject("punchout_group"));
      }
      // validate the optional field `punchout_shipping_address`
      if (jsonObj.get("punchout_shipping_address") != null && !jsonObj.get("punchout_shipping_address").isJsonNull()) {
        AddressDocsNullable.validateJsonObject(jsonObj.getAsJsonObject("punchout_shipping_address"));
      }
      if (!jsonObj.get("punchout_supplier_name").isJsonNull() && (jsonObj.get("punchout_supplier_name") != null && !jsonObj.get("punchout_supplier_name").isJsonNull()) && !jsonObj.get("punchout_supplier_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `punchout_supplier_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("punchout_supplier_name").toString()));
      }
      if (!jsonObj.get("punchout_supplier_icon").isJsonNull() && (jsonObj.get("punchout_supplier_icon") != null && !jsonObj.get("punchout_supplier_icon").isJsonNull()) && !jsonObj.get("punchout_supplier_icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `punchout_supplier_icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("punchout_supplier_icon").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderRead.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderRead' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderRead> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderRead.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderRead>() {
           @Override
           public void write(JsonWriter out, OrderRead value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderRead read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             OrderRead instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderRead given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderRead
  * @throws IOException if the JSON string is invalid with respect to OrderRead
  */
  public static OrderRead fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderRead.class);
  }

 /**
  * Convert an instance of OrderRead to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

