/*
 * Procurify API Documentation
 *  # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * SimpleVendor
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SimpleVendor {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_ADDRESS_LINE_ONE = "addressLineOne";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE_ONE)
  private String addressLineOne;

  public static final String SERIALIZED_NAME_ADDRESS_LINE_TWO = "addressLineTwo";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE_TWO)
  private String addressLineTwo;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_STATE_PROVINCE = "state_province";
  @SerializedName(SERIALIZED_NAME_STATE_PROVINCE)
  private String stateProvince;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_OVERALL_SCORE = "overall_score";
  @SerializedName(SERIALIZED_NAME_OVERALL_SCORE)
  private String overallScore;

  public static final String SERIALIZED_NAME_IS_AUTO_EMAIL_PO_ENABLED = "is_auto_email_po_enabled";
  @SerializedName(SERIALIZED_NAME_IS_AUTO_EMAIL_PO_ENABLED)
  private Boolean isAutoEmailPoEnabled;

  public SimpleVendor() {
  }

  
  public SimpleVendor(
     Integer id, 
     String overallScore
  ) {
    this();
    this.id = id;
    this.overallScore = overallScore;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }




  public SimpleVendor name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Name of the vendor
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the vendor")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public SimpleVendor active(Boolean active) {
    
    
    
    
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    
    
    
    this.active = active;
  }


  public SimpleVendor addressLineOne(String addressLineOne) {
    
    
    
    
    this.addressLineOne = addressLineOne;
    return this;
  }

   /**
   * First line of address
   * @return addressLineOne
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "First line of address")

  public String getAddressLineOne() {
    return addressLineOne;
  }


  public void setAddressLineOne(String addressLineOne) {
    
    
    
    this.addressLineOne = addressLineOne;
  }


  public SimpleVendor addressLineTwo(String addressLineTwo) {
    
    
    
    
    this.addressLineTwo = addressLineTwo;
    return this;
  }

   /**
   * Second line of address
   * @return addressLineTwo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Second line of address")

  public String getAddressLineTwo() {
    return addressLineTwo;
  }


  public void setAddressLineTwo(String addressLineTwo) {
    
    
    
    this.addressLineTwo = addressLineTwo;
  }


  public SimpleVendor postalCode(String postalCode) {
    
    
    
    
    this.postalCode = postalCode;
    return this;
  }

   /**
   * Postal or Zip code of the vendor
   * @return postalCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Postal or Zip code of the vendor")

  public String getPostalCode() {
    return postalCode;
  }


  public void setPostalCode(String postalCode) {
    
    
    
    this.postalCode = postalCode;
  }


  public SimpleVendor city(String city) {
    
    
    
    
    this.city = city;
    return this;
  }

   /**
   * City of the vendor
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "City of the vendor")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    
    
    
    this.city = city;
  }


  public SimpleVendor stateProvince(String stateProvince) {
    
    
    
    
    this.stateProvince = stateProvince;
    return this;
  }

   /**
   * State or Province of the vendor
   * @return stateProvince
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "State or Province of the vendor")

  public String getStateProvince() {
    return stateProvince;
  }


  public void setStateProvince(String stateProvince) {
    
    
    
    this.stateProvince = stateProvince;
  }


  public SimpleVendor country(String country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * Country of the vendor
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Country of the vendor")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    
    
    
    this.country = country;
  }


   /**
   * Get overallScore
   * @return overallScore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOverallScore() {
    return overallScore;
  }




  public SimpleVendor isAutoEmailPoEnabled(Boolean isAutoEmailPoEnabled) {
    
    
    
    
    this.isAutoEmailPoEnabled = isAutoEmailPoEnabled;
    return this;
  }

   /**
   * Represents whether the AutoEmail PO feature is turned on for this Vendor
   * @return isAutoEmailPoEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Represents whether the AutoEmail PO feature is turned on for this Vendor")

  public Boolean getIsAutoEmailPoEnabled() {
    return isAutoEmailPoEnabled;
  }


  public void setIsAutoEmailPoEnabled(Boolean isAutoEmailPoEnabled) {
    
    
    
    this.isAutoEmailPoEnabled = isAutoEmailPoEnabled;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SimpleVendor instance itself
   */
  public SimpleVendor putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimpleVendor simpleVendor = (SimpleVendor) o;
    return Objects.equals(this.id, simpleVendor.id) &&
        Objects.equals(this.name, simpleVendor.name) &&
        Objects.equals(this.active, simpleVendor.active) &&
        Objects.equals(this.addressLineOne, simpleVendor.addressLineOne) &&
        Objects.equals(this.addressLineTwo, simpleVendor.addressLineTwo) &&
        Objects.equals(this.postalCode, simpleVendor.postalCode) &&
        Objects.equals(this.city, simpleVendor.city) &&
        Objects.equals(this.stateProvince, simpleVendor.stateProvince) &&
        Objects.equals(this.country, simpleVendor.country) &&
        Objects.equals(this.overallScore, simpleVendor.overallScore) &&
        Objects.equals(this.isAutoEmailPoEnabled, simpleVendor.isAutoEmailPoEnabled)&&
        Objects.equals(this.additionalProperties, simpleVendor.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, active, addressLineOne, addressLineTwo, postalCode, city, stateProvince, country, overallScore, isAutoEmailPoEnabled, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimpleVendor {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    addressLineOne: ").append(toIndentedString(addressLineOne)).append("\n");
    sb.append("    addressLineTwo: ").append(toIndentedString(addressLineTwo)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    stateProvince: ").append(toIndentedString(stateProvince)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    overallScore: ").append(toIndentedString(overallScore)).append("\n");
    sb.append("    isAutoEmailPoEnabled: ").append(toIndentedString(isAutoEmailPoEnabled)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("active");
    openapiFields.add("addressLineOne");
    openapiFields.add("addressLineTwo");
    openapiFields.add("postalCode");
    openapiFields.add("city");
    openapiFields.add("state_province");
    openapiFields.add("country");
    openapiFields.add("overall_score");
    openapiFields.add("is_auto_email_po_enabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SimpleVendor
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SimpleVendor.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SimpleVendor is not found in the empty JSON string", SimpleVendor.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SimpleVendor.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("addressLineOne").isJsonNull() && (jsonObj.get("addressLineOne") != null && !jsonObj.get("addressLineOne").isJsonNull()) && !jsonObj.get("addressLineOne").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressLineOne` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressLineOne").toString()));
      }
      if (!jsonObj.get("addressLineTwo").isJsonNull() && (jsonObj.get("addressLineTwo") != null && !jsonObj.get("addressLineTwo").isJsonNull()) && !jsonObj.get("addressLineTwo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressLineTwo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressLineTwo").toString()));
      }
      if (!jsonObj.get("postalCode").isJsonNull() && (jsonObj.get("postalCode") != null && !jsonObj.get("postalCode").isJsonNull()) && !jsonObj.get("postalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalCode").toString()));
      }
      if (!jsonObj.get("city").isJsonNull() && (jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if (!jsonObj.get("state_province").isJsonNull() && (jsonObj.get("state_province") != null && !jsonObj.get("state_province").isJsonNull()) && !jsonObj.get("state_province").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_province` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state_province").toString()));
      }
      if (!jsonObj.get("country").isJsonNull() && (jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("overall_score") != null && !jsonObj.get("overall_score").isJsonNull()) && !jsonObj.get("overall_score").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overall_score` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overall_score").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SimpleVendor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SimpleVendor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SimpleVendor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SimpleVendor.class));

       return (TypeAdapter<T>) new TypeAdapter<SimpleVendor>() {
           @Override
           public void write(JsonWriter out, SimpleVendor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SimpleVendor read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SimpleVendor instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SimpleVendor given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SimpleVendor
  * @throws IOException if the JSON string is invalid with respect to SimpleVendor
  */
  public static SimpleVendor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SimpleVendor.class);
  }

 /**
  * Convert an instance of SimpleVendor to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

