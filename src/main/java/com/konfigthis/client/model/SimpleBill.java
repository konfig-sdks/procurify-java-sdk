/*
 * Procurify API Documentation
 *  # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ApproverRead;
import com.konfigthis.client.model.BillListViewApproverUserDocsNullable;
import com.konfigthis.client.model.BillStatusEnum;
import com.konfigthis.client.model.SimpleAPVendor;
import com.konfigthis.client.model.SimpleCurrency;
import com.konfigthis.client.model.SimpleUser;
import com.konfigthis.client.model.SimpleUserProfile;
import com.konfigthis.client.model.ZeroOneTwoEnum;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * SimpleBill
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SimpleBill {
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Long version;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private BillStatusEnum status;

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private Boolean locked;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private SimpleCurrency currency;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private UUID uuid;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<Integer> items = null;

  public static final String SERIALIZED_NAME_VENDOR = "vendor";
  @SerializedName(SERIALIZED_NAME_VENDOR)
  private SimpleAPVendor vendor;

  public static final String SERIALIZED_NAME_DUE_DATE = "due_date";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private OffsetDateTime dueDate;

  public static final String SERIALIZED_NAME_TOTAL_COST_WITH_TAX = "total_cost_with_tax";
  @SerializedName(SERIALIZED_NAME_TOTAL_COST_WITH_TAX)
  private Float totalCostWithTax;

  public static final String SERIALIZED_NAME_INVOICE_DATE = "invoice_date";
  @SerializedName(SERIALIZED_NAME_INVOICE_DATE)
  private OffsetDateTime invoiceDate;

  public static final String SERIALIZED_NAME_NEXT_APPROVER_CHOICES = "next_approver_choices";
  @SerializedName(SERIALIZED_NAME_NEXT_APPROVER_CHOICES)
  private List<ApproverRead> nextApproverChoices = null;

  public static final String SERIALIZED_NAME_LAST_EXPORT_USER = "last_export_user";
  @SerializedName(SERIALIZED_NAME_LAST_EXPORT_USER)
  private SimpleUserProfile lastExportUser;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_DATETIME = "last_modified_datetime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_DATETIME)
  private OffsetDateTime lastModifiedDatetime;

  public static final String SERIALIZED_NAME_LAST_EXPORT_DATE = "last_export_date";
  @SerializedName(SERIALIZED_NAME_LAST_EXPORT_DATE)
  private LocalDate lastExportDate;

  public static final String SERIALIZED_NAME_SUBMITTED_DATE = "submitted_date";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_DATE)
  private OffsetDateTime submittedDate;

  public static final String SERIALIZED_NAME_GL_POST_DATE = "gl_post_date";
  @SerializedName(SERIALIZED_NAME_GL_POST_DATE)
  private OffsetDateTime glPostDate;

  public static final String SERIALIZED_NAME_INVOICE_NUMBER = "invoice_number";
  @SerializedName(SERIALIZED_NAME_INVOICE_NUMBER)
  private String invoiceNumber;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private Integer group;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ZeroOneTwoEnum type;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private SimpleUser user;

  public static final String SERIALIZED_NAME_APPROVER = "approver";
  @SerializedName(SERIALIZED_NAME_APPROVER)
  private BillListViewApproverUserDocsNullable approver;

  public static final String SERIALIZED_NAME_PAST_DUE = "past_due";
  @SerializedName(SERIALIZED_NAME_PAST_DUE)
  private Boolean pastDue;

  public static final String SERIALIZED_NAME_PAYMENT_UUID = "payment_uuid";
  @SerializedName(SERIALIZED_NAME_PAYMENT_UUID)
  private UUID paymentUuid;

  public static final String SERIALIZED_NAME_INVOICE_UUID = "invoice_uuid";
  @SerializedName(SERIALIZED_NAME_INVOICE_UUID)
  private String invoiceUuid;

  public SimpleBill() {
  }

  
  public SimpleBill(
     Integer id, 
     Boolean locked, 
     List<Integer> items, 
     Float totalCostWithTax, 
     List<ApproverRead> nextApproverChoices, 
     OffsetDateTime lastModifiedDatetime, 
     LocalDate lastExportDate, 
     Integer group, 
     Boolean pastDue, 
     String invoiceUuid
  ) {
    this();
    this.id = id;
    this.locked = locked;
    this.items = items;
    this.totalCostWithTax = totalCostWithTax;
    this.nextApproverChoices = nextApproverChoices;
    this.lastModifiedDatetime = lastModifiedDatetime;
    this.lastExportDate = lastExportDate;
    this.group = group;
    this.pastDue = pastDue;
    this.invoiceUuid = invoiceUuid;
  }

  public SimpleBill version(Long version) {
    if (version != null && version < 0) {
      throw new IllegalArgumentException("Invalid value for version. Must be greater than or equal to 0.");
    }
    if (version != null && version > 4294967295) {
      throw new IllegalArgumentException("Invalid value for version. Must be less than or equal to 4294967295.");
    }
    
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * minimum: 0
   * maximum: 4294967295
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getVersion() {
    return version;
  }


  public void setVersion(Long version) {
    if (version != null && version < 0) {
      throw new IllegalArgumentException("Invalid value for version. Must be greater than or equal to 0.");
    }
    if (version != null && version > 4294967295) {
      throw new IllegalArgumentException("Invalid value for version. Must be less than or equal to 4294967295.");
    }
    
    this.version = version;
  }


   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }




  public SimpleBill status(BillStatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BillStatusEnum getStatus() {
    return status;
  }


  public void setStatus(BillStatusEnum status) {
    
    
    
    this.status = status;
  }


   /**
   * Get locked
   * @return locked
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getLocked() {
    return locked;
  }




  public SimpleBill currency(SimpleCurrency currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public SimpleCurrency getCurrency() {
    return currency;
  }


  public void setCurrency(SimpleCurrency currency) {
    
    
    
    this.currency = currency;
  }


  public SimpleBill uuid(UUID uuid) {
    
    
    
    
    this.uuid = uuid;
    return this;
  }

   /**
   * Get uuid
   * @return uuid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UUID getUuid() {
    return uuid;
  }


  public void setUuid(UUID uuid) {
    
    
    
    this.uuid = uuid;
  }


   /**
   * Get items
   * @return items
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getItems() {
    return items;
  }




  public SimpleBill vendor(SimpleAPVendor vendor) {
    
    
    
    
    this.vendor = vendor;
    return this;
  }

   /**
   * Get vendor
   * @return vendor
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public SimpleAPVendor getVendor() {
    return vendor;
  }


  public void setVendor(SimpleAPVendor vendor) {
    
    
    
    this.vendor = vendor;
  }


  public SimpleBill dueDate(OffsetDateTime dueDate) {
    
    
    
    
    this.dueDate = dueDate;
    return this;
  }

   /**
   * Get dueDate
   * @return dueDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getDueDate() {
    return dueDate;
  }


  public void setDueDate(OffsetDateTime dueDate) {
    
    
    
    this.dueDate = dueDate;
  }


   /**
   * Get totalCostWithTax
   * @return totalCostWithTax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getTotalCostWithTax() {
    return totalCostWithTax;
  }




  public SimpleBill invoiceDate(OffsetDateTime invoiceDate) {
    
    
    
    
    this.invoiceDate = invoiceDate;
    return this;
  }

   /**
   * Get invoiceDate
   * @return invoiceDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getInvoiceDate() {
    return invoiceDate;
  }


  public void setInvoiceDate(OffsetDateTime invoiceDate) {
    
    
    
    this.invoiceDate = invoiceDate;
  }


   /**
   * Get nextApproverChoices
   * @return nextApproverChoices
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ApproverRead> getNextApproverChoices() {
    return nextApproverChoices;
  }




  public SimpleBill lastExportUser(SimpleUserProfile lastExportUser) {
    
    
    
    
    this.lastExportUser = lastExportUser;
    return this;
  }

   /**
   * Get lastExportUser
   * @return lastExportUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SimpleUserProfile getLastExportUser() {
    return lastExportUser;
  }


  public void setLastExportUser(SimpleUserProfile lastExportUser) {
    
    
    
    this.lastExportUser = lastExportUser;
  }


   /**
   * Get lastModifiedDatetime
   * @return lastModifiedDatetime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getLastModifiedDatetime() {
    return lastModifiedDatetime;
  }




   /**
   * Get lastExportDate
   * @return lastExportDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LocalDate getLastExportDate() {
    return lastExportDate;
  }




  public SimpleBill submittedDate(OffsetDateTime submittedDate) {
    
    
    
    
    this.submittedDate = submittedDate;
    return this;
  }

   /**
   * Get submittedDate
   * @return submittedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getSubmittedDate() {
    return submittedDate;
  }


  public void setSubmittedDate(OffsetDateTime submittedDate) {
    
    
    
    this.submittedDate = submittedDate;
  }


  public SimpleBill glPostDate(OffsetDateTime glPostDate) {
    
    
    
    
    this.glPostDate = glPostDate;
    return this;
  }

   /**
   * Get glPostDate
   * @return glPostDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getGlPostDate() {
    return glPostDate;
  }


  public void setGlPostDate(OffsetDateTime glPostDate) {
    
    
    
    this.glPostDate = glPostDate;
  }


  public SimpleBill invoiceNumber(String invoiceNumber) {
    
    
    
    
    this.invoiceNumber = invoiceNumber;
    return this;
  }

   /**
   * Get invoiceNumber
   * @return invoiceNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getInvoiceNumber() {
    return invoiceNumber;
  }


  public void setInvoiceNumber(String invoiceNumber) {
    
    
    
    this.invoiceNumber = invoiceNumber;
  }


   /**
   * Get group
   * @return group
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getGroup() {
    return group;
  }




  public SimpleBill type(ZeroOneTwoEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ZeroOneTwoEnum getType() {
    return type;
  }


  public void setType(ZeroOneTwoEnum type) {
    
    
    
    this.type = type;
  }


  public SimpleBill user(SimpleUser user) {
    
    
    
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public SimpleUser getUser() {
    return user;
  }


  public void setUser(SimpleUser user) {
    
    
    
    this.user = user;
  }


  public SimpleBill approver(BillListViewApproverUserDocsNullable approver) {
    
    
    
    
    this.approver = approver;
    return this;
  }

   /**
   * Get approver
   * @return approver
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BillListViewApproverUserDocsNullable getApprover() {
    return approver;
  }


  public void setApprover(BillListViewApproverUserDocsNullable approver) {
    
    
    
    this.approver = approver;
  }


   /**
   * Get pastDue
   * @return pastDue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getPastDue() {
    return pastDue;
  }




  public SimpleBill paymentUuid(UUID paymentUuid) {
    
    
    
    
    this.paymentUuid = paymentUuid;
    return this;
  }

   /**
   * Get paymentUuid
   * @return paymentUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getPaymentUuid() {
    return paymentUuid;
  }


  public void setPaymentUuid(UUID paymentUuid) {
    
    
    
    this.paymentUuid = paymentUuid;
  }


   /**
   * Get invoiceUuid
   * @return invoiceUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getInvoiceUuid() {
    return invoiceUuid;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SimpleBill instance itself
   */
  public SimpleBill putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimpleBill simpleBill = (SimpleBill) o;
    return Objects.equals(this.version, simpleBill.version) &&
        Objects.equals(this.id, simpleBill.id) &&
        Objects.equals(this.status, simpleBill.status) &&
        Objects.equals(this.locked, simpleBill.locked) &&
        Objects.equals(this.currency, simpleBill.currency) &&
        Objects.equals(this.uuid, simpleBill.uuid) &&
        Objects.equals(this.items, simpleBill.items) &&
        Objects.equals(this.vendor, simpleBill.vendor) &&
        Objects.equals(this.dueDate, simpleBill.dueDate) &&
        Objects.equals(this.totalCostWithTax, simpleBill.totalCostWithTax) &&
        Objects.equals(this.invoiceDate, simpleBill.invoiceDate) &&
        Objects.equals(this.nextApproverChoices, simpleBill.nextApproverChoices) &&
        Objects.equals(this.lastExportUser, simpleBill.lastExportUser) &&
        Objects.equals(this.lastModifiedDatetime, simpleBill.lastModifiedDatetime) &&
        Objects.equals(this.lastExportDate, simpleBill.lastExportDate) &&
        Objects.equals(this.submittedDate, simpleBill.submittedDate) &&
        Objects.equals(this.glPostDate, simpleBill.glPostDate) &&
        Objects.equals(this.invoiceNumber, simpleBill.invoiceNumber) &&
        Objects.equals(this.group, simpleBill.group) &&
        Objects.equals(this.type, simpleBill.type) &&
        Objects.equals(this.user, simpleBill.user) &&
        Objects.equals(this.approver, simpleBill.approver) &&
        Objects.equals(this.pastDue, simpleBill.pastDue) &&
        Objects.equals(this.paymentUuid, simpleBill.paymentUuid) &&
        Objects.equals(this.invoiceUuid, simpleBill.invoiceUuid)&&
        Objects.equals(this.additionalProperties, simpleBill.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, id, status, locked, currency, uuid, items, vendor, dueDate, totalCostWithTax, invoiceDate, nextApproverChoices, lastExportUser, lastModifiedDatetime, lastExportDate, submittedDate, glPostDate, invoiceNumber, group, type, user, approver, pastDue, paymentUuid, invoiceUuid, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimpleBill {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    vendor: ").append(toIndentedString(vendor)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    totalCostWithTax: ").append(toIndentedString(totalCostWithTax)).append("\n");
    sb.append("    invoiceDate: ").append(toIndentedString(invoiceDate)).append("\n");
    sb.append("    nextApproverChoices: ").append(toIndentedString(nextApproverChoices)).append("\n");
    sb.append("    lastExportUser: ").append(toIndentedString(lastExportUser)).append("\n");
    sb.append("    lastModifiedDatetime: ").append(toIndentedString(lastModifiedDatetime)).append("\n");
    sb.append("    lastExportDate: ").append(toIndentedString(lastExportDate)).append("\n");
    sb.append("    submittedDate: ").append(toIndentedString(submittedDate)).append("\n");
    sb.append("    glPostDate: ").append(toIndentedString(glPostDate)).append("\n");
    sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    approver: ").append(toIndentedString(approver)).append("\n");
    sb.append("    pastDue: ").append(toIndentedString(pastDue)).append("\n");
    sb.append("    paymentUuid: ").append(toIndentedString(paymentUuid)).append("\n");
    sb.append("    invoiceUuid: ").append(toIndentedString(invoiceUuid)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version");
    openapiFields.add("id");
    openapiFields.add("status");
    openapiFields.add("locked");
    openapiFields.add("currency");
    openapiFields.add("uuid");
    openapiFields.add("items");
    openapiFields.add("vendor");
    openapiFields.add("due_date");
    openapiFields.add("total_cost_with_tax");
    openapiFields.add("invoice_date");
    openapiFields.add("next_approver_choices");
    openapiFields.add("last_export_user");
    openapiFields.add("last_modified_datetime");
    openapiFields.add("last_export_date");
    openapiFields.add("submitted_date");
    openapiFields.add("gl_post_date");
    openapiFields.add("invoice_number");
    openapiFields.add("group");
    openapiFields.add("type");
    openapiFields.add("user");
    openapiFields.add("approver");
    openapiFields.add("past_due");
    openapiFields.add("payment_uuid");
    openapiFields.add("invoice_uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("uuid");
    openapiRequiredFields.add("vendor");
    openapiRequiredFields.add("user");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SimpleBill
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SimpleBill.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SimpleBill is not found in the empty JSON string", SimpleBill.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SimpleBill.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `currency`
      SimpleCurrency.validateJsonObject(jsonObj.getAsJsonObject("currency"));
      if (!jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
      }
      // validate the required field `vendor`
      SimpleAPVendor.validateJsonObject(jsonObj.getAsJsonObject("vendor"));
      if (jsonObj.get("next_approver_choices") != null && !jsonObj.get("next_approver_choices").isJsonNull()) {
        JsonArray jsonArraynextApproverChoices = jsonObj.getAsJsonArray("next_approver_choices");
        if (jsonArraynextApproverChoices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("next_approver_choices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `next_approver_choices` to be an array in the JSON string but got `%s`", jsonObj.get("next_approver_choices").toString()));
          }

          // validate the optional field `next_approver_choices` (array)
          for (int i = 0; i < jsonArraynextApproverChoices.size(); i++) {
            ApproverRead.validateJsonObject(jsonArraynextApproverChoices.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `last_export_user`
      if (jsonObj.get("last_export_user") != null && !jsonObj.get("last_export_user").isJsonNull()) {
        SimpleUserProfile.validateJsonObject(jsonObj.getAsJsonObject("last_export_user"));
      }
      if ((jsonObj.get("invoice_number") != null && !jsonObj.get("invoice_number").isJsonNull()) && !jsonObj.get("invoice_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_number").toString()));
      }
      // validate the required field `user`
      SimpleUser.validateJsonObject(jsonObj.getAsJsonObject("user"));
      // validate the optional field `approver`
      if (jsonObj.get("approver") != null && !jsonObj.get("approver").isJsonNull()) {
        BillListViewApproverUserDocsNullable.validateJsonObject(jsonObj.getAsJsonObject("approver"));
      }
      if (!jsonObj.get("payment_uuid").isJsonNull() && (jsonObj.get("payment_uuid") != null && !jsonObj.get("payment_uuid").isJsonNull()) && !jsonObj.get("payment_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_uuid").toString()));
      }
      if ((jsonObj.get("invoice_uuid") != null && !jsonObj.get("invoice_uuid").isJsonNull()) && !jsonObj.get("invoice_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SimpleBill.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SimpleBill' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SimpleBill> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SimpleBill.class));

       return (TypeAdapter<T>) new TypeAdapter<SimpleBill>() {
           @Override
           public void write(JsonWriter out, SimpleBill value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SimpleBill read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SimpleBill instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SimpleBill given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SimpleBill
  * @throws IOException if the JSON string is invalid with respect to SimpleBill
  */
  public static SimpleBill fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SimpleBill.class);
  }

 /**
  * Convert an instance of SimpleBill to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

