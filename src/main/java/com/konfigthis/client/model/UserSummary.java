/*
 * Procurify API Documentation
 *  # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.DepartmentSummary;
import com.konfigthis.client.model.SimpleUserSummaryApprovalDelegatee;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * UserSummary
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class UserSummary {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_DEPARTMENT = "department";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT)
  private DepartmentSummary department;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private String position;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_NOTIFICATIONS = "notifications";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS)
  private Boolean notifications;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "is_active";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_MOBILE = "mobile";
  @SerializedName(SERIALIZED_NAME_MOBILE)
  private Boolean mobile;

  public static final String SERIALIZED_NAME_PROFILE_IMAGE = "profile_image";
  @SerializedName(SERIALIZED_NAME_PROFILE_IMAGE)
  private String profileImage;

  public static final String SERIALIZED_NAME_SLACK_USER_ID = "slack_user_id";
  @SerializedName(SERIALIZED_NAME_SLACK_USER_ID)
  private String slackUserId;

  public static final String SERIALIZED_NAME_IS_SSO_ENABLED = "is_sso_enabled";
  @SerializedName(SERIALIZED_NAME_IS_SSO_ENABLED)
  private Boolean isSsoEnabled;

  public static final String SERIALIZED_NAME_LAST_CHANGED_BY = "last_changed_by";
  @SerializedName(SERIALIZED_NAME_LAST_CHANGED_BY)
  private Integer lastChangedBy;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private Integer user;

  public static final String SERIALIZED_NAME_APPROVAL_DELEGATEE = "approval_delegatee";
  @SerializedName(SERIALIZED_NAME_APPROVAL_DELEGATEE)
  private SimpleUserSummaryApprovalDelegatee approvalDelegatee;

  public static final String SERIALIZED_NAME_EXPECTED_RETURN_DATE = "expected_return_date";
  @SerializedName(SERIALIZED_NAME_EXPECTED_RETURN_DATE)
  private LocalDate expectedReturnDate;

  public UserSummary() {
  }

  
  public UserSummary(
     Integer id, 
     OffsetDateTime createdAt, 
     OffsetDateTime updatedAt, 
     LocalDate expectedReturnDate
  ) {
    this();
    this.id = id;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.expectedReturnDate = expectedReturnDate;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }




  public UserSummary department(DepartmentSummary department) {
    
    
    
    
    this.department = department;
    return this;
  }

   /**
   * Get department
   * @return department
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public DepartmentSummary getDepartment() {
    return department;
  }


  public void setDepartment(DepartmentSummary department) {
    
    
    
    this.department = department;
  }


   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }




   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }




  public UserSummary firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public UserSummary lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public UserSummary email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public UserSummary position(String position) {
    
    
    
    
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPosition() {
    return position;
  }


  public void setPosition(String position) {
    
    
    
    this.position = position;
  }


  public UserSummary phone(String phone) {
    
    
    
    
    this.phone = phone;
    return this;
  }

   /**
   * Get phone
   * @return phone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPhone() {
    return phone;
  }


  public void setPhone(String phone) {
    
    
    
    this.phone = phone;
  }


  public UserSummary address(String address) {
    
    
    
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    
    
    
    this.address = address;
  }


  public UserSummary notifications(Boolean notifications) {
    
    
    
    
    this.notifications = notifications;
    return this;
  }

   /**
   * Get notifications
   * @return notifications
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getNotifications() {
    return notifications;
  }


  public void setNotifications(Boolean notifications) {
    
    
    
    this.notifications = notifications;
  }


  public UserSummary isActive(Boolean isActive) {
    
    
    
    
    this.isActive = isActive;
    return this;
  }

   /**
   * Get isActive
   * @return isActive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsActive() {
    return isActive;
  }


  public void setIsActive(Boolean isActive) {
    
    
    
    this.isActive = isActive;
  }


  public UserSummary mobile(Boolean mobile) {
    
    
    
    
    this.mobile = mobile;
    return this;
  }

   /**
   * Get mobile
   * @return mobile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getMobile() {
    return mobile;
  }


  public void setMobile(Boolean mobile) {
    
    
    
    this.mobile = mobile;
  }


  public UserSummary profileImage(String profileImage) {
    
    
    
    
    this.profileImage = profileImage;
    return this;
  }

   /**
   * Get profileImage
   * @return profileImage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getProfileImage() {
    return profileImage;
  }


  public void setProfileImage(String profileImage) {
    
    
    
    this.profileImage = profileImage;
  }


  public UserSummary slackUserId(String slackUserId) {
    
    
    
    
    this.slackUserId = slackUserId;
    return this;
  }

   /**
   * Get slackUserId
   * @return slackUserId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSlackUserId() {
    return slackUserId;
  }


  public void setSlackUserId(String slackUserId) {
    
    
    
    this.slackUserId = slackUserId;
  }


  public UserSummary isSsoEnabled(Boolean isSsoEnabled) {
    
    
    
    
    this.isSsoEnabled = isSsoEnabled;
    return this;
  }

   /**
   * Get isSsoEnabled
   * @return isSsoEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsSsoEnabled() {
    return isSsoEnabled;
  }


  public void setIsSsoEnabled(Boolean isSsoEnabled) {
    
    
    
    this.isSsoEnabled = isSsoEnabled;
  }


  public UserSummary lastChangedBy(Integer lastChangedBy) {
    
    
    
    
    this.lastChangedBy = lastChangedBy;
    return this;
  }

   /**
   * Get lastChangedBy
   * @return lastChangedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getLastChangedBy() {
    return lastChangedBy;
  }


  public void setLastChangedBy(Integer lastChangedBy) {
    
    
    
    this.lastChangedBy = lastChangedBy;
  }


  public UserSummary user(Integer user) {
    
    
    
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getUser() {
    return user;
  }


  public void setUser(Integer user) {
    
    
    
    this.user = user;
  }


  public UserSummary approvalDelegatee(SimpleUserSummaryApprovalDelegatee approvalDelegatee) {
    
    
    
    
    this.approvalDelegatee = approvalDelegatee;
    return this;
  }

   /**
   * Get approvalDelegatee
   * @return approvalDelegatee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SimpleUserSummaryApprovalDelegatee getApprovalDelegatee() {
    return approvalDelegatee;
  }


  public void setApprovalDelegatee(SimpleUserSummaryApprovalDelegatee approvalDelegatee) {
    
    
    
    this.approvalDelegatee = approvalDelegatee;
  }


   /**
   * Get expectedReturnDate
   * @return expectedReturnDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LocalDate getExpectedReturnDate() {
    return expectedReturnDate;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UserSummary instance itself
   */
  public UserSummary putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserSummary userSummary = (UserSummary) o;
    return Objects.equals(this.id, userSummary.id) &&
        Objects.equals(this.department, userSummary.department) &&
        Objects.equals(this.createdAt, userSummary.createdAt) &&
        Objects.equals(this.updatedAt, userSummary.updatedAt) &&
        Objects.equals(this.firstName, userSummary.firstName) &&
        Objects.equals(this.lastName, userSummary.lastName) &&
        Objects.equals(this.email, userSummary.email) &&
        Objects.equals(this.position, userSummary.position) &&
        Objects.equals(this.phone, userSummary.phone) &&
        Objects.equals(this.address, userSummary.address) &&
        Objects.equals(this.notifications, userSummary.notifications) &&
        Objects.equals(this.isActive, userSummary.isActive) &&
        Objects.equals(this.mobile, userSummary.mobile) &&
        Objects.equals(this.profileImage, userSummary.profileImage) &&
        Objects.equals(this.slackUserId, userSummary.slackUserId) &&
        Objects.equals(this.isSsoEnabled, userSummary.isSsoEnabled) &&
        Objects.equals(this.lastChangedBy, userSummary.lastChangedBy) &&
        Objects.equals(this.user, userSummary.user) &&
        Objects.equals(this.approvalDelegatee, userSummary.approvalDelegatee) &&
        Objects.equals(this.expectedReturnDate, userSummary.expectedReturnDate)&&
        Objects.equals(this.additionalProperties, userSummary.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, department, createdAt, updatedAt, firstName, lastName, email, position, phone, address, notifications, isActive, mobile, profileImage, slackUserId, isSsoEnabled, lastChangedBy, user, approvalDelegatee, expectedReturnDate, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserSummary {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    mobile: ").append(toIndentedString(mobile)).append("\n");
    sb.append("    profileImage: ").append(toIndentedString(profileImage)).append("\n");
    sb.append("    slackUserId: ").append(toIndentedString(slackUserId)).append("\n");
    sb.append("    isSsoEnabled: ").append(toIndentedString(isSsoEnabled)).append("\n");
    sb.append("    lastChangedBy: ").append(toIndentedString(lastChangedBy)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    approvalDelegatee: ").append(toIndentedString(approvalDelegatee)).append("\n");
    sb.append("    expectedReturnDate: ").append(toIndentedString(expectedReturnDate)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("department");
    openapiFields.add("created_at");
    openapiFields.add("updated_at");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("email");
    openapiFields.add("position");
    openapiFields.add("phone");
    openapiFields.add("address");
    openapiFields.add("notifications");
    openapiFields.add("is_active");
    openapiFields.add("mobile");
    openapiFields.add("profile_image");
    openapiFields.add("slack_user_id");
    openapiFields.add("is_sso_enabled");
    openapiFields.add("last_changed_by");
    openapiFields.add("user");
    openapiFields.add("approval_delegatee");
    openapiFields.add("expected_return_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("department");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("user");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UserSummary
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UserSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserSummary is not found in the empty JSON string", UserSummary.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserSummary.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `department`
      DepartmentSummary.validateJsonObject(jsonObj.getAsJsonObject("department"));
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("position").isJsonNull() && (jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) && !jsonObj.get("position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("position").toString()));
      }
      if (!jsonObj.get("phone").isJsonNull() && (jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if (!jsonObj.get("address").isJsonNull() && (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if (!jsonObj.get("profile_image").isJsonNull() && (jsonObj.get("profile_image") != null && !jsonObj.get("profile_image").isJsonNull()) && !jsonObj.get("profile_image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profile_image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profile_image").toString()));
      }
      if ((jsonObj.get("slack_user_id") != null && !jsonObj.get("slack_user_id").isJsonNull()) && !jsonObj.get("slack_user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slack_user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slack_user_id").toString()));
      }
      // validate the optional field `approval_delegatee`
      if (jsonObj.get("approval_delegatee") != null && !jsonObj.get("approval_delegatee").isJsonNull()) {
        SimpleUserSummaryApprovalDelegatee.validateJsonObject(jsonObj.getAsJsonObject("approval_delegatee"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<UserSummary>() {
           @Override
           public void write(JsonWriter out, UserSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UserSummary read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             UserSummary instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UserSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UserSummary
  * @throws IOException if the JSON string is invalid with respect to UserSummary
  */
  public static UserSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserSummary.class);
  }

 /**
  * Convert an instance of UserSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

