/*
 * Procurify API Documentation
 *  # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.APBillPaymentDocsNullable;
import com.konfigthis.client.model.ApproverRead;
import com.konfigthis.client.model.ApproverReadNullable;
import com.konfigthis.client.model.Attachment;
import com.konfigthis.client.model.BillCostRead;
import com.konfigthis.client.model.BillPurchaseOrderDocs;
import com.konfigthis.client.model.BillStatusEnum;
import com.konfigthis.client.model.BillStatusRead;
import com.konfigthis.client.model.Comment;
import com.konfigthis.client.model.Currency;
import com.konfigthis.client.model.ItemReadSerializerV2;
import com.konfigthis.client.model.SimpleUserSummary;
import com.konfigthis.client.model.UserSummary;
import com.konfigthis.client.model.VendorRead;
import com.konfigthis.client.model.VersionChoicesDocs;
import com.konfigthis.client.model.ZeroOneTwoEnum;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * BillRead
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BillRead {
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Long version;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private UUID uuid;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private UserSummary user;

  public static final String SERIALIZED_NAME_VENDOR = "vendor";
  @SerializedName(SERIALIZED_NAME_VENDOR)
  private VendorRead vendor;

  public static final String SERIALIZED_NAME_APPROVAL_CHAIN = "approval_chain";
  @SerializedName(SERIALIZED_NAME_APPROVAL_CHAIN)
  private Integer approvalChain;

  public static final String SERIALIZED_NAME_APPROVER = "approver";
  @SerializedName(SERIALIZED_NAME_APPROVER)
  private ApproverReadNullable approver;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<ItemReadSerializerV2> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_COSTS = "costs";
  @SerializedName(SERIALIZED_NAME_COSTS)
  private List<BillCostRead> costs = new ArrayList<>();

  public static final String SERIALIZED_NAME_INVOICE_ATTACHMENTS = "invoice_attachments";
  @SerializedName(SERIALIZED_NAME_INVOICE_ATTACHMENTS)
  private List<Attachment> invoiceAttachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_BILL_STATUSES = "bill_statuses";
  @SerializedName(SERIALIZED_NAME_BILL_STATUSES)
  private List<BillStatusRead> billStatuses = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private Currency currency;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private List<Comment> comments = null;

  public static final String SERIALIZED_NAME_VERSION_CHOICES = "version_choices";
  @SerializedName(SERIALIZED_NAME_VERSION_CHOICES)
  private List<VersionChoicesDocs> versionChoices = null;

  public static final String SERIALIZED_NAME_TAX_AMOUNT = "tax_amount";
  @SerializedName(SERIALIZED_NAME_TAX_AMOUNT)
  private Double taxAmount;

  public static final String SERIALIZED_NAME_INCLUSIVE_TAX_AMOUNT = "inclusive_tax_amount";
  @SerializedName(SERIALIZED_NAME_INCLUSIVE_TAX_AMOUNT)
  private Double inclusiveTaxAmount;

  public static final String SERIALIZED_NAME_EXCLUSIVE_TAX_AMOUNT = "exclusive_tax_amount";
  @SerializedName(SERIALIZED_NAME_EXCLUSIVE_TAX_AMOUNT)
  private Double exclusiveTaxAmount;

  public static final String SERIALIZED_NAME_SUBTOTAL_COST = "subtotal_cost";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL_COST)
  private Double subtotalCost;

  public static final String SERIALIZED_NAME_TOTAL_COST = "total_cost";
  @SerializedName(SERIALIZED_NAME_TOTAL_COST)
  private Double totalCost;

  public static final String SERIALIZED_NAME_TOTAL_COST_WITH_TAX = "total_cost_with_tax";
  @SerializedName(SERIALIZED_NAME_TOTAL_COST_WITH_TAX)
  private Double totalCostWithTax;

  public static final String SERIALIZED_NAME_CONVERTED_TOTAL_COST = "converted_total_cost";
  @SerializedName(SERIALIZED_NAME_CONVERTED_TOTAL_COST)
  private Double convertedTotalCost;

  public static final String SERIALIZED_NAME_NEXT_APPROVER_CHOICES = "next_approver_choices";
  @SerializedName(SERIALIZED_NAME_NEXT_APPROVER_CHOICES)
  private List<ApproverRead> nextApproverChoices = null;

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private Boolean locked;

  public static final String SERIALIZED_NAME_BILL_PAYMENT = "bill_payment";
  @SerializedName(SERIALIZED_NAME_BILL_PAYMENT)
  private APBillPaymentDocsNullable billPayment;

  public static final String SERIALIZED_NAME_CREDITCARD = "creditcard";
  @SerializedName(SERIALIZED_NAME_CREDITCARD)
  private Integer creditcard;

  public static final String SERIALIZED_NAME_CREDITCARD_NAME = "creditcard_name";
  @SerializedName(SERIALIZED_NAME_CREDITCARD_NAME)
  private String creditcardName;

  public static final String SERIALIZED_NAME_LAST_EXPORT_USER = "last_export_user";
  @SerializedName(SERIALIZED_NAME_LAST_EXPORT_USER)
  private SimpleUserSummary lastExportUser;

  public static final String SERIALIZED_NAME_LAST_EXPORT_DATE = "last_export_date";
  @SerializedName(SERIALIZED_NAME_LAST_EXPORT_DATE)
  private LocalDate lastExportDate;

  public static final String SERIALIZED_NAME_VENDOR_NAME = "vendor_name";
  @SerializedName(SERIALIZED_NAME_VENDOR_NAME)
  private String vendorName;

  public static final String SERIALIZED_NAME_VENDOR_CONTACT = "vendor_contact";
  @SerializedName(SERIALIZED_NAME_VENDOR_CONTACT)
  private String vendorContact;

  public static final String SERIALIZED_NAME_VENDOR_ADDRESS_ONE = "vendor_address_one";
  @SerializedName(SERIALIZED_NAME_VENDOR_ADDRESS_ONE)
  private String vendorAddressOne;

  public static final String SERIALIZED_NAME_VENDOR_ADDRESS_TWO = "vendor_address_two";
  @SerializedName(SERIALIZED_NAME_VENDOR_ADDRESS_TWO)
  private String vendorAddressTwo;

  public static final String SERIALIZED_NAME_VENDOR_POSTAL_CODE = "vendor_postal_code";
  @SerializedName(SERIALIZED_NAME_VENDOR_POSTAL_CODE)
  private String vendorPostalCode;

  public static final String SERIALIZED_NAME_VENDOR_CITY = "vendor_city";
  @SerializedName(SERIALIZED_NAME_VENDOR_CITY)
  private String vendorCity;

  public static final String SERIALIZED_NAME_VENDOR_STATE_PROVINCE = "vendor_state_province";
  @SerializedName(SERIALIZED_NAME_VENDOR_STATE_PROVINCE)
  private String vendorStateProvince;

  public static final String SERIALIZED_NAME_VENDOR_COUNTRY = "vendor_country";
  @SerializedName(SERIALIZED_NAME_VENDOR_COUNTRY)
  private String vendorCountry;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_DATETIME = "last_modified_datetime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_DATETIME)
  private OffsetDateTime lastModifiedDatetime;

  public static final String SERIALIZED_NAME_SUBMITTED_DATE = "submitted_date";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_DATE)
  private OffsetDateTime submittedDate;

  public static final String SERIALIZED_NAME_INVOICE_NUMBER = "invoice_number";
  @SerializedName(SERIALIZED_NAME_INVOICE_NUMBER)
  private String invoiceNumber;

  public static final String SERIALIZED_NAME_INVOICE_DATE = "invoice_date";
  @SerializedName(SERIALIZED_NAME_INVOICE_DATE)
  private OffsetDateTime invoiceDate;

  public static final String SERIALIZED_NAME_DUE_DATE = "due_date";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private OffsetDateTime dueDate;

  public static final String SERIALIZED_NAME_PAYMENT_TERMS = "payment_terms";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TERMS)
  private String paymentTerms;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private BillStatusEnum status;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ZeroOneTwoEnum type;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_GL_POST_DATE = "gl_post_date";
  @SerializedName(SERIALIZED_NAME_GL_POST_DATE)
  private OffsetDateTime glPostDate;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private Integer group;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "payment_method";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private Integer paymentMethod;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD_NAME = "payment_method_name";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD_NAME)
  private String paymentMethodName;

  public static final String SERIALIZED_NAME_ADDED_PURCHASE_ORDERS = "added_purchase_orders";
  @SerializedName(SERIALIZED_NAME_ADDED_PURCHASE_ORDERS)
  private List<BillPurchaseOrderDocs> addedPurchaseOrders = null;

  public static final String SERIALIZED_NAME_SHIPPING_AMOUNT = "shipping_amount";
  @SerializedName(SERIALIZED_NAME_SHIPPING_AMOUNT)
  private Double shippingAmount;

  public static final String SERIALIZED_NAME_INVOICE_UUID = "invoice_uuid";
  @SerializedName(SERIALIZED_NAME_INVOICE_UUID)
  private String invoiceUuid;

  public BillRead() {
  }

  
  public BillRead(
     Integer id, 
     Integer approvalChain, 
     List<Comment> comments, 
     List<VersionChoicesDocs> versionChoices, 
     Double taxAmount, 
     Double inclusiveTaxAmount, 
     Double exclusiveTaxAmount, 
     Double subtotalCost, 
     Double totalCost, 
     Double totalCostWithTax, 
     Double convertedTotalCost, 
     List<ApproverRead> nextApproverChoices, 
     Boolean locked, 
     Integer creditcard, 
     String creditcardName, 
     LocalDate lastExportDate, 
     OffsetDateTime lastModifiedDatetime, 
     String paymentMethodName, 
     List<BillPurchaseOrderDocs> addedPurchaseOrders, 
     Double shippingAmount, 
     String invoiceUuid
  ) {
    this();
    this.id = id;
    this.approvalChain = approvalChain;
    this.comments = comments;
    this.versionChoices = versionChoices;
    this.taxAmount = taxAmount;
    this.inclusiveTaxAmount = inclusiveTaxAmount;
    this.exclusiveTaxAmount = exclusiveTaxAmount;
    this.subtotalCost = subtotalCost;
    this.totalCost = totalCost;
    this.totalCostWithTax = totalCostWithTax;
    this.convertedTotalCost = convertedTotalCost;
    this.nextApproverChoices = nextApproverChoices;
    this.locked = locked;
    this.creditcard = creditcard;
    this.creditcardName = creditcardName;
    this.lastExportDate = lastExportDate;
    this.lastModifiedDatetime = lastModifiedDatetime;
    this.paymentMethodName = paymentMethodName;
    this.addedPurchaseOrders = addedPurchaseOrders;
    this.shippingAmount = shippingAmount;
    this.invoiceUuid = invoiceUuid;
  }

  public BillRead version(Long version) {
    if (version != null && version < 0) {
      throw new IllegalArgumentException("Invalid value for version. Must be greater than or equal to 0.");
    }
    if (version != null && version > 4294967295) {
      throw new IllegalArgumentException("Invalid value for version. Must be less than or equal to 4294967295.");
    }
    
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * minimum: 0
   * maximum: 4294967295
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getVersion() {
    return version;
  }


  public void setVersion(Long version) {
    if (version != null && version < 0) {
      throw new IllegalArgumentException("Invalid value for version. Must be greater than or equal to 0.");
    }
    if (version != null && version > 4294967295) {
      throw new IllegalArgumentException("Invalid value for version. Must be less than or equal to 4294967295.");
    }
    
    this.version = version;
  }


   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }




  public BillRead uuid(UUID uuid) {
    
    
    
    
    this.uuid = uuid;
    return this;
  }

   /**
   * Get uuid
   * @return uuid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UUID getUuid() {
    return uuid;
  }


  public void setUuid(UUID uuid) {
    
    
    
    this.uuid = uuid;
  }


  public BillRead user(UserSummary user) {
    
    
    
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UserSummary getUser() {
    return user;
  }


  public void setUser(UserSummary user) {
    
    
    
    this.user = user;
  }


  public BillRead vendor(VendorRead vendor) {
    
    
    
    
    this.vendor = vendor;
    return this;
  }

   /**
   * Get vendor
   * @return vendor
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public VendorRead getVendor() {
    return vendor;
  }


  public void setVendor(VendorRead vendor) {
    
    
    
    this.vendor = vendor;
  }


   /**
   * Get approvalChain
   * @return approvalChain
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getApprovalChain() {
    return approvalChain;
  }




  public BillRead approver(ApproverReadNullable approver) {
    
    
    
    
    this.approver = approver;
    return this;
  }

   /**
   * Get approver
   * @return approver
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ApproverReadNullable getApprover() {
    return approver;
  }


  public void setApprover(ApproverReadNullable approver) {
    
    
    
    this.approver = approver;
  }


  public BillRead items(List<ItemReadSerializerV2> items) {
    
    
    
    
    this.items = items;
    return this;
  }

  public BillRead addItemsItem(ItemReadSerializerV2 itemsItem) {
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Get items
   * @return items
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<ItemReadSerializerV2> getItems() {
    return items;
  }


  public void setItems(List<ItemReadSerializerV2> items) {
    
    
    
    this.items = items;
  }


  public BillRead costs(List<BillCostRead> costs) {
    
    
    
    
    this.costs = costs;
    return this;
  }

  public BillRead addCostsItem(BillCostRead costsItem) {
    this.costs.add(costsItem);
    return this;
  }

   /**
   * Get costs
   * @return costs
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<BillCostRead> getCosts() {
    return costs;
  }


  public void setCosts(List<BillCostRead> costs) {
    
    
    
    this.costs = costs;
  }


  public BillRead invoiceAttachments(List<Attachment> invoiceAttachments) {
    
    
    
    
    this.invoiceAttachments = invoiceAttachments;
    return this;
  }

  public BillRead addInvoiceAttachmentsItem(Attachment invoiceAttachmentsItem) {
    this.invoiceAttachments.add(invoiceAttachmentsItem);
    return this;
  }

   /**
   * Get invoiceAttachments
   * @return invoiceAttachments
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Attachment> getInvoiceAttachments() {
    return invoiceAttachments;
  }


  public void setInvoiceAttachments(List<Attachment> invoiceAttachments) {
    
    
    
    this.invoiceAttachments = invoiceAttachments;
  }


  public BillRead billStatuses(List<BillStatusRead> billStatuses) {
    
    
    
    
    this.billStatuses = billStatuses;
    return this;
  }

  public BillRead addBillStatusesItem(BillStatusRead billStatusesItem) {
    this.billStatuses.add(billStatusesItem);
    return this;
  }

   /**
   * Get billStatuses
   * @return billStatuses
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<BillStatusRead> getBillStatuses() {
    return billStatuses;
  }


  public void setBillStatuses(List<BillStatusRead> billStatuses) {
    
    
    
    this.billStatuses = billStatuses;
  }


  public BillRead currency(Currency currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Currency getCurrency() {
    return currency;
  }


  public void setCurrency(Currency currency) {
    
    
    
    this.currency = currency;
  }


   /**
   * Get comments
   * @return comments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Comment> getComments() {
    return comments;
  }




   /**
   * Get versionChoices
   * @return versionChoices
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<VersionChoicesDocs> getVersionChoices() {
    return versionChoices;
  }




   /**
   * Get taxAmount
   * @return taxAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getTaxAmount() {
    return taxAmount;
  }




   /**
   * Get inclusiveTaxAmount
   * @return inclusiveTaxAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getInclusiveTaxAmount() {
    return inclusiveTaxAmount;
  }




   /**
   * Get exclusiveTaxAmount
   * @return exclusiveTaxAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getExclusiveTaxAmount() {
    return exclusiveTaxAmount;
  }




   /**
   * Get subtotalCost
   * @return subtotalCost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getSubtotalCost() {
    return subtotalCost;
  }




   /**
   * Get totalCost
   * @return totalCost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getTotalCost() {
    return totalCost;
  }




   /**
   * Get totalCostWithTax
   * @return totalCostWithTax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getTotalCostWithTax() {
    return totalCostWithTax;
  }




   /**
   * Get convertedTotalCost
   * @return convertedTotalCost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getConvertedTotalCost() {
    return convertedTotalCost;
  }




   /**
   * Get nextApproverChoices
   * @return nextApproverChoices
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ApproverRead> getNextApproverChoices() {
    return nextApproverChoices;
  }




   /**
   * Get locked
   * @return locked
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getLocked() {
    return locked;
  }




  public BillRead billPayment(APBillPaymentDocsNullable billPayment) {
    
    
    
    
    this.billPayment = billPayment;
    return this;
  }

   /**
   * Get billPayment
   * @return billPayment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public APBillPaymentDocsNullable getBillPayment() {
    return billPayment;
  }


  public void setBillPayment(APBillPaymentDocsNullable billPayment) {
    
    
    
    this.billPayment = billPayment;
  }


   /**
   * Get creditcard
   * @return creditcard
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCreditcard() {
    return creditcard;
  }




   /**
   * Get creditcardName
   * @return creditcardName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCreditcardName() {
    return creditcardName;
  }




  public BillRead lastExportUser(SimpleUserSummary lastExportUser) {
    
    
    
    
    this.lastExportUser = lastExportUser;
    return this;
  }

   /**
   * Get lastExportUser
   * @return lastExportUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SimpleUserSummary getLastExportUser() {
    return lastExportUser;
  }


  public void setLastExportUser(SimpleUserSummary lastExportUser) {
    
    
    
    this.lastExportUser = lastExportUser;
  }


   /**
   * Get lastExportDate
   * @return lastExportDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LocalDate getLastExportDate() {
    return lastExportDate;
  }




  public BillRead vendorName(String vendorName) {
    
    
    
    
    this.vendorName = vendorName;
    return this;
  }

   /**
   * Get vendorName
   * @return vendorName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getVendorName() {
    return vendorName;
  }


  public void setVendorName(String vendorName) {
    
    
    
    this.vendorName = vendorName;
  }


  public BillRead vendorContact(String vendorContact) {
    
    
    
    
    this.vendorContact = vendorContact;
    return this;
  }

   /**
   * Get vendorContact
   * @return vendorContact
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getVendorContact() {
    return vendorContact;
  }


  public void setVendorContact(String vendorContact) {
    
    
    
    this.vendorContact = vendorContact;
  }


  public BillRead vendorAddressOne(String vendorAddressOne) {
    
    
    
    
    this.vendorAddressOne = vendorAddressOne;
    return this;
  }

   /**
   * Get vendorAddressOne
   * @return vendorAddressOne
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getVendorAddressOne() {
    return vendorAddressOne;
  }


  public void setVendorAddressOne(String vendorAddressOne) {
    
    
    
    this.vendorAddressOne = vendorAddressOne;
  }


  public BillRead vendorAddressTwo(String vendorAddressTwo) {
    
    
    
    
    this.vendorAddressTwo = vendorAddressTwo;
    return this;
  }

   /**
   * Get vendorAddressTwo
   * @return vendorAddressTwo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getVendorAddressTwo() {
    return vendorAddressTwo;
  }


  public void setVendorAddressTwo(String vendorAddressTwo) {
    
    
    
    this.vendorAddressTwo = vendorAddressTwo;
  }


  public BillRead vendorPostalCode(String vendorPostalCode) {
    
    
    
    
    this.vendorPostalCode = vendorPostalCode;
    return this;
  }

   /**
   * Get vendorPostalCode
   * @return vendorPostalCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getVendorPostalCode() {
    return vendorPostalCode;
  }


  public void setVendorPostalCode(String vendorPostalCode) {
    
    
    
    this.vendorPostalCode = vendorPostalCode;
  }


  public BillRead vendorCity(String vendorCity) {
    
    
    
    
    this.vendorCity = vendorCity;
    return this;
  }

   /**
   * Get vendorCity
   * @return vendorCity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getVendorCity() {
    return vendorCity;
  }


  public void setVendorCity(String vendorCity) {
    
    
    
    this.vendorCity = vendorCity;
  }


  public BillRead vendorStateProvince(String vendorStateProvince) {
    
    
    
    
    this.vendorStateProvince = vendorStateProvince;
    return this;
  }

   /**
   * Get vendorStateProvince
   * @return vendorStateProvince
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getVendorStateProvince() {
    return vendorStateProvince;
  }


  public void setVendorStateProvince(String vendorStateProvince) {
    
    
    
    this.vendorStateProvince = vendorStateProvince;
  }


  public BillRead vendorCountry(String vendorCountry) {
    
    
    
    
    this.vendorCountry = vendorCountry;
    return this;
  }

   /**
   * Get vendorCountry
   * @return vendorCountry
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getVendorCountry() {
    return vendorCountry;
  }


  public void setVendorCountry(String vendorCountry) {
    
    
    
    this.vendorCountry = vendorCountry;
  }


   /**
   * Get lastModifiedDatetime
   * @return lastModifiedDatetime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getLastModifiedDatetime() {
    return lastModifiedDatetime;
  }




  public BillRead submittedDate(OffsetDateTime submittedDate) {
    
    
    
    
    this.submittedDate = submittedDate;
    return this;
  }

   /**
   * Get submittedDate
   * @return submittedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getSubmittedDate() {
    return submittedDate;
  }


  public void setSubmittedDate(OffsetDateTime submittedDate) {
    
    
    
    this.submittedDate = submittedDate;
  }


  public BillRead invoiceNumber(String invoiceNumber) {
    
    
    
    
    this.invoiceNumber = invoiceNumber;
    return this;
  }

   /**
   * Get invoiceNumber
   * @return invoiceNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getInvoiceNumber() {
    return invoiceNumber;
  }


  public void setInvoiceNumber(String invoiceNumber) {
    
    
    
    this.invoiceNumber = invoiceNumber;
  }


  public BillRead invoiceDate(OffsetDateTime invoiceDate) {
    
    
    
    
    this.invoiceDate = invoiceDate;
    return this;
  }

   /**
   * Get invoiceDate
   * @return invoiceDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getInvoiceDate() {
    return invoiceDate;
  }


  public void setInvoiceDate(OffsetDateTime invoiceDate) {
    
    
    
    this.invoiceDate = invoiceDate;
  }


  public BillRead dueDate(OffsetDateTime dueDate) {
    
    
    
    
    this.dueDate = dueDate;
    return this;
  }

   /**
   * Get dueDate
   * @return dueDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getDueDate() {
    return dueDate;
  }


  public void setDueDate(OffsetDateTime dueDate) {
    
    
    
    this.dueDate = dueDate;
  }


  public BillRead paymentTerms(String paymentTerms) {
    
    
    
    
    this.paymentTerms = paymentTerms;
    return this;
  }

   /**
   * Get paymentTerms
   * @return paymentTerms
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPaymentTerms() {
    return paymentTerms;
  }


  public void setPaymentTerms(String paymentTerms) {
    
    
    
    this.paymentTerms = paymentTerms;
  }


  public BillRead status(BillStatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BillStatusEnum getStatus() {
    return status;
  }


  public void setStatus(BillStatusEnum status) {
    
    
    
    this.status = status;
  }


  public BillRead type(ZeroOneTwoEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ZeroOneTwoEnum getType() {
    return type;
  }


  public void setType(ZeroOneTwoEnum type) {
    
    
    
    this.type = type;
  }


  public BillRead active(Boolean active) {
    
    
    
    
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    
    
    
    this.active = active;
  }


  public BillRead note(String note) {
    
    
    
    
    this.note = note;
    return this;
  }

   /**
   * Get note
   * @return note
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNote() {
    return note;
  }


  public void setNote(String note) {
    
    
    
    this.note = note;
  }


  public BillRead glPostDate(OffsetDateTime glPostDate) {
    
    
    
    
    this.glPostDate = glPostDate;
    return this;
  }

   /**
   * Get glPostDate
   * @return glPostDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getGlPostDate() {
    return glPostDate;
  }


  public void setGlPostDate(OffsetDateTime glPostDate) {
    
    
    
    this.glPostDate = glPostDate;
  }


  public BillRead group(Integer group) {
    
    
    
    
    this.group = group;
    return this;
  }

   /**
   * Get group
   * @return group
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getGroup() {
    return group;
  }


  public void setGroup(Integer group) {
    
    
    
    this.group = group;
  }


  public BillRead paymentMethod(Integer paymentMethod) {
    
    
    
    
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * Get paymentMethod
   * @return paymentMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPaymentMethod() {
    return paymentMethod;
  }


  public void setPaymentMethod(Integer paymentMethod) {
    
    
    
    this.paymentMethod = paymentMethod;
  }


   /**
   * Get paymentMethodName
   * @return paymentMethodName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPaymentMethodName() {
    return paymentMethodName;
  }




   /**
   * Get addedPurchaseOrders
   * @return addedPurchaseOrders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<BillPurchaseOrderDocs> getAddedPurchaseOrders() {
    return addedPurchaseOrders;
  }




   /**
   * Get shippingAmount
   * @return shippingAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getShippingAmount() {
    return shippingAmount;
  }




   /**
   * Get invoiceUuid
   * @return invoiceUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getInvoiceUuid() {
    return invoiceUuid;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BillRead instance itself
   */
  public BillRead putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BillRead billRead = (BillRead) o;
    return Objects.equals(this.version, billRead.version) &&
        Objects.equals(this.id, billRead.id) &&
        Objects.equals(this.uuid, billRead.uuid) &&
        Objects.equals(this.user, billRead.user) &&
        Objects.equals(this.vendor, billRead.vendor) &&
        Objects.equals(this.approvalChain, billRead.approvalChain) &&
        Objects.equals(this.approver, billRead.approver) &&
        Objects.equals(this.items, billRead.items) &&
        Objects.equals(this.costs, billRead.costs) &&
        Objects.equals(this.invoiceAttachments, billRead.invoiceAttachments) &&
        Objects.equals(this.billStatuses, billRead.billStatuses) &&
        Objects.equals(this.currency, billRead.currency) &&
        Objects.equals(this.comments, billRead.comments) &&
        Objects.equals(this.versionChoices, billRead.versionChoices) &&
        Objects.equals(this.taxAmount, billRead.taxAmount) &&
        Objects.equals(this.inclusiveTaxAmount, billRead.inclusiveTaxAmount) &&
        Objects.equals(this.exclusiveTaxAmount, billRead.exclusiveTaxAmount) &&
        Objects.equals(this.subtotalCost, billRead.subtotalCost) &&
        Objects.equals(this.totalCost, billRead.totalCost) &&
        Objects.equals(this.totalCostWithTax, billRead.totalCostWithTax) &&
        Objects.equals(this.convertedTotalCost, billRead.convertedTotalCost) &&
        Objects.equals(this.nextApproverChoices, billRead.nextApproverChoices) &&
        Objects.equals(this.locked, billRead.locked) &&
        Objects.equals(this.billPayment, billRead.billPayment) &&
        Objects.equals(this.creditcard, billRead.creditcard) &&
        Objects.equals(this.creditcardName, billRead.creditcardName) &&
        Objects.equals(this.lastExportUser, billRead.lastExportUser) &&
        Objects.equals(this.lastExportDate, billRead.lastExportDate) &&
        Objects.equals(this.vendorName, billRead.vendorName) &&
        Objects.equals(this.vendorContact, billRead.vendorContact) &&
        Objects.equals(this.vendorAddressOne, billRead.vendorAddressOne) &&
        Objects.equals(this.vendorAddressTwo, billRead.vendorAddressTwo) &&
        Objects.equals(this.vendorPostalCode, billRead.vendorPostalCode) &&
        Objects.equals(this.vendorCity, billRead.vendorCity) &&
        Objects.equals(this.vendorStateProvince, billRead.vendorStateProvince) &&
        Objects.equals(this.vendorCountry, billRead.vendorCountry) &&
        Objects.equals(this.lastModifiedDatetime, billRead.lastModifiedDatetime) &&
        Objects.equals(this.submittedDate, billRead.submittedDate) &&
        Objects.equals(this.invoiceNumber, billRead.invoiceNumber) &&
        Objects.equals(this.invoiceDate, billRead.invoiceDate) &&
        Objects.equals(this.dueDate, billRead.dueDate) &&
        Objects.equals(this.paymentTerms, billRead.paymentTerms) &&
        Objects.equals(this.status, billRead.status) &&
        Objects.equals(this.type, billRead.type) &&
        Objects.equals(this.active, billRead.active) &&
        Objects.equals(this.note, billRead.note) &&
        Objects.equals(this.glPostDate, billRead.glPostDate) &&
        Objects.equals(this.group, billRead.group) &&
        Objects.equals(this.paymentMethod, billRead.paymentMethod) &&
        Objects.equals(this.paymentMethodName, billRead.paymentMethodName) &&
        Objects.equals(this.addedPurchaseOrders, billRead.addedPurchaseOrders) &&
        Objects.equals(this.shippingAmount, billRead.shippingAmount) &&
        Objects.equals(this.invoiceUuid, billRead.invoiceUuid)&&
        Objects.equals(this.additionalProperties, billRead.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, id, uuid, user, vendor, approvalChain, approver, items, costs, invoiceAttachments, billStatuses, currency, comments, versionChoices, taxAmount, inclusiveTaxAmount, exclusiveTaxAmount, subtotalCost, totalCost, totalCostWithTax, convertedTotalCost, nextApproverChoices, locked, billPayment, creditcard, creditcardName, lastExportUser, lastExportDate, vendorName, vendorContact, vendorAddressOne, vendorAddressTwo, vendorPostalCode, vendorCity, vendorStateProvince, vendorCountry, lastModifiedDatetime, submittedDate, invoiceNumber, invoiceDate, dueDate, paymentTerms, status, type, active, note, glPostDate, group, paymentMethod, paymentMethodName, addedPurchaseOrders, shippingAmount, invoiceUuid, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BillRead {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    vendor: ").append(toIndentedString(vendor)).append("\n");
    sb.append("    approvalChain: ").append(toIndentedString(approvalChain)).append("\n");
    sb.append("    approver: ").append(toIndentedString(approver)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    costs: ").append(toIndentedString(costs)).append("\n");
    sb.append("    invoiceAttachments: ").append(toIndentedString(invoiceAttachments)).append("\n");
    sb.append("    billStatuses: ").append(toIndentedString(billStatuses)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    versionChoices: ").append(toIndentedString(versionChoices)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("    inclusiveTaxAmount: ").append(toIndentedString(inclusiveTaxAmount)).append("\n");
    sb.append("    exclusiveTaxAmount: ").append(toIndentedString(exclusiveTaxAmount)).append("\n");
    sb.append("    subtotalCost: ").append(toIndentedString(subtotalCost)).append("\n");
    sb.append("    totalCost: ").append(toIndentedString(totalCost)).append("\n");
    sb.append("    totalCostWithTax: ").append(toIndentedString(totalCostWithTax)).append("\n");
    sb.append("    convertedTotalCost: ").append(toIndentedString(convertedTotalCost)).append("\n");
    sb.append("    nextApproverChoices: ").append(toIndentedString(nextApproverChoices)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    billPayment: ").append(toIndentedString(billPayment)).append("\n");
    sb.append("    creditcard: ").append(toIndentedString(creditcard)).append("\n");
    sb.append("    creditcardName: ").append(toIndentedString(creditcardName)).append("\n");
    sb.append("    lastExportUser: ").append(toIndentedString(lastExportUser)).append("\n");
    sb.append("    lastExportDate: ").append(toIndentedString(lastExportDate)).append("\n");
    sb.append("    vendorName: ").append(toIndentedString(vendorName)).append("\n");
    sb.append("    vendorContact: ").append(toIndentedString(vendorContact)).append("\n");
    sb.append("    vendorAddressOne: ").append(toIndentedString(vendorAddressOne)).append("\n");
    sb.append("    vendorAddressTwo: ").append(toIndentedString(vendorAddressTwo)).append("\n");
    sb.append("    vendorPostalCode: ").append(toIndentedString(vendorPostalCode)).append("\n");
    sb.append("    vendorCity: ").append(toIndentedString(vendorCity)).append("\n");
    sb.append("    vendorStateProvince: ").append(toIndentedString(vendorStateProvince)).append("\n");
    sb.append("    vendorCountry: ").append(toIndentedString(vendorCountry)).append("\n");
    sb.append("    lastModifiedDatetime: ").append(toIndentedString(lastModifiedDatetime)).append("\n");
    sb.append("    submittedDate: ").append(toIndentedString(submittedDate)).append("\n");
    sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
    sb.append("    invoiceDate: ").append(toIndentedString(invoiceDate)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    paymentTerms: ").append(toIndentedString(paymentTerms)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    glPostDate: ").append(toIndentedString(glPostDate)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    paymentMethodName: ").append(toIndentedString(paymentMethodName)).append("\n");
    sb.append("    addedPurchaseOrders: ").append(toIndentedString(addedPurchaseOrders)).append("\n");
    sb.append("    shippingAmount: ").append(toIndentedString(shippingAmount)).append("\n");
    sb.append("    invoiceUuid: ").append(toIndentedString(invoiceUuid)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version");
    openapiFields.add("id");
    openapiFields.add("uuid");
    openapiFields.add("user");
    openapiFields.add("vendor");
    openapiFields.add("approval_chain");
    openapiFields.add("approver");
    openapiFields.add("items");
    openapiFields.add("costs");
    openapiFields.add("invoice_attachments");
    openapiFields.add("bill_statuses");
    openapiFields.add("currency");
    openapiFields.add("comments");
    openapiFields.add("version_choices");
    openapiFields.add("tax_amount");
    openapiFields.add("inclusive_tax_amount");
    openapiFields.add("exclusive_tax_amount");
    openapiFields.add("subtotal_cost");
    openapiFields.add("total_cost");
    openapiFields.add("total_cost_with_tax");
    openapiFields.add("converted_total_cost");
    openapiFields.add("next_approver_choices");
    openapiFields.add("locked");
    openapiFields.add("bill_payment");
    openapiFields.add("creditcard");
    openapiFields.add("creditcard_name");
    openapiFields.add("last_export_user");
    openapiFields.add("last_export_date");
    openapiFields.add("vendor_name");
    openapiFields.add("vendor_contact");
    openapiFields.add("vendor_address_one");
    openapiFields.add("vendor_address_two");
    openapiFields.add("vendor_postal_code");
    openapiFields.add("vendor_city");
    openapiFields.add("vendor_state_province");
    openapiFields.add("vendor_country");
    openapiFields.add("last_modified_datetime");
    openapiFields.add("submitted_date");
    openapiFields.add("invoice_number");
    openapiFields.add("invoice_date");
    openapiFields.add("due_date");
    openapiFields.add("payment_terms");
    openapiFields.add("status");
    openapiFields.add("type");
    openapiFields.add("active");
    openapiFields.add("note");
    openapiFields.add("gl_post_date");
    openapiFields.add("group");
    openapiFields.add("payment_method");
    openapiFields.add("payment_method_name");
    openapiFields.add("added_purchase_orders");
    openapiFields.add("shipping_amount");
    openapiFields.add("invoice_uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("uuid");
    openapiRequiredFields.add("user");
    openapiRequiredFields.add("vendor");
    openapiRequiredFields.add("items");
    openapiRequiredFields.add("costs");
    openapiRequiredFields.add("invoice_attachments");
    openapiRequiredFields.add("bill_statuses");
    openapiRequiredFields.add("currency");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BillRead
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BillRead.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BillRead is not found in the empty JSON string", BillRead.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BillRead.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      // validate the required field `user`
      UserSummary.validateJsonObject(jsonObj.getAsJsonObject("user"));
      // validate the required field `vendor`
      VendorRead.validateJsonObject(jsonObj.getAsJsonObject("vendor"));
      // validate the optional field `approver`
      if (jsonObj.get("approver") != null && !jsonObj.get("approver").isJsonNull()) {
        ApproverReadNullable.validateJsonObject(jsonObj.getAsJsonObject("approver"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("items").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
      }

      JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
      // validate the required field `items` (array)
      for (int i = 0; i < jsonArrayitems.size(); i++) {
        ItemReadSerializerV2.validateJsonObject(jsonArrayitems.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("costs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `costs` to be an array in the JSON string but got `%s`", jsonObj.get("costs").toString()));
      }

      JsonArray jsonArraycosts = jsonObj.getAsJsonArray("costs");
      // validate the required field `costs` (array)
      for (int i = 0; i < jsonArraycosts.size(); i++) {
        BillCostRead.validateJsonObject(jsonArraycosts.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("invoice_attachments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_attachments` to be an array in the JSON string but got `%s`", jsonObj.get("invoice_attachments").toString()));
      }

      JsonArray jsonArrayinvoiceAttachments = jsonObj.getAsJsonArray("invoice_attachments");
      // validate the required field `invoice_attachments` (array)
      for (int i = 0; i < jsonArrayinvoiceAttachments.size(); i++) {
        Attachment.validateJsonObject(jsonArrayinvoiceAttachments.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("bill_statuses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bill_statuses` to be an array in the JSON string but got `%s`", jsonObj.get("bill_statuses").toString()));
      }

      JsonArray jsonArraybillStatuses = jsonObj.getAsJsonArray("bill_statuses");
      // validate the required field `bill_statuses` (array)
      for (int i = 0; i < jsonArraybillStatuses.size(); i++) {
        BillStatusRead.validateJsonObject(jsonArraybillStatuses.get(i).getAsJsonObject());
      };
      // validate the required field `currency`
      Currency.validateJsonObject(jsonObj.getAsJsonObject("currency"));
      if (jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) {
        JsonArray jsonArraycomments = jsonObj.getAsJsonArray("comments");
        if (jsonArraycomments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("comments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `comments` to be an array in the JSON string but got `%s`", jsonObj.get("comments").toString()));
          }

          // validate the optional field `comments` (array)
          for (int i = 0; i < jsonArraycomments.size(); i++) {
            Comment.validateJsonObject(jsonArraycomments.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("version_choices") != null && !jsonObj.get("version_choices").isJsonNull()) {
        JsonArray jsonArrayversionChoices = jsonObj.getAsJsonArray("version_choices");
        if (jsonArrayversionChoices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("version_choices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `version_choices` to be an array in the JSON string but got `%s`", jsonObj.get("version_choices").toString()));
          }

          // validate the optional field `version_choices` (array)
          for (int i = 0; i < jsonArrayversionChoices.size(); i++) {
            VersionChoicesDocs.validateJsonObject(jsonArrayversionChoices.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("next_approver_choices") != null && !jsonObj.get("next_approver_choices").isJsonNull()) {
        JsonArray jsonArraynextApproverChoices = jsonObj.getAsJsonArray("next_approver_choices");
        if (jsonArraynextApproverChoices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("next_approver_choices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `next_approver_choices` to be an array in the JSON string but got `%s`", jsonObj.get("next_approver_choices").toString()));
          }

          // validate the optional field `next_approver_choices` (array)
          for (int i = 0; i < jsonArraynextApproverChoices.size(); i++) {
            ApproverRead.validateJsonObject(jsonArraynextApproverChoices.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `bill_payment`
      if (jsonObj.get("bill_payment") != null && !jsonObj.get("bill_payment").isJsonNull()) {
        APBillPaymentDocsNullable.validateJsonObject(jsonObj.getAsJsonObject("bill_payment"));
      }
      if ((jsonObj.get("creditcard_name") != null && !jsonObj.get("creditcard_name").isJsonNull()) && !jsonObj.get("creditcard_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditcard_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditcard_name").toString()));
      }
      // validate the optional field `last_export_user`
      if (jsonObj.get("last_export_user") != null && !jsonObj.get("last_export_user").isJsonNull()) {
        SimpleUserSummary.validateJsonObject(jsonObj.getAsJsonObject("last_export_user"));
      }
      if ((jsonObj.get("vendor_name") != null && !jsonObj.get("vendor_name").isJsonNull()) && !jsonObj.get("vendor_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor_name").toString()));
      }
      if ((jsonObj.get("vendor_contact") != null && !jsonObj.get("vendor_contact").isJsonNull()) && !jsonObj.get("vendor_contact").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor_contact` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor_contact").toString()));
      }
      if ((jsonObj.get("vendor_address_one") != null && !jsonObj.get("vendor_address_one").isJsonNull()) && !jsonObj.get("vendor_address_one").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor_address_one` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor_address_one").toString()));
      }
      if ((jsonObj.get("vendor_address_two") != null && !jsonObj.get("vendor_address_two").isJsonNull()) && !jsonObj.get("vendor_address_two").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor_address_two` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor_address_two").toString()));
      }
      if ((jsonObj.get("vendor_postal_code") != null && !jsonObj.get("vendor_postal_code").isJsonNull()) && !jsonObj.get("vendor_postal_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor_postal_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor_postal_code").toString()));
      }
      if ((jsonObj.get("vendor_city") != null && !jsonObj.get("vendor_city").isJsonNull()) && !jsonObj.get("vendor_city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor_city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor_city").toString()));
      }
      if ((jsonObj.get("vendor_state_province") != null && !jsonObj.get("vendor_state_province").isJsonNull()) && !jsonObj.get("vendor_state_province").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor_state_province` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor_state_province").toString()));
      }
      if ((jsonObj.get("vendor_country") != null && !jsonObj.get("vendor_country").isJsonNull()) && !jsonObj.get("vendor_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor_country").toString()));
      }
      if ((jsonObj.get("invoice_number") != null && !jsonObj.get("invoice_number").isJsonNull()) && !jsonObj.get("invoice_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_number").toString()));
      }
      if ((jsonObj.get("payment_terms") != null && !jsonObj.get("payment_terms").isJsonNull()) && !jsonObj.get("payment_terms").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_terms` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_terms").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if ((jsonObj.get("payment_method_name") != null && !jsonObj.get("payment_method_name").isJsonNull()) && !jsonObj.get("payment_method_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_method_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_method_name").toString()));
      }
      if (jsonObj.get("added_purchase_orders") != null && !jsonObj.get("added_purchase_orders").isJsonNull()) {
        JsonArray jsonArrayaddedPurchaseOrders = jsonObj.getAsJsonArray("added_purchase_orders");
        if (jsonArrayaddedPurchaseOrders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("added_purchase_orders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `added_purchase_orders` to be an array in the JSON string but got `%s`", jsonObj.get("added_purchase_orders").toString()));
          }

          // validate the optional field `added_purchase_orders` (array)
          for (int i = 0; i < jsonArrayaddedPurchaseOrders.size(); i++) {
            BillPurchaseOrderDocs.validateJsonObject(jsonArrayaddedPurchaseOrders.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("invoice_uuid") != null && !jsonObj.get("invoice_uuid").isJsonNull()) && !jsonObj.get("invoice_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BillRead.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BillRead' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BillRead> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BillRead.class));

       return (TypeAdapter<T>) new TypeAdapter<BillRead>() {
           @Override
           public void write(JsonWriter out, BillRead value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BillRead read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BillRead instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BillRead given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BillRead
  * @throws IOException if the JSON string is invalid with respect to BillRead
  */
  public static BillRead fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BillRead.class);
  }

 /**
  * Convert an instance of BillRead to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

