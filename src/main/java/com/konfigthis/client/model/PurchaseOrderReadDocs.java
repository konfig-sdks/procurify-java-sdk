/*
 * Procurify API Documentation
 *  # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ExpenseTypeEnumNullable;
import com.konfigthis.client.model.FulfilmentStatusEnum;
import com.konfigthis.client.model.PriceModifierDocs;
import com.konfigthis.client.model.SimpleCurrency;
import com.konfigthis.client.model.SimpleUser;
import com.konfigthis.client.model.SimpleVendor;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PurchaseOrderReadDocs
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PurchaseOrderReadDocs {
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_PO_NUM = "PO_Num";
  @SerializedName(SERIALIZED_NAME_PO_NUM)
  private String poNum;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_DISCOUNT = "discount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT)
  private PriceModifierDocs discount;

  public static final String SERIALIZED_NAME_FREIGHT = "freight";
  @SerializedName(SERIALIZED_NAME_FREIGHT)
  private BigDecimal freight;

  public static final String SERIALIZED_NAME_FULFILMENT_STATUS = "fulfilment_status";
  @SerializedName(SERIALIZED_NAME_FULFILMENT_STATUS)
  private FulfilmentStatusEnum fulfilmentStatus;

  public static final String SERIALIZED_NAME_ITEM_COUNT = "item_count";
  @SerializedName(SERIALIZED_NAME_ITEM_COUNT)
  private Integer itemCount;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "last_modified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private OffsetDateTime lastModified;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_OTHER = "other";
  @SerializedName(SERIALIZED_NAME_OTHER)
  private BigDecimal other;

  public static final String SERIALIZED_NAME_PREF_VENDOR = "pref_vendor";
  @SerializedName(SERIALIZED_NAME_PREF_VENDOR)
  private SimpleVendor prefVendor;

  public static final String SERIALIZED_NAME_PROCURIFY_P_O = "procurify_PO";
  @SerializedName(SERIALIZED_NAME_PROCURIFY_P_O)
  private Integer procurifyPO;

  public static final String SERIALIZED_NAME_PROMISE_DATE = "promise_date";
  @SerializedName(SERIALIZED_NAME_PROMISE_DATE)
  private OffsetDateTime promiseDate;

  public static final String SERIALIZED_NAME_PUNCHOUT_SYSTEM = "punchout_system";
  @SerializedName(SERIALIZED_NAME_PUNCHOUT_SYSTEM)
  private Integer punchoutSystem;

  public static final String SERIALIZED_NAME_PURCHASE_AGREEMENT = "purchase_agreement";
  @SerializedName(SERIALIZED_NAME_PURCHASE_AGREEMENT)
  private Integer purchaseAgreement;

  public static final String SERIALIZED_NAME_PURCHASE_AGREEMENT_STATUS = "purchase_agreement_status";
  @SerializedName(SERIALIZED_NAME_PURCHASE_AGREEMENT_STATUS)
  private ExpenseTypeEnumNullable purchaseAgreementStatus;

  public static final String SERIALIZED_NAME_PURCHASED_CURRENCY = "purchased_currency";
  @SerializedName(SERIALIZED_NAME_PURCHASED_CURRENCY)
  private SimpleCurrency purchasedCurrency;

  public static final String SERIALIZED_NAME_PURCHASED_CURRENCY_RATE = "purchased_currency_rate";
  @SerializedName(SERIALIZED_NAME_PURCHASED_CURRENCY_RATE)
  private BigDecimal purchasedCurrencyRate;

  public static final String SERIALIZED_NAME_PURCHASER = "purchaser";
  @SerializedName(SERIALIZED_NAME_PURCHASER)
  private SimpleUser purchaser;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private Object state = null;

  public static final String SERIALIZED_NAME_SUBTOTAL = "subtotal";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL)
  private BigDecimal subtotal;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private BigDecimal total;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private UUID uuid;

  public static final String SERIALIZED_NAME_PUNCHOUT_ITEMS_REJECTED = "punchout_items_rejected";
  @SerializedName(SERIALIZED_NAME_PUNCHOUT_ITEMS_REJECTED)
  private Boolean punchoutItemsRejected;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT = "total_amount";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT)
  private BigDecimal totalAmount;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency = "";

  public static final String SERIALIZED_NAME_EMAIL_STATUS = "email_status";
  @SerializedName(SERIALIZED_NAME_EMAIL_STATUS)
  private String emailStatus;

  public static final String SERIALIZED_NAME_EMAIL_STATUS_UPDATED_AT = "email_status_updated_at";
  @SerializedName(SERIALIZED_NAME_EMAIL_STATUS_UPDATED_AT)
  private OffsetDateTime emailStatusUpdatedAt;

  public static final String SERIALIZED_NAME_PUNCHOUT_SUPPLIER_NAME = "punchout_supplier_name";
  @SerializedName(SERIALIZED_NAME_PUNCHOUT_SUPPLIER_NAME)
  private String punchoutSupplierName;

  public static final String SERIALIZED_NAME_PUNCHOUT_SUPPLIER_ICON = "punchout_supplier_icon";
  @SerializedName(SERIALIZED_NAME_PUNCHOUT_SUPPLIER_ICON)
  private String punchoutSupplierIcon;

  public static final String SERIALIZED_NAME_PUNCHOUT_VENDOR_REFERENCE = "punchout_vendor_reference";
  @SerializedName(SERIALIZED_NAME_PUNCHOUT_VENDOR_REFERENCE)
  private Integer punchoutVendorReference;

  public static final String SERIALIZED_NAME_HAS_BLANKET_ORDER_ITEMS = "has_blanket_order_items";
  @SerializedName(SERIALIZED_NAME_HAS_BLANKET_ORDER_ITEMS)
  private Boolean hasBlanketOrderItems;

  public static final String SERIALIZED_NAME_EXPIRY_DATE = "expiry_date";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE)
  private OffsetDateTime expiryDate;

  public PurchaseOrderReadDocs() {
  }

  
  public PurchaseOrderReadDocs(
     OffsetDateTime date, 
     Integer itemCount, 
     OffsetDateTime lastModified, 
     Integer procurifyPO, 
     Integer punchoutSystem, 
     Boolean punchoutItemsRejected, 
     String punchoutSupplierName, 
     String punchoutSupplierIcon, 
     Integer punchoutVendorReference, 
     Boolean hasBlanketOrderItems
  ) {
    this();
    this.date = date;
    this.itemCount = itemCount;
    this.lastModified = lastModified;
    this.procurifyPO = procurifyPO;
    this.punchoutSystem = punchoutSystem;
    this.punchoutItemsRejected = punchoutItemsRejected;
    this.punchoutSupplierName = punchoutSupplierName;
    this.punchoutSupplierIcon = punchoutSupplierIcon;
    this.punchoutVendorReference = punchoutVendorReference;
    this.hasBlanketOrderItems = hasBlanketOrderItems;
  }

  public PurchaseOrderReadDocs version(Integer version) {
    if (version != null && version < -2147483648) {
      throw new IllegalArgumentException("Invalid value for version. Must be greater than or equal to -2147483648.");
    }
    if (version != null && version > 2147483647) {
      throw new IllegalArgumentException("Invalid value for version. Must be less than or equal to 2147483647.");
    }
    
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * minimum: -2147483648
   * maximum: 2147483647
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getVersion() {
    return version;
  }


  public void setVersion(Integer version) {
    if (version != null && version < -2147483648) {
      throw new IllegalArgumentException("Invalid value for version. Must be greater than or equal to -2147483648.");
    }
    if (version != null && version > 2147483647) {
      throw new IllegalArgumentException("Invalid value for version. Must be less than or equal to 2147483647.");
    }
    
    this.version = version;
  }


  public PurchaseOrderReadDocs id(Integer id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    
    
    
    this.id = id;
  }


  public PurchaseOrderReadDocs poNum(String poNum) {
    
    
    
    
    this.poNum = poNum;
    return this;
  }

   /**
   * Get poNum
   * @return poNum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPoNum() {
    return poNum;
  }


  public void setPoNum(String poNum) {
    
    
    
    this.poNum = poNum;
  }


   /**
   * Get date
   * @return date
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getDate() {
    return date;
  }




  public PurchaseOrderReadDocs discount(PriceModifierDocs discount) {
    
    
    
    
    this.discount = discount;
    return this;
  }

   /**
   * Get discount
   * @return discount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PriceModifierDocs getDiscount() {
    return discount;
  }


  public void setDiscount(PriceModifierDocs discount) {
    
    
    
    this.discount = discount;
  }


  public PurchaseOrderReadDocs freight(BigDecimal freight) {
    
    
    
    
    this.freight = freight;
    return this;
  }

   /**
   * Get freight
   * @return freight
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getFreight() {
    return freight;
  }


  public void setFreight(BigDecimal freight) {
    
    
    
    this.freight = freight;
  }


  public PurchaseOrderReadDocs fulfilmentStatus(FulfilmentStatusEnum fulfilmentStatus) {
    
    
    
    
    this.fulfilmentStatus = fulfilmentStatus;
    return this;
  }

   /**
   * Get fulfilmentStatus
   * @return fulfilmentStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FulfilmentStatusEnum getFulfilmentStatus() {
    return fulfilmentStatus;
  }


  public void setFulfilmentStatus(FulfilmentStatusEnum fulfilmentStatus) {
    
    
    
    this.fulfilmentStatus = fulfilmentStatus;
  }


   /**
   * Get itemCount
   * @return itemCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getItemCount() {
    return itemCount;
  }




   /**
   * Get lastModified
   * @return lastModified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getLastModified() {
    return lastModified;
  }




  public PurchaseOrderReadDocs number(String number) {
    
    
    
    
    this.number = number;
    return this;
  }

   /**
   * Get number
   * @return number
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getNumber() {
    return number;
  }


  public void setNumber(String number) {
    
    
    
    this.number = number;
  }


  public PurchaseOrderReadDocs other(BigDecimal other) {
    
    
    
    
    this.other = other;
    return this;
  }

   /**
   * Get other
   * @return other
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getOther() {
    return other;
  }


  public void setOther(BigDecimal other) {
    
    
    
    this.other = other;
  }


  public PurchaseOrderReadDocs prefVendor(SimpleVendor prefVendor) {
    
    
    
    
    this.prefVendor = prefVendor;
    return this;
  }

   /**
   * Get prefVendor
   * @return prefVendor
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public SimpleVendor getPrefVendor() {
    return prefVendor;
  }


  public void setPrefVendor(SimpleVendor prefVendor) {
    
    
    
    this.prefVendor = prefVendor;
  }


   /**
   * Get procurifyPO
   * @return procurifyPO
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getProcurifyPO() {
    return procurifyPO;
  }




  public PurchaseOrderReadDocs promiseDate(OffsetDateTime promiseDate) {
    
    
    
    
    this.promiseDate = promiseDate;
    return this;
  }

   /**
   * Get promiseDate
   * @return promiseDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getPromiseDate() {
    return promiseDate;
  }


  public void setPromiseDate(OffsetDateTime promiseDate) {
    
    
    
    this.promiseDate = promiseDate;
  }


   /**
   * Get punchoutSystem
   * @return punchoutSystem
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPunchoutSystem() {
    return punchoutSystem;
  }




  public PurchaseOrderReadDocs purchaseAgreement(Integer purchaseAgreement) {
    
    
    
    
    this.purchaseAgreement = purchaseAgreement;
    return this;
  }

   /**
   * Get purchaseAgreement
   * @return purchaseAgreement
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPurchaseAgreement() {
    return purchaseAgreement;
  }


  public void setPurchaseAgreement(Integer purchaseAgreement) {
    
    
    
    this.purchaseAgreement = purchaseAgreement;
  }


  public PurchaseOrderReadDocs purchaseAgreementStatus(ExpenseTypeEnumNullable purchaseAgreementStatus) {
    
    
    
    
    this.purchaseAgreementStatus = purchaseAgreementStatus;
    return this;
  }

   /**
   * Get purchaseAgreementStatus
   * @return purchaseAgreementStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ExpenseTypeEnumNullable getPurchaseAgreementStatus() {
    return purchaseAgreementStatus;
  }


  public void setPurchaseAgreementStatus(ExpenseTypeEnumNullable purchaseAgreementStatus) {
    
    
    
    this.purchaseAgreementStatus = purchaseAgreementStatus;
  }


  public PurchaseOrderReadDocs purchasedCurrency(SimpleCurrency purchasedCurrency) {
    
    
    
    
    this.purchasedCurrency = purchasedCurrency;
    return this;
  }

   /**
   * Get purchasedCurrency
   * @return purchasedCurrency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public SimpleCurrency getPurchasedCurrency() {
    return purchasedCurrency;
  }


  public void setPurchasedCurrency(SimpleCurrency purchasedCurrency) {
    
    
    
    this.purchasedCurrency = purchasedCurrency;
  }


  public PurchaseOrderReadDocs purchasedCurrencyRate(BigDecimal purchasedCurrencyRate) {
    
    
    
    
    this.purchasedCurrencyRate = purchasedCurrencyRate;
    return this;
  }

   /**
   * Get purchasedCurrencyRate
   * @return purchasedCurrencyRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getPurchasedCurrencyRate() {
    return purchasedCurrencyRate;
  }


  public void setPurchasedCurrencyRate(BigDecimal purchasedCurrencyRate) {
    
    
    
    this.purchasedCurrencyRate = purchasedCurrencyRate;
  }


  public PurchaseOrderReadDocs purchaser(SimpleUser purchaser) {
    
    
    
    
    this.purchaser = purchaser;
    return this;
  }

   /**
   * Get purchaser
   * @return purchaser
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public SimpleUser getPurchaser() {
    return purchaser;
  }


  public void setPurchaser(SimpleUser purchaser) {
    
    
    
    this.purchaser = purchaser;
  }


  public PurchaseOrderReadDocs state(Object state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getState() {
    return state;
  }


  public void setState(Object state) {
    
    
    
    this.state = state;
  }


  public PurchaseOrderReadDocs subtotal(BigDecimal subtotal) {
    
    
    
    
    this.subtotal = subtotal;
    return this;
  }

   /**
   * Get subtotal
   * @return subtotal
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public BigDecimal getSubtotal() {
    return subtotal;
  }


  public void setSubtotal(BigDecimal subtotal) {
    
    
    
    this.subtotal = subtotal;
  }


  public PurchaseOrderReadDocs total(BigDecimal total) {
    
    
    
    
    this.total = total;
    return this;
  }

   /**
   * Get total
   * @return total
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public BigDecimal getTotal() {
    return total;
  }


  public void setTotal(BigDecimal total) {
    
    
    
    this.total = total;
  }


  public PurchaseOrderReadDocs uuid(UUID uuid) {
    
    
    
    
    this.uuid = uuid;
    return this;
  }

   /**
   * Get uuid
   * @return uuid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UUID getUuid() {
    return uuid;
  }


  public void setUuid(UUID uuid) {
    
    
    
    this.uuid = uuid;
  }


   /**
   * Get punchoutItemsRejected
   * @return punchoutItemsRejected
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getPunchoutItemsRejected() {
    return punchoutItemsRejected;
  }




  public PurchaseOrderReadDocs totalAmount(BigDecimal totalAmount) {
    
    
    
    
    this.totalAmount = totalAmount;
    return this;
  }

   /**
   * Get totalAmount
   * @return totalAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public BigDecimal getTotalAmount() {
    return totalAmount;
  }


  public void setTotalAmount(BigDecimal totalAmount) {
    
    
    
    this.totalAmount = totalAmount;
  }


  public PurchaseOrderReadDocs currency(String currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "", value = "")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    
    
    
    this.currency = currency;
  }


  public PurchaseOrderReadDocs emailStatus(String emailStatus) {
    
    
    
    
    this.emailStatus = emailStatus;
    return this;
  }

   /**
   * Get emailStatus
   * @return emailStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmailStatus() {
    return emailStatus;
  }


  public void setEmailStatus(String emailStatus) {
    
    
    
    this.emailStatus = emailStatus;
  }


  public PurchaseOrderReadDocs emailStatusUpdatedAt(OffsetDateTime emailStatusUpdatedAt) {
    
    
    
    
    this.emailStatusUpdatedAt = emailStatusUpdatedAt;
    return this;
  }

   /**
   * Get emailStatusUpdatedAt
   * @return emailStatusUpdatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getEmailStatusUpdatedAt() {
    return emailStatusUpdatedAt;
  }


  public void setEmailStatusUpdatedAt(OffsetDateTime emailStatusUpdatedAt) {
    
    
    
    this.emailStatusUpdatedAt = emailStatusUpdatedAt;
  }


   /**
   * Get punchoutSupplierName
   * @return punchoutSupplierName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPunchoutSupplierName() {
    return punchoutSupplierName;
  }




   /**
   * Get punchoutSupplierIcon
   * @return punchoutSupplierIcon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPunchoutSupplierIcon() {
    return punchoutSupplierIcon;
  }




   /**
   * Get punchoutVendorReference
   * @return punchoutVendorReference
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPunchoutVendorReference() {
    return punchoutVendorReference;
  }




   /**
   * Get hasBlanketOrderItems
   * @return hasBlanketOrderItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getHasBlanketOrderItems() {
    return hasBlanketOrderItems;
  }




  public PurchaseOrderReadDocs expiryDate(OffsetDateTime expiryDate) {
    
    
    
    
    this.expiryDate = expiryDate;
    return this;
  }

   /**
   * Get expiryDate
   * @return expiryDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getExpiryDate() {
    return expiryDate;
  }


  public void setExpiryDate(OffsetDateTime expiryDate) {
    
    
    
    this.expiryDate = expiryDate;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PurchaseOrderReadDocs instance itself
   */
  public PurchaseOrderReadDocs putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PurchaseOrderReadDocs purchaseOrderReadDocs = (PurchaseOrderReadDocs) o;
    return Objects.equals(this.version, purchaseOrderReadDocs.version) &&
        Objects.equals(this.id, purchaseOrderReadDocs.id) &&
        Objects.equals(this.poNum, purchaseOrderReadDocs.poNum) &&
        Objects.equals(this.date, purchaseOrderReadDocs.date) &&
        Objects.equals(this.discount, purchaseOrderReadDocs.discount) &&
        Objects.equals(this.freight, purchaseOrderReadDocs.freight) &&
        Objects.equals(this.fulfilmentStatus, purchaseOrderReadDocs.fulfilmentStatus) &&
        Objects.equals(this.itemCount, purchaseOrderReadDocs.itemCount) &&
        Objects.equals(this.lastModified, purchaseOrderReadDocs.lastModified) &&
        Objects.equals(this.number, purchaseOrderReadDocs.number) &&
        Objects.equals(this.other, purchaseOrderReadDocs.other) &&
        Objects.equals(this.prefVendor, purchaseOrderReadDocs.prefVendor) &&
        Objects.equals(this.procurifyPO, purchaseOrderReadDocs.procurifyPO) &&
        Objects.equals(this.promiseDate, purchaseOrderReadDocs.promiseDate) &&
        Objects.equals(this.punchoutSystem, purchaseOrderReadDocs.punchoutSystem) &&
        Objects.equals(this.purchaseAgreement, purchaseOrderReadDocs.purchaseAgreement) &&
        Objects.equals(this.purchaseAgreementStatus, purchaseOrderReadDocs.purchaseAgreementStatus) &&
        Objects.equals(this.purchasedCurrency, purchaseOrderReadDocs.purchasedCurrency) &&
        Objects.equals(this.purchasedCurrencyRate, purchaseOrderReadDocs.purchasedCurrencyRate) &&
        Objects.equals(this.purchaser, purchaseOrderReadDocs.purchaser) &&
        Objects.equals(this.state, purchaseOrderReadDocs.state) &&
        Objects.equals(this.subtotal, purchaseOrderReadDocs.subtotal) &&
        Objects.equals(this.total, purchaseOrderReadDocs.total) &&
        Objects.equals(this.uuid, purchaseOrderReadDocs.uuid) &&
        Objects.equals(this.punchoutItemsRejected, purchaseOrderReadDocs.punchoutItemsRejected) &&
        Objects.equals(this.totalAmount, purchaseOrderReadDocs.totalAmount) &&
        Objects.equals(this.currency, purchaseOrderReadDocs.currency) &&
        Objects.equals(this.emailStatus, purchaseOrderReadDocs.emailStatus) &&
        Objects.equals(this.emailStatusUpdatedAt, purchaseOrderReadDocs.emailStatusUpdatedAt) &&
        Objects.equals(this.punchoutSupplierName, purchaseOrderReadDocs.punchoutSupplierName) &&
        Objects.equals(this.punchoutSupplierIcon, purchaseOrderReadDocs.punchoutSupplierIcon) &&
        Objects.equals(this.punchoutVendorReference, purchaseOrderReadDocs.punchoutVendorReference) &&
        Objects.equals(this.hasBlanketOrderItems, purchaseOrderReadDocs.hasBlanketOrderItems) &&
        Objects.equals(this.expiryDate, purchaseOrderReadDocs.expiryDate)&&
        Objects.equals(this.additionalProperties, purchaseOrderReadDocs.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, id, poNum, date, discount, freight, fulfilmentStatus, itemCount, lastModified, number, other, prefVendor, procurifyPO, promiseDate, punchoutSystem, purchaseAgreement, purchaseAgreementStatus, purchasedCurrency, purchasedCurrencyRate, purchaser, state, subtotal, total, uuid, punchoutItemsRejected, totalAmount, currency, emailStatus, emailStatusUpdatedAt, punchoutSupplierName, punchoutSupplierIcon, punchoutVendorReference, hasBlanketOrderItems, expiryDate, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PurchaseOrderReadDocs {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    poNum: ").append(toIndentedString(poNum)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("    freight: ").append(toIndentedString(freight)).append("\n");
    sb.append("    fulfilmentStatus: ").append(toIndentedString(fulfilmentStatus)).append("\n");
    sb.append("    itemCount: ").append(toIndentedString(itemCount)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    other: ").append(toIndentedString(other)).append("\n");
    sb.append("    prefVendor: ").append(toIndentedString(prefVendor)).append("\n");
    sb.append("    procurifyPO: ").append(toIndentedString(procurifyPO)).append("\n");
    sb.append("    promiseDate: ").append(toIndentedString(promiseDate)).append("\n");
    sb.append("    punchoutSystem: ").append(toIndentedString(punchoutSystem)).append("\n");
    sb.append("    purchaseAgreement: ").append(toIndentedString(purchaseAgreement)).append("\n");
    sb.append("    purchaseAgreementStatus: ").append(toIndentedString(purchaseAgreementStatus)).append("\n");
    sb.append("    purchasedCurrency: ").append(toIndentedString(purchasedCurrency)).append("\n");
    sb.append("    purchasedCurrencyRate: ").append(toIndentedString(purchasedCurrencyRate)).append("\n");
    sb.append("    purchaser: ").append(toIndentedString(purchaser)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    subtotal: ").append(toIndentedString(subtotal)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    punchoutItemsRejected: ").append(toIndentedString(punchoutItemsRejected)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    emailStatus: ").append(toIndentedString(emailStatus)).append("\n");
    sb.append("    emailStatusUpdatedAt: ").append(toIndentedString(emailStatusUpdatedAt)).append("\n");
    sb.append("    punchoutSupplierName: ").append(toIndentedString(punchoutSupplierName)).append("\n");
    sb.append("    punchoutSupplierIcon: ").append(toIndentedString(punchoutSupplierIcon)).append("\n");
    sb.append("    punchoutVendorReference: ").append(toIndentedString(punchoutVendorReference)).append("\n");
    sb.append("    hasBlanketOrderItems: ").append(toIndentedString(hasBlanketOrderItems)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version");
    openapiFields.add("id");
    openapiFields.add("PO_Num");
    openapiFields.add("date");
    openapiFields.add("discount");
    openapiFields.add("freight");
    openapiFields.add("fulfilment_status");
    openapiFields.add("item_count");
    openapiFields.add("last_modified");
    openapiFields.add("number");
    openapiFields.add("other");
    openapiFields.add("pref_vendor");
    openapiFields.add("procurify_PO");
    openapiFields.add("promise_date");
    openapiFields.add("punchout_system");
    openapiFields.add("purchase_agreement");
    openapiFields.add("purchase_agreement_status");
    openapiFields.add("purchased_currency");
    openapiFields.add("purchased_currency_rate");
    openapiFields.add("purchaser");
    openapiFields.add("state");
    openapiFields.add("subtotal");
    openapiFields.add("total");
    openapiFields.add("uuid");
    openapiFields.add("punchout_items_rejected");
    openapiFields.add("total_amount");
    openapiFields.add("currency");
    openapiFields.add("email_status");
    openapiFields.add("email_status_updated_at");
    openapiFields.add("punchout_supplier_name");
    openapiFields.add("punchout_supplier_icon");
    openapiFields.add("punchout_vendor_reference");
    openapiFields.add("has_blanket_order_items");
    openapiFields.add("expiry_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("number");
    openapiRequiredFields.add("pref_vendor");
    openapiRequiredFields.add("promise_date");
    openapiRequiredFields.add("purchased_currency");
    openapiRequiredFields.add("purchaser");
    openapiRequiredFields.add("subtotal");
    openapiRequiredFields.add("total");
    openapiRequiredFields.add("uuid");
    openapiRequiredFields.add("total_amount");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PurchaseOrderReadDocs
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PurchaseOrderReadDocs.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PurchaseOrderReadDocs is not found in the empty JSON string", PurchaseOrderReadDocs.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PurchaseOrderReadDocs.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("PO_Num").isJsonNull() && (jsonObj.get("PO_Num") != null && !jsonObj.get("PO_Num").isJsonNull()) && !jsonObj.get("PO_Num").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PO_Num` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PO_Num").toString()));
      }
      // validate the optional field `discount`
      if (jsonObj.get("discount") != null && !jsonObj.get("discount").isJsonNull()) {
        PriceModifierDocs.validateJsonObject(jsonObj.getAsJsonObject("discount"));
      }
      if (!jsonObj.get("freight").isJsonNull() && (jsonObj.get("freight") != null && !jsonObj.get("freight").isJsonNull()) && !jsonObj.get("freight").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `freight` to be a primitive type in the JSON string but got `%s`", jsonObj.get("freight").toString()));
      }
      if (!jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      if (!jsonObj.get("other").isJsonNull() && (jsonObj.get("other") != null && !jsonObj.get("other").isJsonNull()) && !jsonObj.get("other").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `other` to be a primitive type in the JSON string but got `%s`", jsonObj.get("other").toString()));
      }
      // validate the required field `pref_vendor`
      SimpleVendor.validateJsonObject(jsonObj.getAsJsonObject("pref_vendor"));
      // validate the required field `purchased_currency`
      SimpleCurrency.validateJsonObject(jsonObj.getAsJsonObject("purchased_currency"));
      if (!jsonObj.get("purchased_currency_rate").isJsonNull() && (jsonObj.get("purchased_currency_rate") != null && !jsonObj.get("purchased_currency_rate").isJsonNull()) && !jsonObj.get("purchased_currency_rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchased_currency_rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchased_currency_rate").toString()));
      }
      // validate the required field `purchaser`
      SimpleUser.validateJsonObject(jsonObj.getAsJsonObject("purchaser"));
      if (!jsonObj.get("subtotal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtotal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subtotal").toString()));
      }
      if (!jsonObj.get("total").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total").toString()));
      }
      if (!jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      if (!jsonObj.get("total_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_amount").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (!jsonObj.get("email_status").isJsonNull() && (jsonObj.get("email_status") != null && !jsonObj.get("email_status").isJsonNull()) && !jsonObj.get("email_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email_status").toString()));
      }
      if (!jsonObj.get("punchout_supplier_name").isJsonNull() && (jsonObj.get("punchout_supplier_name") != null && !jsonObj.get("punchout_supplier_name").isJsonNull()) && !jsonObj.get("punchout_supplier_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `punchout_supplier_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("punchout_supplier_name").toString()));
      }
      if (!jsonObj.get("punchout_supplier_icon").isJsonNull() && (jsonObj.get("punchout_supplier_icon") != null && !jsonObj.get("punchout_supplier_icon").isJsonNull()) && !jsonObj.get("punchout_supplier_icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `punchout_supplier_icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("punchout_supplier_icon").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PurchaseOrderReadDocs.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PurchaseOrderReadDocs' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PurchaseOrderReadDocs> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PurchaseOrderReadDocs.class));

       return (TypeAdapter<T>) new TypeAdapter<PurchaseOrderReadDocs>() {
           @Override
           public void write(JsonWriter out, PurchaseOrderReadDocs value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PurchaseOrderReadDocs read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PurchaseOrderReadDocs instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PurchaseOrderReadDocs given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PurchaseOrderReadDocs
  * @throws IOException if the JSON string is invalid with respect to PurchaseOrderReadDocs
  */
  public static PurchaseOrderReadDocs fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PurchaseOrderReadDocs.class);
  }

 /**
  * Convert an instance of PurchaseOrderReadDocs to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

