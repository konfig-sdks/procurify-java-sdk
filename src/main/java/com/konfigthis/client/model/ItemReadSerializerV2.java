/*
 * Procurify API Documentation
 *  # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Attachment;
import com.konfigthis.client.model.CostAllocationRead;
import com.konfigthis.client.model.CreditCardItemReadNullable;
import com.konfigthis.client.model.Currency;
import com.konfigthis.client.model.CustomFieldValueRead;
import com.konfigthis.client.model.ExpenseReadNullable;
import com.konfigthis.client.model.ExpenseReportDocs;
import com.konfigthis.client.model.OrderItemRead;
import com.konfigthis.client.model.PODocs;
import com.konfigthis.client.model.UnitCostDiffLogDocsNullable;
import com.konfigthis.client.model.VendorRead;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ItemReadSerializerV2
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ItemReadSerializerV2 {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_ORDERITEM = "orderitem";
  @SerializedName(SERIALIZED_NAME_ORDERITEM)
  private OrderItemRead orderitem;

  public static final String SERIALIZED_NAME_EXPENSE = "expense";
  @SerializedName(SERIALIZED_NAME_EXPENSE)
  private ExpenseReadNullable expense;

  public static final String SERIALIZED_NAME_BILL = "bill";
  @SerializedName(SERIALIZED_NAME_BILL)
  private Integer bill;

  public static final String SERIALIZED_NAME_VENDOR = "vendor";
  @SerializedName(SERIALIZED_NAME_VENDOR)
  private VendorRead vendor;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public static final String SERIALIZED_NAME_PO = "po";
  @SerializedName(SERIALIZED_NAME_PO)
  private PODocs po;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private BigDecimal quantity;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private Currency currency;

  public static final String SERIALIZED_NAME_TOTAL_COST = "total_cost";
  @SerializedName(SERIALIZED_NAME_TOTAL_COST)
  private Double totalCost;

  public static final String SERIALIZED_NAME_RECEIVED_ON = "received_on";
  @SerializedName(SERIALIZED_NAME_RECEIVED_ON)
  private OffsetDateTime receivedOn;

  public static final String SERIALIZED_NAME_PACKING_SLIPS = "packing_slips";
  @SerializedName(SERIALIZED_NAME_PACKING_SLIPS)
  private List<Attachment> packingSlips = null;

  public static final String SERIALIZED_NAME_COST_ALLOCATIONS = "cost_allocations";
  @SerializedName(SERIALIZED_NAME_COST_ALLOCATIONS)
  private List<CostAllocationRead> costAllocations = new ArrayList<>();

  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived;

  public static final String SERIALIZED_NAME_EXPENSE_REPORT = "expense_report";
  @SerializedName(SERIALIZED_NAME_EXPENSE_REPORT)
  private ExpenseReportDocs expenseReport;

  public static final String SERIALIZED_NAME_SAME_UNIT_COST = "same_unit_cost";
  @SerializedName(SERIALIZED_NAME_SAME_UNIT_COST)
  private Boolean sameUnitCost;

  public static final String SERIALIZED_NAME_CREDITCARD_ITEM = "creditcard_item";
  @SerializedName(SERIALIZED_NAME_CREDITCARD_ITEM)
  private CreditCardItemReadNullable creditcardItem;

  public static final String SERIALIZED_NAME_IS_EDITED = "is_edited";
  @SerializedName(SERIALIZED_NAME_IS_EDITED)
  private Boolean isEdited;

  public static final String SERIALIZED_NAME_UNIT_COST_DIFF_LOG = "unit_cost_diff_log";
  @SerializedName(SERIALIZED_NAME_UNIT_COST_DIFF_LOG)
  private UnitCostDiffLogDocsNullable unitCostDiffLog;

  public static final String SERIALIZED_NAME_TAX_NAME = "tax_name";
  @SerializedName(SERIALIZED_NAME_TAX_NAME)
  private String taxName;

  public static final String SERIALIZED_NAME_TAX_PERCENTAGE = "tax_percentage";
  @SerializedName(SERIALIZED_NAME_TAX_PERCENTAGE)
  private BigDecimal taxPercentage;

  public static final String SERIALIZED_NAME_TAX_AMOUNT = "tax_amount";
  @SerializedName(SERIALIZED_NAME_TAX_AMOUNT)
  private Double taxAmount;

  public static final String SERIALIZED_NAME_TAX_IS_INCLUSIVE = "tax_is_inclusive";
  @SerializedName(SERIALIZED_NAME_TAX_IS_INCLUSIVE)
  private Boolean taxIsInclusive;

  public static final String SERIALIZED_NAME_TAX = "tax";
  @SerializedName(SERIALIZED_NAME_TAX)
  private Integer tax;

  public static final String SERIALIZED_NAME_TOTAL_COST_WITH_TAX = "total_cost_with_tax";
  @SerializedName(SERIALIZED_NAME_TOTAL_COST_WITH_TAX)
  private Double totalCostWithTax;

  public static final String SERIALIZED_NAME_SHIPPING_AMOUNT = "shipping_amount";
  @SerializedName(SERIALIZED_NAME_SHIPPING_AMOUNT)
  private BigDecimal shippingAmount;

  public static final String SERIALIZED_NAME_UNIT_COST = "unit_cost";
  @SerializedName(SERIALIZED_NAME_UNIT_COST)
  private Float unitCost;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private List<CustomFieldValueRead> customFields = null;

  public static final String SERIALIZED_NAME_ITEM_TYPE = "item_type";
  @SerializedName(SERIALIZED_NAME_ITEM_TYPE)
  private Integer itemType;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_BILL_BY_COST = "bill_by_cost";
  @SerializedName(SERIALIZED_NAME_BILL_BY_COST)
  private Boolean billByCost;

  public ItemReadSerializerV2() {
  }

  
  public ItemReadSerializerV2(
     Integer id, 
     Double totalCost, 
     OffsetDateTime receivedOn, 
     List<Attachment> packingSlips, 
     Boolean sameUnitCost, 
     Boolean isEdited, 
     Double taxAmount, 
     Double totalCostWithTax, 
     Float unitCost, 
     List<CustomFieldValueRead> customFields, 
     Integer itemType, 
     String type, 
     Boolean billByCost
  ) {
    this();
    this.id = id;
    this.totalCost = totalCost;
    this.receivedOn = receivedOn;
    this.packingSlips = packingSlips;
    this.sameUnitCost = sameUnitCost;
    this.isEdited = isEdited;
    this.taxAmount = taxAmount;
    this.totalCostWithTax = totalCostWithTax;
    this.unitCost = unitCost;
    this.customFields = customFields;
    this.itemType = itemType;
    this.type = type;
    this.billByCost = billByCost;
  }

  public ItemReadSerializerV2 description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }




  public ItemReadSerializerV2 orderitem(OrderItemRead orderitem) {
    
    
    
    
    this.orderitem = orderitem;
    return this;
  }

   /**
   * Get orderitem
   * @return orderitem
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderItemRead getOrderitem() {
    return orderitem;
  }


  public void setOrderitem(OrderItemRead orderitem) {
    
    
    
    this.orderitem = orderitem;
  }


  public ItemReadSerializerV2 expense(ExpenseReadNullable expense) {
    
    
    
    
    this.expense = expense;
    return this;
  }

   /**
   * Get expense
   * @return expense
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public ExpenseReadNullable getExpense() {
    return expense;
  }


  public void setExpense(ExpenseReadNullable expense) {
    
    
    
    this.expense = expense;
  }


  public ItemReadSerializerV2 bill(Integer bill) {
    
    
    
    
    this.bill = bill;
    return this;
  }

   /**
   * Get bill
   * @return bill
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getBill() {
    return bill;
  }


  public void setBill(Integer bill) {
    
    
    
    this.bill = bill;
  }


  public ItemReadSerializerV2 vendor(VendorRead vendor) {
    
    
    
    
    this.vendor = vendor;
    return this;
  }

   /**
   * Get vendor
   * @return vendor
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public VendorRead getVendor() {
    return vendor;
  }


  public void setVendor(VendorRead vendor) {
    
    
    
    this.vendor = vendor;
  }


  public ItemReadSerializerV2 sku(String sku) {
    
    
    
    
    this.sku = sku;
    return this;
  }

   /**
   * Get sku
   * @return sku
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSku() {
    return sku;
  }


  public void setSku(String sku) {
    
    
    
    this.sku = sku;
  }


  public ItemReadSerializerV2 po(PODocs po) {
    
    
    
    
    this.po = po;
    return this;
  }

   /**
   * Get po
   * @return po
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PODocs getPo() {
    return po;
  }


  public void setPo(PODocs po) {
    
    
    
    this.po = po;
  }


  public ItemReadSerializerV2 unit(String unit) {
    
    
    
    
    this.unit = unit;
    return this;
  }

   /**
   * Get unit
   * @return unit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUnit() {
    return unit;
  }


  public void setUnit(String unit) {
    
    
    
    this.unit = unit;
  }


  public ItemReadSerializerV2 quantity(BigDecimal quantity) {
    
    
    
    
    this.quantity = quantity;
    return this;
  }

   /**
   * Get quantity
   * @return quantity
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public BigDecimal getQuantity() {
    return quantity;
  }


  public void setQuantity(BigDecimal quantity) {
    
    
    
    this.quantity = quantity;
  }


  public ItemReadSerializerV2 currency(Currency currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Currency getCurrency() {
    return currency;
  }


  public void setCurrency(Currency currency) {
    
    
    
    this.currency = currency;
  }


   /**
   * Get totalCost
   * @return totalCost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getTotalCost() {
    return totalCost;
  }




   /**
   * Get receivedOn
   * @return receivedOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getReceivedOn() {
    return receivedOn;
  }




   /**
   * Get packingSlips
   * @return packingSlips
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Attachment> getPackingSlips() {
    return packingSlips;
  }




  public ItemReadSerializerV2 costAllocations(List<CostAllocationRead> costAllocations) {
    
    
    
    
    this.costAllocations = costAllocations;
    return this;
  }

  public ItemReadSerializerV2 addCostAllocationsItem(CostAllocationRead costAllocationsItem) {
    this.costAllocations.add(costAllocationsItem);
    return this;
  }

   /**
   * Get costAllocations
   * @return costAllocations
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<CostAllocationRead> getCostAllocations() {
    return costAllocations;
  }


  public void setCostAllocations(List<CostAllocationRead> costAllocations) {
    
    
    
    this.costAllocations = costAllocations;
  }


  public ItemReadSerializerV2 archived(Boolean archived) {
    
    
    
    
    this.archived = archived;
    return this;
  }

   /**
   * Get archived
   * @return archived
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getArchived() {
    return archived;
  }


  public void setArchived(Boolean archived) {
    
    
    
    this.archived = archived;
  }


  public ItemReadSerializerV2 expenseReport(ExpenseReportDocs expenseReport) {
    
    
    
    
    this.expenseReport = expenseReport;
    return this;
  }

   /**
   * Get expenseReport
   * @return expenseReport
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ExpenseReportDocs getExpenseReport() {
    return expenseReport;
  }


  public void setExpenseReport(ExpenseReportDocs expenseReport) {
    
    
    
    this.expenseReport = expenseReport;
  }


   /**
   * Get sameUnitCost
   * @return sameUnitCost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getSameUnitCost() {
    return sameUnitCost;
  }




  public ItemReadSerializerV2 creditcardItem(CreditCardItemReadNullable creditcardItem) {
    
    
    
    
    this.creditcardItem = creditcardItem;
    return this;
  }

   /**
   * Get creditcardItem
   * @return creditcardItem
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public CreditCardItemReadNullable getCreditcardItem() {
    return creditcardItem;
  }


  public void setCreditcardItem(CreditCardItemReadNullable creditcardItem) {
    
    
    
    this.creditcardItem = creditcardItem;
  }


   /**
   * Get isEdited
   * @return isEdited
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsEdited() {
    return isEdited;
  }




  public ItemReadSerializerV2 unitCostDiffLog(UnitCostDiffLogDocsNullable unitCostDiffLog) {
    
    
    
    
    this.unitCostDiffLog = unitCostDiffLog;
    return this;
  }

   /**
   * Get unitCostDiffLog
   * @return unitCostDiffLog
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UnitCostDiffLogDocsNullable getUnitCostDiffLog() {
    return unitCostDiffLog;
  }


  public void setUnitCostDiffLog(UnitCostDiffLogDocsNullable unitCostDiffLog) {
    
    
    
    this.unitCostDiffLog = unitCostDiffLog;
  }


  public ItemReadSerializerV2 taxName(String taxName) {
    
    
    
    
    this.taxName = taxName;
    return this;
  }

   /**
   * Get taxName
   * @return taxName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTaxName() {
    return taxName;
  }


  public void setTaxName(String taxName) {
    
    
    
    this.taxName = taxName;
  }


  public ItemReadSerializerV2 taxPercentage(BigDecimal taxPercentage) {
    
    
    
    
    this.taxPercentage = taxPercentage;
    return this;
  }

   /**
   * Get taxPercentage
   * @return taxPercentage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getTaxPercentage() {
    return taxPercentage;
  }


  public void setTaxPercentage(BigDecimal taxPercentage) {
    
    
    
    this.taxPercentage = taxPercentage;
  }


   /**
   * Get taxAmount
   * @return taxAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getTaxAmount() {
    return taxAmount;
  }




  public ItemReadSerializerV2 taxIsInclusive(Boolean taxIsInclusive) {
    
    
    
    
    this.taxIsInclusive = taxIsInclusive;
    return this;
  }

   /**
   * Get taxIsInclusive
   * @return taxIsInclusive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getTaxIsInclusive() {
    return taxIsInclusive;
  }


  public void setTaxIsInclusive(Boolean taxIsInclusive) {
    
    
    
    this.taxIsInclusive = taxIsInclusive;
  }


  public ItemReadSerializerV2 tax(Integer tax) {
    
    
    
    
    this.tax = tax;
    return this;
  }

   /**
   * Get tax
   * @return tax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getTax() {
    return tax;
  }


  public void setTax(Integer tax) {
    
    
    
    this.tax = tax;
  }


   /**
   * Get totalCostWithTax
   * @return totalCostWithTax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getTotalCostWithTax() {
    return totalCostWithTax;
  }




  public ItemReadSerializerV2 shippingAmount(BigDecimal shippingAmount) {
    
    
    
    
    this.shippingAmount = shippingAmount;
    return this;
  }

   /**
   * Get shippingAmount
   * @return shippingAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getShippingAmount() {
    return shippingAmount;
  }


  public void setShippingAmount(BigDecimal shippingAmount) {
    
    
    
    this.shippingAmount = shippingAmount;
  }


   /**
   * Get unitCost
   * @return unitCost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getUnitCost() {
    return unitCost;
  }




   /**
   * Get customFields
   * @return customFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CustomFieldValueRead> getCustomFields() {
    return customFields;
  }




   /**
   * Get itemType
   * @return itemType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getItemType() {
    return itemType;
  }




   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getType() {
    return type;
  }




   /**
   * Get billByCost
   * @return billByCost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getBillByCost() {
    return billByCost;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ItemReadSerializerV2 instance itself
   */
  public ItemReadSerializerV2 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemReadSerializerV2 itemReadSerializerV2 = (ItemReadSerializerV2) o;
    return Objects.equals(this.description, itemReadSerializerV2.description) &&
        Objects.equals(this.id, itemReadSerializerV2.id) &&
        Objects.equals(this.orderitem, itemReadSerializerV2.orderitem) &&
        Objects.equals(this.expense, itemReadSerializerV2.expense) &&
        Objects.equals(this.bill, itemReadSerializerV2.bill) &&
        Objects.equals(this.vendor, itemReadSerializerV2.vendor) &&
        Objects.equals(this.sku, itemReadSerializerV2.sku) &&
        Objects.equals(this.po, itemReadSerializerV2.po) &&
        Objects.equals(this.unit, itemReadSerializerV2.unit) &&
        Objects.equals(this.quantity, itemReadSerializerV2.quantity) &&
        Objects.equals(this.currency, itemReadSerializerV2.currency) &&
        Objects.equals(this.totalCost, itemReadSerializerV2.totalCost) &&
        Objects.equals(this.receivedOn, itemReadSerializerV2.receivedOn) &&
        Objects.equals(this.packingSlips, itemReadSerializerV2.packingSlips) &&
        Objects.equals(this.costAllocations, itemReadSerializerV2.costAllocations) &&
        Objects.equals(this.archived, itemReadSerializerV2.archived) &&
        Objects.equals(this.expenseReport, itemReadSerializerV2.expenseReport) &&
        Objects.equals(this.sameUnitCost, itemReadSerializerV2.sameUnitCost) &&
        Objects.equals(this.creditcardItem, itemReadSerializerV2.creditcardItem) &&
        Objects.equals(this.isEdited, itemReadSerializerV2.isEdited) &&
        Objects.equals(this.unitCostDiffLog, itemReadSerializerV2.unitCostDiffLog) &&
        Objects.equals(this.taxName, itemReadSerializerV2.taxName) &&
        Objects.equals(this.taxPercentage, itemReadSerializerV2.taxPercentage) &&
        Objects.equals(this.taxAmount, itemReadSerializerV2.taxAmount) &&
        Objects.equals(this.taxIsInclusive, itemReadSerializerV2.taxIsInclusive) &&
        Objects.equals(this.tax, itemReadSerializerV2.tax) &&
        Objects.equals(this.totalCostWithTax, itemReadSerializerV2.totalCostWithTax) &&
        Objects.equals(this.shippingAmount, itemReadSerializerV2.shippingAmount) &&
        Objects.equals(this.unitCost, itemReadSerializerV2.unitCost) &&
        Objects.equals(this.customFields, itemReadSerializerV2.customFields) &&
        Objects.equals(this.itemType, itemReadSerializerV2.itemType) &&
        Objects.equals(this.type, itemReadSerializerV2.type) &&
        Objects.equals(this.billByCost, itemReadSerializerV2.billByCost)&&
        Objects.equals(this.additionalProperties, itemReadSerializerV2.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, id, orderitem, expense, bill, vendor, sku, po, unit, quantity, currency, totalCost, receivedOn, packingSlips, costAllocations, archived, expenseReport, sameUnitCost, creditcardItem, isEdited, unitCostDiffLog, taxName, taxPercentage, taxAmount, taxIsInclusive, tax, totalCostWithTax, shippingAmount, unitCost, customFields, itemType, type, billByCost, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemReadSerializerV2 {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    orderitem: ").append(toIndentedString(orderitem)).append("\n");
    sb.append("    expense: ").append(toIndentedString(expense)).append("\n");
    sb.append("    bill: ").append(toIndentedString(bill)).append("\n");
    sb.append("    vendor: ").append(toIndentedString(vendor)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    po: ").append(toIndentedString(po)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    totalCost: ").append(toIndentedString(totalCost)).append("\n");
    sb.append("    receivedOn: ").append(toIndentedString(receivedOn)).append("\n");
    sb.append("    packingSlips: ").append(toIndentedString(packingSlips)).append("\n");
    sb.append("    costAllocations: ").append(toIndentedString(costAllocations)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    expenseReport: ").append(toIndentedString(expenseReport)).append("\n");
    sb.append("    sameUnitCost: ").append(toIndentedString(sameUnitCost)).append("\n");
    sb.append("    creditcardItem: ").append(toIndentedString(creditcardItem)).append("\n");
    sb.append("    isEdited: ").append(toIndentedString(isEdited)).append("\n");
    sb.append("    unitCostDiffLog: ").append(toIndentedString(unitCostDiffLog)).append("\n");
    sb.append("    taxName: ").append(toIndentedString(taxName)).append("\n");
    sb.append("    taxPercentage: ").append(toIndentedString(taxPercentage)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("    taxIsInclusive: ").append(toIndentedString(taxIsInclusive)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    totalCostWithTax: ").append(toIndentedString(totalCostWithTax)).append("\n");
    sb.append("    shippingAmount: ").append(toIndentedString(shippingAmount)).append("\n");
    sb.append("    unitCost: ").append(toIndentedString(unitCost)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    itemType: ").append(toIndentedString(itemType)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    billByCost: ").append(toIndentedString(billByCost)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("orderitem");
    openapiFields.add("expense");
    openapiFields.add("bill");
    openapiFields.add("vendor");
    openapiFields.add("sku");
    openapiFields.add("po");
    openapiFields.add("unit");
    openapiFields.add("quantity");
    openapiFields.add("currency");
    openapiFields.add("total_cost");
    openapiFields.add("received_on");
    openapiFields.add("packing_slips");
    openapiFields.add("cost_allocations");
    openapiFields.add("archived");
    openapiFields.add("expense_report");
    openapiFields.add("same_unit_cost");
    openapiFields.add("creditcard_item");
    openapiFields.add("is_edited");
    openapiFields.add("unit_cost_diff_log");
    openapiFields.add("tax_name");
    openapiFields.add("tax_percentage");
    openapiFields.add("tax_amount");
    openapiFields.add("tax_is_inclusive");
    openapiFields.add("tax");
    openapiFields.add("total_cost_with_tax");
    openapiFields.add("shipping_amount");
    openapiFields.add("unit_cost");
    openapiFields.add("custom_fields");
    openapiFields.add("item_type");
    openapiFields.add("type");
    openapiFields.add("bill_by_cost");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("expense");
    openapiRequiredFields.add("vendor");
    openapiRequiredFields.add("quantity");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("cost_allocations");
    openapiRequiredFields.add("creditcard_item");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ItemReadSerializerV2
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ItemReadSerializerV2.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemReadSerializerV2 is not found in the empty JSON string", ItemReadSerializerV2.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ItemReadSerializerV2.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `orderitem`
      if (jsonObj.get("orderitem") != null && !jsonObj.get("orderitem").isJsonNull()) {
        OrderItemRead.validateJsonObject(jsonObj.getAsJsonObject("orderitem"));
      }
      // validate the required field `expense`
      ExpenseReadNullable.validateJsonObject(jsonObj.getAsJsonObject("expense"));
      // validate the required field `vendor`
      VendorRead.validateJsonObject(jsonObj.getAsJsonObject("vendor"));
      if ((jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) && !jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
      // validate the optional field `po`
      if (jsonObj.get("po") != null && !jsonObj.get("po").isJsonNull()) {
        PODocs.validateJsonObject(jsonObj.getAsJsonObject("po"));
      }
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
      if (!jsonObj.get("quantity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quantity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quantity").toString()));
      }
      // validate the required field `currency`
      Currency.validateJsonObject(jsonObj.getAsJsonObject("currency"));
      if (jsonObj.get("packing_slips") != null && !jsonObj.get("packing_slips").isJsonNull()) {
        JsonArray jsonArraypackingSlips = jsonObj.getAsJsonArray("packing_slips");
        if (jsonArraypackingSlips != null) {
          // ensure the json data is an array
          if (!jsonObj.get("packing_slips").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `packing_slips` to be an array in the JSON string but got `%s`", jsonObj.get("packing_slips").toString()));
          }

          // validate the optional field `packing_slips` (array)
          for (int i = 0; i < jsonArraypackingSlips.size(); i++) {
            Attachment.validateJsonObject(jsonArraypackingSlips.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("cost_allocations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cost_allocations` to be an array in the JSON string but got `%s`", jsonObj.get("cost_allocations").toString()));
      }

      JsonArray jsonArraycostAllocations = jsonObj.getAsJsonArray("cost_allocations");
      // validate the required field `cost_allocations` (array)
      for (int i = 0; i < jsonArraycostAllocations.size(); i++) {
        CostAllocationRead.validateJsonObject(jsonArraycostAllocations.get(i).getAsJsonObject());
      };
      // validate the optional field `expense_report`
      if (jsonObj.get("expense_report") != null && !jsonObj.get("expense_report").isJsonNull()) {
        ExpenseReportDocs.validateJsonObject(jsonObj.getAsJsonObject("expense_report"));
      }
      // validate the required field `creditcard_item`
      CreditCardItemReadNullable.validateJsonObject(jsonObj.getAsJsonObject("creditcard_item"));
      // validate the optional field `unit_cost_diff_log`
      if (jsonObj.get("unit_cost_diff_log") != null && !jsonObj.get("unit_cost_diff_log").isJsonNull()) {
        UnitCostDiffLogDocsNullable.validateJsonObject(jsonObj.getAsJsonObject("unit_cost_diff_log"));
      }
      if ((jsonObj.get("tax_name") != null && !jsonObj.get("tax_name").isJsonNull()) && !jsonObj.get("tax_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_name").toString()));
      }
      if (!jsonObj.get("tax_percentage").isJsonNull() && (jsonObj.get("tax_percentage") != null && !jsonObj.get("tax_percentage").isJsonNull()) && !jsonObj.get("tax_percentage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_percentage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_percentage").toString()));
      }
      if (!jsonObj.get("shipping_amount").isJsonNull() && (jsonObj.get("shipping_amount") != null && !jsonObj.get("shipping_amount").isJsonNull()) && !jsonObj.get("shipping_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_amount").toString()));
      }
      if (jsonObj.get("custom_fields") != null && !jsonObj.get("custom_fields").isJsonNull()) {
        JsonArray jsonArraycustomFields = jsonObj.getAsJsonArray("custom_fields");
        if (jsonArraycustomFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("custom_fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `custom_fields` to be an array in the JSON string but got `%s`", jsonObj.get("custom_fields").toString()));
          }

          // validate the optional field `custom_fields` (array)
          for (int i = 0; i < jsonArraycustomFields.size(); i++) {
            CustomFieldValueRead.validateJsonObject(jsonArraycustomFields.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemReadSerializerV2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemReadSerializerV2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemReadSerializerV2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemReadSerializerV2.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemReadSerializerV2>() {
           @Override
           public void write(JsonWriter out, ItemReadSerializerV2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemReadSerializerV2 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ItemReadSerializerV2 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ItemReadSerializerV2 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ItemReadSerializerV2
  * @throws IOException if the JSON string is invalid with respect to ItemReadSerializerV2
  */
  public static ItemReadSerializerV2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemReadSerializerV2.class);
  }

 /**
  * Convert an instance of ItemReadSerializerV2 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

