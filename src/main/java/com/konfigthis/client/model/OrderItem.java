/*
 * Procurify API Documentation
 *  # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.BlanketOrderItemRead;
import com.konfigthis.client.model.ZeroOneEnum;
import com.konfigthis.client.model.ZeroOneTwoEnum;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * OrderItem
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class OrderItem {
  public static final String SERIALIZED_NAME_P_O = "PO";
  @SerializedName(SERIALIZED_NAME_P_O)
  private List<Integer> PO = null;

  public static final String SERIALIZED_NAME_PO_LINE_NUM = "PO_line_num";
  @SerializedName(SERIALIZED_NAME_PO_LINE_NUM)
  private Integer poLineNum;

  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private Integer account;

  public static final String SERIALIZED_NAME_ACCOUNT_CODE = "accountCode";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_CODE)
  private String accountCode;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_APPROVED_CURRENCY_RATE = "approved_currency_rate";
  @SerializedName(SERIALIZED_NAME_APPROVED_CURRENCY_RATE)
  private BigDecimal approvedCurrencyRate;

  public static final String SERIALIZED_NAME_APPROVED_DATETIME = "approved_datetime";
  @SerializedName(SERIALIZED_NAME_APPROVED_DATETIME)
  private OffsetDateTime approvedDatetime;

  public static final String SERIALIZED_NAME_APPROVED_PRICE = "approved_price";
  @SerializedName(SERIALIZED_NAME_APPROVED_PRICE)
  private BigDecimal approvedPrice;

  public static final String SERIALIZED_NAME_APPROVED_QUANTITY = "approved_quantity";
  @SerializedName(SERIALIZED_NAME_APPROVED_QUANTITY)
  private BigDecimal approvedQuantity;

  public static final String SERIALIZED_NAME_APPROVED_SHIPPING_AMOUNT = "approved_shipping_amount";
  @SerializedName(SERIALIZED_NAME_APPROVED_SHIPPING_AMOUNT)
  private BigDecimal approvedShippingAmount;

  public static final String SERIALIZED_NAME_APPROVED_TAX_AMOUNT = "approved_tax_amount";
  @SerializedName(SERIALIZED_NAME_APPROVED_TAX_AMOUNT)
  private BigDecimal approvedTaxAmount;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private String attachments;

  public static final String SERIALIZED_NAME_CATALOG_ITEM = "catalog_item";
  @SerializedName(SERIALIZED_NAME_CATALOG_ITEM)
  private Integer catalogItem;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private Integer currency;

  public static final String SERIALIZED_NAME_DATE_INVOICED = "dateInvoiced";
  @SerializedName(SERIALIZED_NAME_DATE_INVOICED)
  private OffsetDateTime dateInvoiced;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "external_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_HOT = "hot";
  @SerializedName(SERIALIZED_NAME_HOT)
  private Boolean hot;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_INVENTORY_ITEM = "inventoryItem";
  @SerializedName(SERIALIZED_NAME_INVENTORY_ITEM)
  private Integer inventoryItem;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "is_active";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_ITEM_ATTACHMENTS = "item_attachments";
  @SerializedName(SERIALIZED_NAME_ITEM_ATTACHMENTS)
  private List<Integer> itemAttachments = null;

  public static final String SERIALIZED_NAME_LAST_CHANGED_BY = "last_changed_by";
  @SerializedName(SERIALIZED_NAME_LAST_CHANGED_BY)
  private Integer lastChangedBy;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "last_modified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private OffsetDateTime lastModified;

  public static final String SERIALIZED_NAME_LINE_COMMENT = "lineComment";
  @SerializedName(SERIALIZED_NAME_LINE_COMMENT)
  private String lineComment;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUM = "num";
  @SerializedName(SERIALIZED_NAME_NUM)
  private String num;

  public static final String SERIALIZED_NAME_ORDER_NUM = "orderNum";
  @SerializedName(SERIALIZED_NAME_ORDER_NUM)
  private Integer orderNum;

  public static final String SERIALIZED_NAME_PO_NOTE = "po_note";
  @SerializedName(SERIALIZED_NAME_PO_NOTE)
  private String poNote;

  public static final String SERIALIZED_NAME_PO_VERSION = "po_version";
  @SerializedName(SERIALIZED_NAME_PO_VERSION)
  private Integer poVersion;

  public static final String SERIALIZED_NAME_PREF_VENDOR = "pref_vendor";
  @SerializedName(SERIALIZED_NAME_PREF_VENDOR)
  private Integer prefVendor;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price;

  public static final String SERIALIZED_NAME_PURCHASE_ORDER = "purchase_order";
  @SerializedName(SERIALIZED_NAME_PURCHASE_ORDER)
  private Integer purchaseOrder;

  public static final String SERIALIZED_NAME_PURCHASER = "purchaser";
  @SerializedName(SERIALIZED_NAME_PURCHASER)
  private Integer purchaser;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private BigDecimal quantity;

  public static final String SERIALIZED_NAME_RECEIVED_FAIL_QTY = "receivedFailQty";
  @SerializedName(SERIALIZED_NAME_RECEIVED_FAIL_QTY)
  private BigDecimal receivedFailQty;

  public static final String SERIALIZED_NAME_RECEIVED_PASS_QTY = "receivedPassQty";
  @SerializedName(SERIALIZED_NAME_RECEIVED_PASS_QTY)
  private BigDecimal receivedPassQty;

  public static final String SERIALIZED_NAME_SHIPPING_AMOUNT = "shipping_amount";
  @SerializedName(SERIALIZED_NAME_SHIPPING_AMOUNT)
  private BigDecimal shippingAmount;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Object status = null;

  public static final String SERIALIZED_NAME_TAX_AMOUNT = "tax_amount";
  @SerializedName(SERIALIZED_NAME_TAX_AMOUNT)
  private BigDecimal taxAmount;

  public static final String SERIALIZED_NAME_TOTAL_COST = "total_cost";
  @SerializedName(SERIALIZED_NAME_TOTAL_COST)
  private BigDecimal totalCost;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_VENDOR = "vendor";
  @SerializedName(SERIALIZED_NAME_VENDOR)
  private String vendor;

  public static final String SERIALIZED_NAME_RECEIVE_METHOD = "receive_method";
  @SerializedName(SERIALIZED_NAME_RECEIVE_METHOD)
  private ZeroOneEnum receiveMethod;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ZeroOneTwoEnum type;

  public static final String SERIALIZED_NAME_BLANKET = "blanket";
  @SerializedName(SERIALIZED_NAME_BLANKET)
  private BlanketOrderItemRead blanket;

  public OrderItem() {
  }

  
  public OrderItem(
     OffsetDateTime createdAt, 
     Integer id, 
     OffsetDateTime lastModified, 
     OffsetDateTime updatedAt
  ) {
    this();
    this.createdAt = createdAt;
    this.id = id;
    this.lastModified = lastModified;
    this.updatedAt = updatedAt;
  }

  public OrderItem PO(List<Integer> PO) {
    
    
    
    
    this.PO = PO;
    return this;
  }

  public OrderItem addPOItem(Integer POItem) {
    if (this.PO == null) {
      this.PO = new ArrayList<>();
    }
    this.PO.add(POItem);
    return this;
  }

   /**
   * Get PO
   * @return PO
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getPO() {
    return PO;
  }


  public void setPO(List<Integer> PO) {
    
    
    
    this.PO = PO;
  }


  public OrderItem poLineNum(Integer poLineNum) {
    if (poLineNum != null && poLineNum < -2147483648) {
      throw new IllegalArgumentException("Invalid value for poLineNum. Must be greater than or equal to -2147483648.");
    }
    if (poLineNum != null && poLineNum > 2147483647) {
      throw new IllegalArgumentException("Invalid value for poLineNum. Must be less than or equal to 2147483647.");
    }
    
    
    this.poLineNum = poLineNum;
    return this;
  }

   /**
   * Get poLineNum
   * minimum: -2147483648
   * maximum: 2147483647
   * @return poLineNum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPoLineNum() {
    return poLineNum;
  }


  public void setPoLineNum(Integer poLineNum) {
    if (poLineNum != null && poLineNum < -2147483648) {
      throw new IllegalArgumentException("Invalid value for poLineNum. Must be greater than or equal to -2147483648.");
    }
    if (poLineNum != null && poLineNum > 2147483647) {
      throw new IllegalArgumentException("Invalid value for poLineNum. Must be less than or equal to 2147483647.");
    }
    
    this.poLineNum = poLineNum;
  }


  public OrderItem account(Integer account) {
    
    
    
    
    this.account = account;
    return this;
  }

   /**
   * Get account
   * @return account
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getAccount() {
    return account;
  }


  public void setAccount(Integer account) {
    
    
    
    this.account = account;
  }


  public OrderItem accountCode(String accountCode) {
    
    
    
    
    this.accountCode = accountCode;
    return this;
  }

   /**
   * Get accountCode
   * @return accountCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAccountCode() {
    return accountCode;
  }


  public void setAccountCode(String accountCode) {
    
    
    
    this.accountCode = accountCode;
  }


  public OrderItem active(Boolean active) {
    
    
    
    
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    
    
    
    this.active = active;
  }


  public OrderItem approvedCurrencyRate(BigDecimal approvedCurrencyRate) {
    
    
    
    
    this.approvedCurrencyRate = approvedCurrencyRate;
    return this;
  }

   /**
   * Get approvedCurrencyRate
   * @return approvedCurrencyRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getApprovedCurrencyRate() {
    return approvedCurrencyRate;
  }


  public void setApprovedCurrencyRate(BigDecimal approvedCurrencyRate) {
    
    
    
    this.approvedCurrencyRate = approvedCurrencyRate;
  }


  public OrderItem approvedDatetime(OffsetDateTime approvedDatetime) {
    
    
    
    
    this.approvedDatetime = approvedDatetime;
    return this;
  }

   /**
   * Get approvedDatetime
   * @return approvedDatetime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getApprovedDatetime() {
    return approvedDatetime;
  }


  public void setApprovedDatetime(OffsetDateTime approvedDatetime) {
    
    
    
    this.approvedDatetime = approvedDatetime;
  }


  public OrderItem approvedPrice(BigDecimal approvedPrice) {
    
    
    
    
    this.approvedPrice = approvedPrice;
    return this;
  }

   /**
   * Get approvedPrice
   * @return approvedPrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getApprovedPrice() {
    return approvedPrice;
  }


  public void setApprovedPrice(BigDecimal approvedPrice) {
    
    
    
    this.approvedPrice = approvedPrice;
  }


  public OrderItem approvedQuantity(BigDecimal approvedQuantity) {
    
    
    
    
    this.approvedQuantity = approvedQuantity;
    return this;
  }

   /**
   * Get approvedQuantity
   * @return approvedQuantity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getApprovedQuantity() {
    return approvedQuantity;
  }


  public void setApprovedQuantity(BigDecimal approvedQuantity) {
    
    
    
    this.approvedQuantity = approvedQuantity;
  }


  public OrderItem approvedShippingAmount(BigDecimal approvedShippingAmount) {
    
    
    
    
    this.approvedShippingAmount = approvedShippingAmount;
    return this;
  }

   /**
   * Get approvedShippingAmount
   * @return approvedShippingAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getApprovedShippingAmount() {
    return approvedShippingAmount;
  }


  public void setApprovedShippingAmount(BigDecimal approvedShippingAmount) {
    
    
    
    this.approvedShippingAmount = approvedShippingAmount;
  }


  public OrderItem approvedTaxAmount(BigDecimal approvedTaxAmount) {
    
    
    
    
    this.approvedTaxAmount = approvedTaxAmount;
    return this;
  }

   /**
   * Get approvedTaxAmount
   * @return approvedTaxAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getApprovedTaxAmount() {
    return approvedTaxAmount;
  }


  public void setApprovedTaxAmount(BigDecimal approvedTaxAmount) {
    
    
    
    this.approvedTaxAmount = approvedTaxAmount;
  }


  public OrderItem attachments(String attachments) {
    
    
    
    
    this.attachments = attachments;
    return this;
  }

   /**
   * Get attachments
   * @return attachments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAttachments() {
    return attachments;
  }


  public void setAttachments(String attachments) {
    
    
    
    this.attachments = attachments;
  }


  public OrderItem catalogItem(Integer catalogItem) {
    
    
    
    
    this.catalogItem = catalogItem;
    return this;
  }

   /**
   * Get catalogItem
   * @return catalogItem
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCatalogItem() {
    return catalogItem;
  }


  public void setCatalogItem(Integer catalogItem) {
    
    
    
    this.catalogItem = catalogItem;
  }


   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }




  public OrderItem currency(Integer currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getCurrency() {
    return currency;
  }


  public void setCurrency(Integer currency) {
    
    
    
    this.currency = currency;
  }


  public OrderItem dateInvoiced(OffsetDateTime dateInvoiced) {
    
    
    
    
    this.dateInvoiced = dateInvoiced;
    return this;
  }

   /**
   * Get dateInvoiced
   * @return dateInvoiced
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getDateInvoiced() {
    return dateInvoiced;
  }


  public void setDateInvoiced(OffsetDateTime dateInvoiced) {
    
    
    
    this.dateInvoiced = dateInvoiced;
  }


  public OrderItem externalId(String externalId) {
    
    
    
    
    this.externalId = externalId;
    return this;
  }

   /**
   * External id of the order item
   * @return externalId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "External id of the order item")

  public String getExternalId() {
    return externalId;
  }


  public void setExternalId(String externalId) {
    
    
    
    this.externalId = externalId;
  }


  public OrderItem hot(Boolean hot) {
    
    
    
    
    this.hot = hot;
    return this;
  }

   /**
   * Get hot
   * @return hot
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getHot() {
    return hot;
  }


  public void setHot(Boolean hot) {
    
    
    
    this.hot = hot;
  }


   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }




  public OrderItem inventoryItem(Integer inventoryItem) {
    
    
    
    
    this.inventoryItem = inventoryItem;
    return this;
  }

   /**
   * Get inventoryItem
   * @return inventoryItem
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getInventoryItem() {
    return inventoryItem;
  }


  public void setInventoryItem(Integer inventoryItem) {
    
    
    
    this.inventoryItem = inventoryItem;
  }


  public OrderItem isActive(Boolean isActive) {
    
    
    
    
    this.isActive = isActive;
    return this;
  }

   /**
   * Get isActive
   * @return isActive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsActive() {
    return isActive;
  }


  public void setIsActive(Boolean isActive) {
    
    
    
    this.isActive = isActive;
  }


  public OrderItem itemAttachments(List<Integer> itemAttachments) {
    
    
    
    
    this.itemAttachments = itemAttachments;
    return this;
  }

  public OrderItem addItemAttachmentsItem(Integer itemAttachmentsItem) {
    if (this.itemAttachments == null) {
      this.itemAttachments = new ArrayList<>();
    }
    this.itemAttachments.add(itemAttachmentsItem);
    return this;
  }

   /**
   * Get itemAttachments
   * @return itemAttachments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getItemAttachments() {
    return itemAttachments;
  }


  public void setItemAttachments(List<Integer> itemAttachments) {
    
    
    
    this.itemAttachments = itemAttachments;
  }


  public OrderItem lastChangedBy(Integer lastChangedBy) {
    
    
    
    
    this.lastChangedBy = lastChangedBy;
    return this;
  }

   /**
   * Get lastChangedBy
   * @return lastChangedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getLastChangedBy() {
    return lastChangedBy;
  }


  public void setLastChangedBy(Integer lastChangedBy) {
    
    
    
    this.lastChangedBy = lastChangedBy;
  }


   /**
   * Get lastModified
   * @return lastModified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getLastModified() {
    return lastModified;
  }




  public OrderItem lineComment(String lineComment) {
    
    
    
    
    this.lineComment = lineComment;
    return this;
  }

   /**
   * Get lineComment
   * @return lineComment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLineComment() {
    return lineComment;
  }


  public void setLineComment(String lineComment) {
    
    
    
    this.lineComment = lineComment;
  }


  public OrderItem name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public OrderItem num(String num) {
    
    
    
    
    this.num = num;
    return this;
  }

   /**
   * Get num
   * @return num
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getNum() {
    return num;
  }


  public void setNum(String num) {
    
    
    
    this.num = num;
  }


  public OrderItem orderNum(Integer orderNum) {
    
    
    
    
    this.orderNum = orderNum;
    return this;
  }

   /**
   * Get orderNum
   * @return orderNum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getOrderNum() {
    return orderNum;
  }


  public void setOrderNum(Integer orderNum) {
    
    
    
    this.orderNum = orderNum;
  }


  public OrderItem poNote(String poNote) {
    
    
    
    
    this.poNote = poNote;
    return this;
  }

   /**
   * Get poNote
   * @return poNote
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPoNote() {
    return poNote;
  }


  public void setPoNote(String poNote) {
    
    
    
    this.poNote = poNote;
  }


  public OrderItem poVersion(Integer poVersion) {
    if (poVersion != null && poVersion < -2147483648) {
      throw new IllegalArgumentException("Invalid value for poVersion. Must be greater than or equal to -2147483648.");
    }
    if (poVersion != null && poVersion > 2147483647) {
      throw new IllegalArgumentException("Invalid value for poVersion. Must be less than or equal to 2147483647.");
    }
    
    
    this.poVersion = poVersion;
    return this;
  }

   /**
   * Get poVersion
   * minimum: -2147483648
   * maximum: 2147483647
   * @return poVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPoVersion() {
    return poVersion;
  }


  public void setPoVersion(Integer poVersion) {
    if (poVersion != null && poVersion < -2147483648) {
      throw new IllegalArgumentException("Invalid value for poVersion. Must be greater than or equal to -2147483648.");
    }
    if (poVersion != null && poVersion > 2147483647) {
      throw new IllegalArgumentException("Invalid value for poVersion. Must be less than or equal to 2147483647.");
    }
    
    this.poVersion = poVersion;
  }


  public OrderItem prefVendor(Integer prefVendor) {
    
    
    
    
    this.prefVendor = prefVendor;
    return this;
  }

   /**
   * Get prefVendor
   * @return prefVendor
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getPrefVendor() {
    return prefVendor;
  }


  public void setPrefVendor(Integer prefVendor) {
    
    
    
    this.prefVendor = prefVendor;
  }


  public OrderItem price(BigDecimal price) {
    
    
    
    
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public BigDecimal getPrice() {
    return price;
  }


  public void setPrice(BigDecimal price) {
    
    
    
    this.price = price;
  }


  public OrderItem purchaseOrder(Integer purchaseOrder) {
    
    
    
    
    this.purchaseOrder = purchaseOrder;
    return this;
  }

   /**
   * Get purchaseOrder
   * @return purchaseOrder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPurchaseOrder() {
    return purchaseOrder;
  }


  public void setPurchaseOrder(Integer purchaseOrder) {
    
    
    
    this.purchaseOrder = purchaseOrder;
  }


  public OrderItem purchaser(Integer purchaser) {
    
    
    
    
    this.purchaser = purchaser;
    return this;
  }

   /**
   * Get purchaser
   * @return purchaser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPurchaser() {
    return purchaser;
  }


  public void setPurchaser(Integer purchaser) {
    
    
    
    this.purchaser = purchaser;
  }


  public OrderItem quantity(BigDecimal quantity) {
    
    
    
    
    this.quantity = quantity;
    return this;
  }

   /**
   * Get quantity
   * @return quantity
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public BigDecimal getQuantity() {
    return quantity;
  }


  public void setQuantity(BigDecimal quantity) {
    
    
    
    this.quantity = quantity;
  }


  public OrderItem receivedFailQty(BigDecimal receivedFailQty) {
    
    
    
    
    this.receivedFailQty = receivedFailQty;
    return this;
  }

   /**
   * Get receivedFailQty
   * @return receivedFailQty
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getReceivedFailQty() {
    return receivedFailQty;
  }


  public void setReceivedFailQty(BigDecimal receivedFailQty) {
    
    
    
    this.receivedFailQty = receivedFailQty;
  }


  public OrderItem receivedPassQty(BigDecimal receivedPassQty) {
    
    
    
    
    this.receivedPassQty = receivedPassQty;
    return this;
  }

   /**
   * Get receivedPassQty
   * @return receivedPassQty
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getReceivedPassQty() {
    return receivedPassQty;
  }


  public void setReceivedPassQty(BigDecimal receivedPassQty) {
    
    
    
    this.receivedPassQty = receivedPassQty;
  }


  public OrderItem shippingAmount(BigDecimal shippingAmount) {
    
    
    
    
    this.shippingAmount = shippingAmount;
    return this;
  }

   /**
   * Get shippingAmount
   * @return shippingAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getShippingAmount() {
    return shippingAmount;
  }


  public void setShippingAmount(BigDecimal shippingAmount) {
    
    
    
    this.shippingAmount = shippingAmount;
  }


  public OrderItem sku(String sku) {
    
    
    
    
    this.sku = sku;
    return this;
  }

   /**
   * Get sku
   * @return sku
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSku() {
    return sku;
  }


  public void setSku(String sku) {
    
    
    
    this.sku = sku;
  }


  public OrderItem status(Object status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getStatus() {
    return status;
  }


  public void setStatus(Object status) {
    
    
    
    this.status = status;
  }


  public OrderItem taxAmount(BigDecimal taxAmount) {
    
    
    
    
    this.taxAmount = taxAmount;
    return this;
  }

   /**
   * Get taxAmount
   * @return taxAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getTaxAmount() {
    return taxAmount;
  }


  public void setTaxAmount(BigDecimal taxAmount) {
    
    
    
    this.taxAmount = taxAmount;
  }


  public OrderItem totalCost(BigDecimal totalCost) {
    
    
    
    
    this.totalCost = totalCost;
    return this;
  }

   /**
   * Get totalCost
   * @return totalCost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getTotalCost() {
    return totalCost;
  }


  public void setTotalCost(BigDecimal totalCost) {
    
    
    
    this.totalCost = totalCost;
  }


  public OrderItem unit(String unit) {
    
    
    
    
    this.unit = unit;
    return this;
  }

   /**
   * Get unit
   * @return unit
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getUnit() {
    return unit;
  }


  public void setUnit(String unit) {
    
    
    
    this.unit = unit;
  }


   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }




  public OrderItem vendor(String vendor) {
    
    
    
    
    this.vendor = vendor;
    return this;
  }

   /**
   * Get vendor
   * @return vendor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getVendor() {
    return vendor;
  }


  public void setVendor(String vendor) {
    
    
    
    this.vendor = vendor;
  }


  public OrderItem receiveMethod(ZeroOneEnum receiveMethod) {
    
    
    
    
    this.receiveMethod = receiveMethod;
    return this;
  }

   /**
   * Get receiveMethod
   * @return receiveMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ZeroOneEnum getReceiveMethod() {
    return receiveMethod;
  }


  public void setReceiveMethod(ZeroOneEnum receiveMethod) {
    
    
    
    this.receiveMethod = receiveMethod;
  }


  public OrderItem type(ZeroOneTwoEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ZeroOneTwoEnum getType() {
    return type;
  }


  public void setType(ZeroOneTwoEnum type) {
    
    
    
    this.type = type;
  }


  public OrderItem blanket(BlanketOrderItemRead blanket) {
    
    
    
    
    this.blanket = blanket;
    return this;
  }

   /**
   * Get blanket
   * @return blanket
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BlanketOrderItemRead getBlanket() {
    return blanket;
  }


  public void setBlanket(BlanketOrderItemRead blanket) {
    
    
    
    this.blanket = blanket;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OrderItem instance itself
   */
  public OrderItem putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderItem orderItem = (OrderItem) o;
    return Objects.equals(this.PO, orderItem.PO) &&
        Objects.equals(this.poLineNum, orderItem.poLineNum) &&
        Objects.equals(this.account, orderItem.account) &&
        Objects.equals(this.accountCode, orderItem.accountCode) &&
        Objects.equals(this.active, orderItem.active) &&
        Objects.equals(this.approvedCurrencyRate, orderItem.approvedCurrencyRate) &&
        Objects.equals(this.approvedDatetime, orderItem.approvedDatetime) &&
        Objects.equals(this.approvedPrice, orderItem.approvedPrice) &&
        Objects.equals(this.approvedQuantity, orderItem.approvedQuantity) &&
        Objects.equals(this.approvedShippingAmount, orderItem.approvedShippingAmount) &&
        Objects.equals(this.approvedTaxAmount, orderItem.approvedTaxAmount) &&
        Objects.equals(this.attachments, orderItem.attachments) &&
        Objects.equals(this.catalogItem, orderItem.catalogItem) &&
        Objects.equals(this.createdAt, orderItem.createdAt) &&
        Objects.equals(this.currency, orderItem.currency) &&
        Objects.equals(this.dateInvoiced, orderItem.dateInvoiced) &&
        Objects.equals(this.externalId, orderItem.externalId) &&
        Objects.equals(this.hot, orderItem.hot) &&
        Objects.equals(this.id, orderItem.id) &&
        Objects.equals(this.inventoryItem, orderItem.inventoryItem) &&
        Objects.equals(this.isActive, orderItem.isActive) &&
        Objects.equals(this.itemAttachments, orderItem.itemAttachments) &&
        Objects.equals(this.lastChangedBy, orderItem.lastChangedBy) &&
        Objects.equals(this.lastModified, orderItem.lastModified) &&
        Objects.equals(this.lineComment, orderItem.lineComment) &&
        Objects.equals(this.name, orderItem.name) &&
        Objects.equals(this.num, orderItem.num) &&
        Objects.equals(this.orderNum, orderItem.orderNum) &&
        Objects.equals(this.poNote, orderItem.poNote) &&
        Objects.equals(this.poVersion, orderItem.poVersion) &&
        Objects.equals(this.prefVendor, orderItem.prefVendor) &&
        Objects.equals(this.price, orderItem.price) &&
        Objects.equals(this.purchaseOrder, orderItem.purchaseOrder) &&
        Objects.equals(this.purchaser, orderItem.purchaser) &&
        Objects.equals(this.quantity, orderItem.quantity) &&
        Objects.equals(this.receivedFailQty, orderItem.receivedFailQty) &&
        Objects.equals(this.receivedPassQty, orderItem.receivedPassQty) &&
        Objects.equals(this.shippingAmount, orderItem.shippingAmount) &&
        Objects.equals(this.sku, orderItem.sku) &&
        Objects.equals(this.status, orderItem.status) &&
        Objects.equals(this.taxAmount, orderItem.taxAmount) &&
        Objects.equals(this.totalCost, orderItem.totalCost) &&
        Objects.equals(this.unit, orderItem.unit) &&
        Objects.equals(this.updatedAt, orderItem.updatedAt) &&
        Objects.equals(this.vendor, orderItem.vendor) &&
        Objects.equals(this.receiveMethod, orderItem.receiveMethod) &&
        Objects.equals(this.type, orderItem.type) &&
        Objects.equals(this.blanket, orderItem.blanket)&&
        Objects.equals(this.additionalProperties, orderItem.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(PO, poLineNum, account, accountCode, active, approvedCurrencyRate, approvedDatetime, approvedPrice, approvedQuantity, approvedShippingAmount, approvedTaxAmount, attachments, catalogItem, createdAt, currency, dateInvoiced, externalId, hot, id, inventoryItem, isActive, itemAttachments, lastChangedBy, lastModified, lineComment, name, num, orderNum, poNote, poVersion, prefVendor, price, purchaseOrder, purchaser, quantity, receivedFailQty, receivedPassQty, shippingAmount, sku, status, taxAmount, totalCost, unit, updatedAt, vendor, receiveMethod, type, blanket, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderItem {\n");
    sb.append("    PO: ").append(toIndentedString(PO)).append("\n");
    sb.append("    poLineNum: ").append(toIndentedString(poLineNum)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    accountCode: ").append(toIndentedString(accountCode)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    approvedCurrencyRate: ").append(toIndentedString(approvedCurrencyRate)).append("\n");
    sb.append("    approvedDatetime: ").append(toIndentedString(approvedDatetime)).append("\n");
    sb.append("    approvedPrice: ").append(toIndentedString(approvedPrice)).append("\n");
    sb.append("    approvedQuantity: ").append(toIndentedString(approvedQuantity)).append("\n");
    sb.append("    approvedShippingAmount: ").append(toIndentedString(approvedShippingAmount)).append("\n");
    sb.append("    approvedTaxAmount: ").append(toIndentedString(approvedTaxAmount)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    catalogItem: ").append(toIndentedString(catalogItem)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    dateInvoiced: ").append(toIndentedString(dateInvoiced)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    hot: ").append(toIndentedString(hot)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inventoryItem: ").append(toIndentedString(inventoryItem)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    itemAttachments: ").append(toIndentedString(itemAttachments)).append("\n");
    sb.append("    lastChangedBy: ").append(toIndentedString(lastChangedBy)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    lineComment: ").append(toIndentedString(lineComment)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    num: ").append(toIndentedString(num)).append("\n");
    sb.append("    orderNum: ").append(toIndentedString(orderNum)).append("\n");
    sb.append("    poNote: ").append(toIndentedString(poNote)).append("\n");
    sb.append("    poVersion: ").append(toIndentedString(poVersion)).append("\n");
    sb.append("    prefVendor: ").append(toIndentedString(prefVendor)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    purchaseOrder: ").append(toIndentedString(purchaseOrder)).append("\n");
    sb.append("    purchaser: ").append(toIndentedString(purchaser)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    receivedFailQty: ").append(toIndentedString(receivedFailQty)).append("\n");
    sb.append("    receivedPassQty: ").append(toIndentedString(receivedPassQty)).append("\n");
    sb.append("    shippingAmount: ").append(toIndentedString(shippingAmount)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("    totalCost: ").append(toIndentedString(totalCost)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    vendor: ").append(toIndentedString(vendor)).append("\n");
    sb.append("    receiveMethod: ").append(toIndentedString(receiveMethod)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    blanket: ").append(toIndentedString(blanket)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PO");
    openapiFields.add("PO_line_num");
    openapiFields.add("account");
    openapiFields.add("accountCode");
    openapiFields.add("active");
    openapiFields.add("approved_currency_rate");
    openapiFields.add("approved_datetime");
    openapiFields.add("approved_price");
    openapiFields.add("approved_quantity");
    openapiFields.add("approved_shipping_amount");
    openapiFields.add("approved_tax_amount");
    openapiFields.add("attachments");
    openapiFields.add("catalog_item");
    openapiFields.add("created_at");
    openapiFields.add("currency");
    openapiFields.add("dateInvoiced");
    openapiFields.add("external_id");
    openapiFields.add("hot");
    openapiFields.add("id");
    openapiFields.add("inventoryItem");
    openapiFields.add("is_active");
    openapiFields.add("item_attachments");
    openapiFields.add("last_changed_by");
    openapiFields.add("last_modified");
    openapiFields.add("lineComment");
    openapiFields.add("name");
    openapiFields.add("num");
    openapiFields.add("orderNum");
    openapiFields.add("po_note");
    openapiFields.add("po_version");
    openapiFields.add("pref_vendor");
    openapiFields.add("price");
    openapiFields.add("purchase_order");
    openapiFields.add("purchaser");
    openapiFields.add("quantity");
    openapiFields.add("receivedFailQty");
    openapiFields.add("receivedPassQty");
    openapiFields.add("shipping_amount");
    openapiFields.add("sku");
    openapiFields.add("status");
    openapiFields.add("tax_amount");
    openapiFields.add("total_cost");
    openapiFields.add("unit");
    openapiFields.add("updated_at");
    openapiFields.add("vendor");
    openapiFields.add("receive_method");
    openapiFields.add("type");
    openapiFields.add("blanket");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account");
    openapiRequiredFields.add("approved_datetime");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("num");
    openapiRequiredFields.add("pref_vendor");
    openapiRequiredFields.add("price");
    openapiRequiredFields.add("quantity");
    openapiRequiredFields.add("unit");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrderItem
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OrderItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderItem is not found in the empty JSON string", OrderItem.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrderItem.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("PO") != null && !jsonObj.get("PO").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `PO` to be an array in the JSON string but got `%s`", jsonObj.get("PO").toString()));
      }
      if ((jsonObj.get("accountCode") != null && !jsonObj.get("accountCode").isJsonNull()) && !jsonObj.get("accountCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountCode").toString()));
      }
      if (!jsonObj.get("approved_currency_rate").isJsonNull() && (jsonObj.get("approved_currency_rate") != null && !jsonObj.get("approved_currency_rate").isJsonNull()) && !jsonObj.get("approved_currency_rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approved_currency_rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approved_currency_rate").toString()));
      }
      if (!jsonObj.get("approved_price").isJsonNull() && (jsonObj.get("approved_price") != null && !jsonObj.get("approved_price").isJsonNull()) && !jsonObj.get("approved_price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approved_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approved_price").toString()));
      }
      if (!jsonObj.get("approved_quantity").isJsonNull() && (jsonObj.get("approved_quantity") != null && !jsonObj.get("approved_quantity").isJsonNull()) && !jsonObj.get("approved_quantity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approved_quantity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approved_quantity").toString()));
      }
      if (!jsonObj.get("approved_shipping_amount").isJsonNull() && (jsonObj.get("approved_shipping_amount") != null && !jsonObj.get("approved_shipping_amount").isJsonNull()) && !jsonObj.get("approved_shipping_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approved_shipping_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approved_shipping_amount").toString()));
      }
      if (!jsonObj.get("approved_tax_amount").isJsonNull() && (jsonObj.get("approved_tax_amount") != null && !jsonObj.get("approved_tax_amount").isJsonNull()) && !jsonObj.get("approved_tax_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approved_tax_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approved_tax_amount").toString()));
      }
      if ((jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) && !jsonObj.get("attachments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attachments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
      }
      if ((jsonObj.get("external_id") != null && !jsonObj.get("external_id").isJsonNull()) && !jsonObj.get("external_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("item_attachments") != null && !jsonObj.get("item_attachments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `item_attachments` to be an array in the JSON string but got `%s`", jsonObj.get("item_attachments").toString()));
      }
      if (!jsonObj.get("lineComment").isJsonNull() && (jsonObj.get("lineComment") != null && !jsonObj.get("lineComment").isJsonNull()) && !jsonObj.get("lineComment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineComment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineComment").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("num").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `num` to be a primitive type in the JSON string but got `%s`", jsonObj.get("num").toString()));
      }
      if ((jsonObj.get("po_note") != null && !jsonObj.get("po_note").isJsonNull()) && !jsonObj.get("po_note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `po_note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("po_note").toString()));
      }
      if (!jsonObj.get("price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("price").toString()));
      }
      if (!jsonObj.get("quantity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quantity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quantity").toString()));
      }
      if ((jsonObj.get("receivedFailQty") != null && !jsonObj.get("receivedFailQty").isJsonNull()) && !jsonObj.get("receivedFailQty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receivedFailQty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receivedFailQty").toString()));
      }
      if ((jsonObj.get("receivedPassQty") != null && !jsonObj.get("receivedPassQty").isJsonNull()) && !jsonObj.get("receivedPassQty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receivedPassQty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receivedPassQty").toString()));
      }
      if (!jsonObj.get("shipping_amount").isJsonNull() && (jsonObj.get("shipping_amount") != null && !jsonObj.get("shipping_amount").isJsonNull()) && !jsonObj.get("shipping_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_amount").toString()));
      }
      if ((jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) && !jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
      if (!jsonObj.get("tax_amount").isJsonNull() && (jsonObj.get("tax_amount") != null && !jsonObj.get("tax_amount").isJsonNull()) && !jsonObj.get("tax_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_amount").toString()));
      }
      if ((jsonObj.get("total_cost") != null && !jsonObj.get("total_cost").isJsonNull()) && !jsonObj.get("total_cost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_cost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_cost").toString()));
      }
      if (!jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
      if (!jsonObj.get("vendor").isJsonNull() && (jsonObj.get("vendor") != null && !jsonObj.get("vendor").isJsonNull()) && !jsonObj.get("vendor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor").toString()));
      }
      // validate the optional field `blanket`
      if (jsonObj.get("blanket") != null && !jsonObj.get("blanket").isJsonNull()) {
        BlanketOrderItemRead.validateJsonObject(jsonObj.getAsJsonObject("blanket"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderItem.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderItem>() {
           @Override
           public void write(JsonWriter out, OrderItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderItem read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             OrderItem instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderItem
  * @throws IOException if the JSON string is invalid with respect to OrderItem
  */
  public static OrderItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderItem.class);
  }

 /**
  * Convert an instance of OrderItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

