/*
 * Procurify API Documentation
 *  # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ApiNestedEditDeletePurchaseOrderDetail;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.OrderItemPurchaseEditRequest;
import com.konfigthis.client.model.POWithListPurchaseOrderDocs;
import com.konfigthis.client.model.PurchaseOrderBillingHistorySerializerList;
import com.konfigthis.client.model.PurchaseOrderDetailSerializerSingle;
import com.konfigthis.client.model.PurchaseOrderReadDocsSerializerSingle;
import com.konfigthis.client.model.PurchaseOrderUpdateRequest;
import com.konfigthis.client.model.PurchaseOrderUpdateSerializerSingle;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PurchaseOrdersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PurchaseOrdersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PurchaseOrdersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call closeOrderCall(Integer procurifyPO, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/purchase-orders/{procurify_PO}/close"
            .replace("{" + "procurify_PO" + "}", localVarApiClient.escapeString(procurifyPO.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call closeOrderValidateBeforeCall(Integer procurifyPO, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'procurifyPO' is set
        if (procurifyPO == null) {
            throw new ApiException("Missing the required parameter 'procurifyPO' when calling closeOrder(Async)");
        }

        return closeOrderCall(procurifyPO, format, _callback);

    }


    private ApiResponse<PurchaseOrderReadDocsSerializerSingle> closeOrderWithHttpInfo(Integer procurifyPO, String format) throws ApiException {
        okhttp3.Call localVarCall = closeOrderValidateBeforeCall(procurifyPO, format, null);
        Type localVarReturnType = new TypeToken<PurchaseOrderReadDocsSerializerSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call closeOrderAsync(Integer procurifyPO, String format, final ApiCallback<PurchaseOrderReadDocsSerializerSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = closeOrderValidateBeforeCall(procurifyPO, format, _callback);
        Type localVarReturnType = new TypeToken<PurchaseOrderReadDocsSerializerSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CloseOrderRequestBuilder {
        private final Integer procurifyPO;
        private String format;

        private CloseOrderRequestBuilder(Integer procurifyPO) {
            this.procurifyPO = procurifyPO;
        }

        /**
         * Set format
         * @param format  (optional)
         * @return CloseOrderRequestBuilder
         */
        public CloseOrderRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for closeOrder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return closeOrderCall(procurifyPO, format, _callback);
        }


        /**
         * Execute closeOrder request
         * @return PurchaseOrderReadDocsSerializerSingle
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PurchaseOrderReadDocsSerializerSingle execute() throws ApiException {
            ApiResponse<PurchaseOrderReadDocsSerializerSingle> localVarResp = closeOrderWithHttpInfo(procurifyPO, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute closeOrder request with HTTP info returned
         * @return ApiResponse&lt;PurchaseOrderReadDocsSerializerSingle&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PurchaseOrderReadDocsSerializerSingle> executeWithHttpInfo() throws ApiException {
            return closeOrderWithHttpInfo(procurifyPO, format);
        }

        /**
         * Execute closeOrder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PurchaseOrderReadDocsSerializerSingle> _callback) throws ApiException {
            return closeOrderAsync(procurifyPO, format, _callback);
        }
    }

    /**
     * Close a Purchase Order
     * 
     * @param procurifyPO A unique integer value identifying this po. (required)
     * @return CloseOrderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CloseOrderRequestBuilder closeOrder(Integer procurifyPO) throws IllegalArgumentException {
        if (procurifyPO == null) throw new IllegalArgumentException("\"procurifyPO\" is required but got null");
        return new CloseOrderRequestBuilder(procurifyPO);
    }
    private okhttp3.Call getByIdWithItemsCall(String id, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/purchase_orders/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdWithItemsValidateBeforeCall(String id, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getByIdWithItems(Async)");
        }

        return getByIdWithItemsCall(id, format, _callback);

    }


    private ApiResponse<ApiNestedEditDeletePurchaseOrderDetail> getByIdWithItemsWithHttpInfo(String id, String format) throws ApiException {
        okhttp3.Call localVarCall = getByIdWithItemsValidateBeforeCall(id, format, null);
        Type localVarReturnType = new TypeToken<ApiNestedEditDeletePurchaseOrderDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdWithItemsAsync(String id, String format, final ApiCallback<ApiNestedEditDeletePurchaseOrderDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdWithItemsValidateBeforeCall(id, format, _callback);
        Type localVarReturnType = new TypeToken<ApiNestedEditDeletePurchaseOrderDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdWithItemsRequestBuilder {
        private final String id;
        private String format;

        private GetByIdWithItemsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set format
         * @param format  (optional)
         * @return GetByIdWithItemsRequestBuilder
         */
        public GetByIdWithItemsRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for getByIdWithItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdWithItemsCall(id, format, _callback);
        }


        /**
         * Execute getByIdWithItems request
         * @return ApiNestedEditDeletePurchaseOrderDetail
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiNestedEditDeletePurchaseOrderDetail execute() throws ApiException {
            ApiResponse<ApiNestedEditDeletePurchaseOrderDetail> localVarResp = getByIdWithItemsWithHttpInfo(id, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByIdWithItems request with HTTP info returned
         * @return ApiResponse&lt;ApiNestedEditDeletePurchaseOrderDetail&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApiNestedEditDeletePurchaseOrderDetail> executeWithHttpInfo() throws ApiException {
            return getByIdWithItemsWithHttpInfo(id, format);
        }

        /**
         * Execute getByIdWithItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApiNestedEditDeletePurchaseOrderDetail> _callback) throws ApiException {
            return getByIdWithItemsAsync(id, format, _callback);
        }
    }

    /**
     * Get Purchase Order by ID (with items)
     * **Purchase Order State Codes**  | Order Type          | Code      | |---------------------|-----------| | PURCHASED           | 0         | | CANCELLED           | 1         | | (legacy code)       | 2         | | CLOSED              | 3         | | PAID                | 4         | | REOPENED            | 5         |
     * @param id Procurify PO or UUID (required)
     * @return GetByIdWithItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdWithItemsRequestBuilder getByIdWithItems(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetByIdWithItemsRequestBuilder(id);
    }
    private okhttp3.Call getByRoleAndStatusCall(String role, String status, Integer contract, LocalDate date0, LocalDate date1, LocalDate expiryDate0, LocalDate expiryDate1, Boolean hasBlanketOrderItems, LocalDate modifiedDate0, LocalDate modifiedDate1, String orderBy, Integer page, Integer pageSize, Integer prefVendor, LocalDate promiseDate0, LocalDate promiseDate1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/purchase_orders/{role}/{status}"
            .replace("{" + "role" + "}", localVarApiClient.escapeString(role.toString()))
            .replace("{" + "status" + "}", localVarApiClient.escapeString(status.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contract != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contract", contract));
        }

        if (date0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_0", date0));
        }

        if (date1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_1", date1));
        }

        if (expiryDate0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expiry_date_0", expiryDate0));
        }

        if (expiryDate1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expiry_date_1", expiryDate1));
        }

        if (hasBlanketOrderItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_blanket_order_items", hasBlanketOrderItems));
        }

        if (modifiedDate0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_date_0", modifiedDate0));
        }

        if (modifiedDate1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_date_1", modifiedDate1));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (prefVendor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pref_vendor", prefVendor));
        }

        if (promiseDate0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("promise_date_0", promiseDate0));
        }

        if (promiseDate1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("promise_date_1", promiseDate1));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByRoleAndStatusValidateBeforeCall(String role, String status, Integer contract, LocalDate date0, LocalDate date1, LocalDate expiryDate0, LocalDate expiryDate1, Boolean hasBlanketOrderItems, LocalDate modifiedDate0, LocalDate modifiedDate1, String orderBy, Integer page, Integer pageSize, Integer prefVendor, LocalDate promiseDate0, LocalDate promiseDate1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'role' is set
        if (role == null) {
            throw new ApiException("Missing the required parameter 'role' when calling getByRoleAndStatus(Async)");
        }

        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling getByRoleAndStatus(Async)");
        }

        return getByRoleAndStatusCall(role, status, contract, date0, date1, expiryDate0, expiryDate1, hasBlanketOrderItems, modifiedDate0, modifiedDate1, orderBy, page, pageSize, prefVendor, promiseDate0, promiseDate1, _callback);

    }


    private ApiResponse<POWithListPurchaseOrderDocs> getByRoleAndStatusWithHttpInfo(String role, String status, Integer contract, LocalDate date0, LocalDate date1, LocalDate expiryDate0, LocalDate expiryDate1, Boolean hasBlanketOrderItems, LocalDate modifiedDate0, LocalDate modifiedDate1, String orderBy, Integer page, Integer pageSize, Integer prefVendor, LocalDate promiseDate0, LocalDate promiseDate1) throws ApiException {
        okhttp3.Call localVarCall = getByRoleAndStatusValidateBeforeCall(role, status, contract, date0, date1, expiryDate0, expiryDate1, hasBlanketOrderItems, modifiedDate0, modifiedDate1, orderBy, page, pageSize, prefVendor, promiseDate0, promiseDate1, null);
        Type localVarReturnType = new TypeToken<POWithListPurchaseOrderDocs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByRoleAndStatusAsync(String role, String status, Integer contract, LocalDate date0, LocalDate date1, LocalDate expiryDate0, LocalDate expiryDate1, Boolean hasBlanketOrderItems, LocalDate modifiedDate0, LocalDate modifiedDate1, String orderBy, Integer page, Integer pageSize, Integer prefVendor, LocalDate promiseDate0, LocalDate promiseDate1, final ApiCallback<POWithListPurchaseOrderDocs> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByRoleAndStatusValidateBeforeCall(role, status, contract, date0, date1, expiryDate0, expiryDate1, hasBlanketOrderItems, modifiedDate0, modifiedDate1, orderBy, page, pageSize, prefVendor, promiseDate0, promiseDate1, _callback);
        Type localVarReturnType = new TypeToken<POWithListPurchaseOrderDocs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByRoleAndStatusRequestBuilder {
        private final String role;
        private final String status;
        private Integer contract;
        private LocalDate date0;
        private LocalDate date1;
        private LocalDate expiryDate0;
        private LocalDate expiryDate1;
        private Boolean hasBlanketOrderItems;
        private LocalDate modifiedDate0;
        private LocalDate modifiedDate1;
        private String orderBy;
        private Integer page;
        private Integer pageSize;
        private Integer prefVendor;
        private LocalDate promiseDate0;
        private LocalDate promiseDate1;

        private GetByRoleAndStatusRequestBuilder(String role, String status) {
            this.role = role;
            this.status = status;
        }

        /**
         * Set contract
         * @param contract Contract (optional)
         * @return GetByRoleAndStatusRequestBuilder
         */
        public GetByRoleAndStatusRequestBuilder contract(Integer contract) {
            this.contract = contract;
            return this;
        }
        
        /**
         * Set date0
         * @param date0 YYYY-MM-DD (start date): Filter POs by Created Date range (optional)
         * @return GetByRoleAndStatusRequestBuilder
         */
        public GetByRoleAndStatusRequestBuilder date0(LocalDate date0) {
            this.date0 = date0;
            return this;
        }
        
        /**
         * Set date1
         * @param date1 YYYY-MM-DD (end date): Filter POs by Created Date range (optional)
         * @return GetByRoleAndStatusRequestBuilder
         */
        public GetByRoleAndStatusRequestBuilder date1(LocalDate date1) {
            this.date1 = date1;
            return this;
        }
        
        /**
         * Set expiryDate0
         * @param expiryDate0 Expiry Date (optional)
         * @return GetByRoleAndStatusRequestBuilder
         */
        public GetByRoleAndStatusRequestBuilder expiryDate0(LocalDate expiryDate0) {
            this.expiryDate0 = expiryDate0;
            return this;
        }
        
        /**
         * Set expiryDate1
         * @param expiryDate1 Expiry Date (optional)
         * @return GetByRoleAndStatusRequestBuilder
         */
        public GetByRoleAndStatusRequestBuilder expiryDate1(LocalDate expiryDate1) {
            this.expiryDate1 = expiryDate1;
            return this;
        }
        
        /**
         * Set hasBlanketOrderItems
         * @param hasBlanketOrderItems  (optional)
         * @return GetByRoleAndStatusRequestBuilder
         */
        public GetByRoleAndStatusRequestBuilder hasBlanketOrderItems(Boolean hasBlanketOrderItems) {
            this.hasBlanketOrderItems = hasBlanketOrderItems;
            return this;
        }
        
        /**
         * Set modifiedDate0
         * @param modifiedDate0 YYYY-MM-DD (start date): Filter POs by Last Modified Date range (optional)
         * @return GetByRoleAndStatusRequestBuilder
         */
        public GetByRoleAndStatusRequestBuilder modifiedDate0(LocalDate modifiedDate0) {
            this.modifiedDate0 = modifiedDate0;
            return this;
        }
        
        /**
         * Set modifiedDate1
         * @param modifiedDate1 YYYY-MM-DD (end date): Filter POs by Last Modified Date range (optional)
         * @return GetByRoleAndStatusRequestBuilder
         */
        public GetByRoleAndStatusRequestBuilder modifiedDate1(LocalDate modifiedDate1) {
            this.modifiedDate1 = modifiedDate1;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy Sort by field (optional)
         * @return GetByRoleAndStatusRequestBuilder
         */
        public GetByRoleAndStatusRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return GetByRoleAndStatusRequestBuilder
         */
        public GetByRoleAndStatusRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize  (optional)
         * @return GetByRoleAndStatusRequestBuilder
         */
        public GetByRoleAndStatusRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set prefVendor
         * @param prefVendor ID of Vendor (optional)
         * @return GetByRoleAndStatusRequestBuilder
         */
        public GetByRoleAndStatusRequestBuilder prefVendor(Integer prefVendor) {
            this.prefVendor = prefVendor;
            return this;
        }
        
        /**
         * Set promiseDate0
         * @param promiseDate0 YYYY-MM-DD (start date): Filter POs by Promise Date range (optional)
         * @return GetByRoleAndStatusRequestBuilder
         */
        public GetByRoleAndStatusRequestBuilder promiseDate0(LocalDate promiseDate0) {
            this.promiseDate0 = promiseDate0;
            return this;
        }
        
        /**
         * Set promiseDate1
         * @param promiseDate1 YYYY-MM-DD (end date): Filter POs by Promise Date range (optional)
         * @return GetByRoleAndStatusRequestBuilder
         */
        public GetByRoleAndStatusRequestBuilder promiseDate1(LocalDate promiseDate1) {
            this.promiseDate1 = promiseDate1;
            return this;
        }
        
        /**
         * Build call for getByRoleAndStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByRoleAndStatusCall(role, status, contract, date0, date1, expiryDate0, expiryDate1, hasBlanketOrderItems, modifiedDate0, modifiedDate1, orderBy, page, pageSize, prefVendor, promiseDate0, promiseDate1, _callback);
        }


        /**
         * Execute getByRoleAndStatus request
         * @return POWithListPurchaseOrderDocs
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public POWithListPurchaseOrderDocs execute() throws ApiException {
            ApiResponse<POWithListPurchaseOrderDocs> localVarResp = getByRoleAndStatusWithHttpInfo(role, status, contract, date0, date1, expiryDate0, expiryDate1, hasBlanketOrderItems, modifiedDate0, modifiedDate1, orderBy, page, pageSize, prefVendor, promiseDate0, promiseDate1);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByRoleAndStatus request with HTTP info returned
         * @return ApiResponse&lt;POWithListPurchaseOrderDocs&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<POWithListPurchaseOrderDocs> executeWithHttpInfo() throws ApiException {
            return getByRoleAndStatusWithHttpInfo(role, status, contract, date0, date1, expiryDate0, expiryDate1, hasBlanketOrderItems, modifiedDate0, modifiedDate1, orderBy, page, pageSize, prefVendor, promiseDate0, promiseDate1);
        }

        /**
         * Execute getByRoleAndStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<POWithListPurchaseOrderDocs> _callback) throws ApiException {
            return getByRoleAndStatusAsync(role, status, contract, date0, date1, expiryDate0, expiryDate1, hasBlanketOrderItems, modifiedDate0, modifiedDate1, orderBy, page, pageSize, prefVendor, promiseDate0, promiseDate1, _callback);
        }
    }

    /**
     * Get Purchase Orders by Role &amp; Status
     * 
     * @param role  (required)
     * @param status  (required)
     * @return GetByRoleAndStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetByRoleAndStatusRequestBuilder getByRoleAndStatus(String role, String status) throws IllegalArgumentException {
        if (role == null) throw new IllegalArgumentException("\"role\" is required but got null");
            

        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        return new GetByRoleAndStatusRequestBuilder(role, status);
    }
    private okhttp3.Call reopenProcurifyPoCall(Integer procurifyPO, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/purchase-orders/{procurify_PO}/reopen"
            .replace("{" + "procurify_PO" + "}", localVarApiClient.escapeString(procurifyPO.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reopenProcurifyPoValidateBeforeCall(Integer procurifyPO, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'procurifyPO' is set
        if (procurifyPO == null) {
            throw new ApiException("Missing the required parameter 'procurifyPO' when calling reopenProcurifyPo(Async)");
        }

        return reopenProcurifyPoCall(procurifyPO, format, _callback);

    }


    private ApiResponse<Void> reopenProcurifyPoWithHttpInfo(Integer procurifyPO, String format) throws ApiException {
        okhttp3.Call localVarCall = reopenProcurifyPoValidateBeforeCall(procurifyPO, format, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call reopenProcurifyPoAsync(Integer procurifyPO, String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reopenProcurifyPoValidateBeforeCall(procurifyPO, format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ReopenProcurifyPoRequestBuilder {
        private final Integer procurifyPO;
        private String format;

        private ReopenProcurifyPoRequestBuilder(Integer procurifyPO) {
            this.procurifyPO = procurifyPO;
        }

        /**
         * Set format
         * @param format  (optional)
         * @return ReopenProcurifyPoRequestBuilder
         */
        public ReopenProcurifyPoRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for reopenProcurifyPo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> No response body </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return reopenProcurifyPoCall(procurifyPO, format, _callback);
        }


        /**
         * Execute reopenProcurifyPo request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> No response body </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            reopenProcurifyPoWithHttpInfo(procurifyPO, format);
        }

        /**
         * Execute reopenProcurifyPo request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> No response body </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return reopenProcurifyPoWithHttpInfo(procurifyPO, format);
        }

        /**
         * Execute reopenProcurifyPo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> No response body </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return reopenProcurifyPoAsync(procurifyPO, format, _callback);
        }
    }

    /**
     * Reopen a Purchase Order
     * 
     * @param procurifyPO A unique integer value identifying this po. (required)
     * @return ReopenProcurifyPoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public ReopenProcurifyPoRequestBuilder reopenProcurifyPo(Integer procurifyPO) throws IllegalArgumentException {
        if (procurifyPO == null) throw new IllegalArgumentException("\"procurifyPO\" is required but got null");
        return new ReopenProcurifyPoRequestBuilder(procurifyPO);
    }
    private okhttp3.Call reviseProcurifyPOCall(Integer procurifyPO, PurchaseOrderUpdateRequest purchaseOrderUpdateRequest, String confirmDuplicateExternalPoNumber, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = purchaseOrderUpdateRequest;

        // create path and map variables
        String localVarPath = "/api/v2/purchase_order/revise/{procurify_PO}"
            .replace("{" + "procurify_PO" + "}", localVarApiClient.escapeString(procurifyPO.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (confirmDuplicateExternalPoNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("confirm_duplicate_external_po_number", confirmDuplicateExternalPoNumber));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "",
            "application/xml",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviseProcurifyPOValidateBeforeCall(Integer procurifyPO, PurchaseOrderUpdateRequest purchaseOrderUpdateRequest, String confirmDuplicateExternalPoNumber, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'procurifyPO' is set
        if (procurifyPO == null) {
            throw new ApiException("Missing the required parameter 'procurifyPO' when calling reviseProcurifyPO(Async)");
        }

        // verify the required parameter 'purchaseOrderUpdateRequest' is set
        if (purchaseOrderUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'purchaseOrderUpdateRequest' when calling reviseProcurifyPO(Async)");
        }

        return reviseProcurifyPOCall(procurifyPO, purchaseOrderUpdateRequest, confirmDuplicateExternalPoNumber, format, _callback);

    }


    private ApiResponse<PurchaseOrderDetailSerializerSingle> reviseProcurifyPOWithHttpInfo(Integer procurifyPO, PurchaseOrderUpdateRequest purchaseOrderUpdateRequest, String confirmDuplicateExternalPoNumber, String format) throws ApiException {
        okhttp3.Call localVarCall = reviseProcurifyPOValidateBeforeCall(procurifyPO, purchaseOrderUpdateRequest, confirmDuplicateExternalPoNumber, format, null);
        Type localVarReturnType = new TypeToken<PurchaseOrderDetailSerializerSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call reviseProcurifyPOAsync(Integer procurifyPO, PurchaseOrderUpdateRequest purchaseOrderUpdateRequest, String confirmDuplicateExternalPoNumber, String format, final ApiCallback<PurchaseOrderDetailSerializerSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviseProcurifyPOValidateBeforeCall(procurifyPO, purchaseOrderUpdateRequest, confirmDuplicateExternalPoNumber, format, _callback);
        Type localVarReturnType = new TypeToken<PurchaseOrderDetailSerializerSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReviseProcurifyPORequestBuilder {
        private final Integer version;
        private final List<OrderItemPurchaseEditRequest> orderItems;
        private final String buyerName;
        private final String buyerContact;
        private final String buyerAddressLineOne;
        private final String buyerPostalCode;
        private final String buyerCity;
        private final String buyerCountry;
        private final Integer buyerAddress;
        private final String receiverName;
        private final String receiverContact;
        private final String receiverAddressLineOne;
        private final String receiverPostalCode;
        private final String receiverCity;
        private final String receiverCountry;
        private final Integer receiverAddress;
        private final OffsetDateTime promiseDate;
        private final Map<String, Object> discount;
        private final Map<String, Object> tax;
        private final Integer procurifyPO;
        private List<Map<String, Object>> customFields;
        private String poNum;
        private String buyerStateProvince;
        private String comment;
        private String receiverStateProvince;
        private BigDecimal freight;
        private BigDecimal other;
        private String disclaimerDescription;
        private String disclaimerText;
        private Integer paymentTermRef;
        private Integer shippingTermRef;
        private Integer paymentMethodRef;
        private Integer shippingMethodRef;
        private Integer creditcard;
        private OffsetDateTime expiryDate;
        private Integer contract;
        private String confirmDuplicateExternalPoNumber;
        private String format;

        private ReviseProcurifyPORequestBuilder(Integer version, List<OrderItemPurchaseEditRequest> orderItems, String buyerName, String buyerContact, String buyerAddressLineOne, String buyerPostalCode, String buyerCity, String buyerCountry, Integer buyerAddress, String receiverName, String receiverContact, String receiverAddressLineOne, String receiverPostalCode, String receiverCity, String receiverCountry, Integer receiverAddress, OffsetDateTime promiseDate, Map<String, Object> discount, Map<String, Object> tax, Integer procurifyPO) {
            this.version = version;
            this.orderItems = orderItems;
            this.buyerName = buyerName;
            this.buyerContact = buyerContact;
            this.buyerAddressLineOne = buyerAddressLineOne;
            this.buyerPostalCode = buyerPostalCode;
            this.buyerCity = buyerCity;
            this.buyerCountry = buyerCountry;
            this.buyerAddress = buyerAddress;
            this.receiverName = receiverName;
            this.receiverContact = receiverContact;
            this.receiverAddressLineOne = receiverAddressLineOne;
            this.receiverPostalCode = receiverPostalCode;
            this.receiverCity = receiverCity;
            this.receiverCountry = receiverCountry;
            this.receiverAddress = receiverAddress;
            this.promiseDate = promiseDate;
            this.discount = discount;
            this.tax = tax;
            this.procurifyPO = procurifyPO;
        }

        /**
         * Set customFields
         * @param customFields  (optional)
         * @return ReviseProcurifyPORequestBuilder
         */
        public ReviseProcurifyPORequestBuilder customFields(List<Map<String, Object>> customFields) {
            this.customFields = customFields;
            return this;
        }
        
        /**
         * Set poNum
         * @param poNum  (optional)
         * @return ReviseProcurifyPORequestBuilder
         */
        public ReviseProcurifyPORequestBuilder poNum(String poNum) {
            this.poNum = poNum;
            return this;
        }
        
        /**
         * Set buyerStateProvince
         * @param buyerStateProvince  (optional)
         * @return ReviseProcurifyPORequestBuilder
         */
        public ReviseProcurifyPORequestBuilder buyerStateProvince(String buyerStateProvince) {
            this.buyerStateProvince = buyerStateProvince;
            return this;
        }
        
        /**
         * Set comment
         * @param comment  (optional)
         * @return ReviseProcurifyPORequestBuilder
         */
        public ReviseProcurifyPORequestBuilder comment(String comment) {
            this.comment = comment;
            return this;
        }
        
        /**
         * Set receiverStateProvince
         * @param receiverStateProvince  (optional)
         * @return ReviseProcurifyPORequestBuilder
         */
        public ReviseProcurifyPORequestBuilder receiverStateProvince(String receiverStateProvince) {
            this.receiverStateProvince = receiverStateProvince;
            return this;
        }
        
        /**
         * Set freight
         * @param freight  (optional)
         * @return ReviseProcurifyPORequestBuilder
         */
        public ReviseProcurifyPORequestBuilder freight(BigDecimal freight) {
            this.freight = freight;
            return this;
        }
        
        /**
         * Set other
         * @param other  (optional)
         * @return ReviseProcurifyPORequestBuilder
         */
        public ReviseProcurifyPORequestBuilder other(BigDecimal other) {
            this.other = other;
            return this;
        }
        
        /**
         * Set disclaimerDescription
         * @param disclaimerDescription  (optional)
         * @return ReviseProcurifyPORequestBuilder
         */
        public ReviseProcurifyPORequestBuilder disclaimerDescription(String disclaimerDescription) {
            this.disclaimerDescription = disclaimerDescription;
            return this;
        }
        
        /**
         * Set disclaimerText
         * @param disclaimerText  (optional)
         * @return ReviseProcurifyPORequestBuilder
         */
        public ReviseProcurifyPORequestBuilder disclaimerText(String disclaimerText) {
            this.disclaimerText = disclaimerText;
            return this;
        }
        
        /**
         * Set paymentTermRef
         * @param paymentTermRef  (optional)
         * @return ReviseProcurifyPORequestBuilder
         */
        public ReviseProcurifyPORequestBuilder paymentTermRef(Integer paymentTermRef) {
            this.paymentTermRef = paymentTermRef;
            return this;
        }
        
        /**
         * Set shippingTermRef
         * @param shippingTermRef  (optional)
         * @return ReviseProcurifyPORequestBuilder
         */
        public ReviseProcurifyPORequestBuilder shippingTermRef(Integer shippingTermRef) {
            this.shippingTermRef = shippingTermRef;
            return this;
        }
        
        /**
         * Set paymentMethodRef
         * @param paymentMethodRef  (optional)
         * @return ReviseProcurifyPORequestBuilder
         */
        public ReviseProcurifyPORequestBuilder paymentMethodRef(Integer paymentMethodRef) {
            this.paymentMethodRef = paymentMethodRef;
            return this;
        }
        
        /**
         * Set shippingMethodRef
         * @param shippingMethodRef  (optional)
         * @return ReviseProcurifyPORequestBuilder
         */
        public ReviseProcurifyPORequestBuilder shippingMethodRef(Integer shippingMethodRef) {
            this.shippingMethodRef = shippingMethodRef;
            return this;
        }
        
        /**
         * Set creditcard
         * @param creditcard  (optional)
         * @return ReviseProcurifyPORequestBuilder
         */
        public ReviseProcurifyPORequestBuilder creditcard(Integer creditcard) {
            this.creditcard = creditcard;
            return this;
        }
        
        /**
         * Set expiryDate
         * @param expiryDate  (optional)
         * @return ReviseProcurifyPORequestBuilder
         */
        public ReviseProcurifyPORequestBuilder expiryDate(OffsetDateTime expiryDate) {
            this.expiryDate = expiryDate;
            return this;
        }
        
        /**
         * Set contract
         * @param contract  (optional)
         * @return ReviseProcurifyPORequestBuilder
         */
        public ReviseProcurifyPORequestBuilder contract(Integer contract) {
            this.contract = contract;
            return this;
        }
        
        /**
         * Set confirmDuplicateExternalPoNumber
         * @param confirmDuplicateExternalPoNumber Mechanism to check for duplicate custom PO number. If there is a duplicate, API will fail unless this query param is set to True. (optional, default to False)
         * @return ReviseProcurifyPORequestBuilder
         */
        public ReviseProcurifyPORequestBuilder confirmDuplicateExternalPoNumber(String confirmDuplicateExternalPoNumber) {
            this.confirmDuplicateExternalPoNumber = confirmDuplicateExternalPoNumber;
            return this;
        }
        
        /**
         * Set format
         * @param format  (optional)
         * @return ReviseProcurifyPORequestBuilder
         */
        public ReviseProcurifyPORequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for reviseProcurifyPO
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PurchaseOrderUpdateRequest purchaseOrderUpdateRequest = buildBodyParams();
            return reviseProcurifyPOCall(procurifyPO, purchaseOrderUpdateRequest, confirmDuplicateExternalPoNumber, format, _callback);
        }

        private PurchaseOrderUpdateRequest buildBodyParams() {
            PurchaseOrderUpdateRequest purchaseOrderUpdateRequest = new PurchaseOrderUpdateRequest();
            purchaseOrderUpdateRequest.version(this.version);
            purchaseOrderUpdateRequest.orderItems(this.orderItems);
            purchaseOrderUpdateRequest.customFields(this.customFields);
            purchaseOrderUpdateRequest.poNum(this.poNum);
            purchaseOrderUpdateRequest.buyerName(this.buyerName);
            purchaseOrderUpdateRequest.buyerContact(this.buyerContact);
            purchaseOrderUpdateRequest.buyerAddressLineOne(this.buyerAddressLineOne);
            purchaseOrderUpdateRequest.buyerPostalCode(this.buyerPostalCode);
            purchaseOrderUpdateRequest.buyerCity(this.buyerCity);
            purchaseOrderUpdateRequest.buyerStateProvince(this.buyerStateProvince);
            purchaseOrderUpdateRequest.buyerCountry(this.buyerCountry);
            purchaseOrderUpdateRequest.buyerAddress(this.buyerAddress);
            purchaseOrderUpdateRequest.comment(this.comment);
            purchaseOrderUpdateRequest.receiverName(this.receiverName);
            purchaseOrderUpdateRequest.receiverContact(this.receiverContact);
            purchaseOrderUpdateRequest.receiverAddressLineOne(this.receiverAddressLineOne);
            purchaseOrderUpdateRequest.receiverPostalCode(this.receiverPostalCode);
            purchaseOrderUpdateRequest.receiverCity(this.receiverCity);
            purchaseOrderUpdateRequest.receiverStateProvince(this.receiverStateProvince);
            purchaseOrderUpdateRequest.receiverCountry(this.receiverCountry);
            purchaseOrderUpdateRequest.receiverAddress(this.receiverAddress);
            purchaseOrderUpdateRequest.promiseDate(this.promiseDate);
            purchaseOrderUpdateRequest.freight(this.freight);
            purchaseOrderUpdateRequest.discount(this.discount);
            purchaseOrderUpdateRequest.tax(this.tax);
            purchaseOrderUpdateRequest.other(this.other);
            purchaseOrderUpdateRequest.disclaimerDescription(this.disclaimerDescription);
            purchaseOrderUpdateRequest.disclaimerText(this.disclaimerText);
            purchaseOrderUpdateRequest.paymentTermRef(this.paymentTermRef);
            purchaseOrderUpdateRequest.shippingTermRef(this.shippingTermRef);
            purchaseOrderUpdateRequest.paymentMethodRef(this.paymentMethodRef);
            purchaseOrderUpdateRequest.shippingMethodRef(this.shippingMethodRef);
            purchaseOrderUpdateRequest.creditcard(this.creditcard);
            purchaseOrderUpdateRequest.expiryDate(this.expiryDate);
            purchaseOrderUpdateRequest.contract(this.contract);
            return purchaseOrderUpdateRequest;
        }

        /**
         * Execute reviseProcurifyPO request
         * @return PurchaseOrderDetailSerializerSingle
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public PurchaseOrderDetailSerializerSingle execute() throws ApiException {
            PurchaseOrderUpdateRequest purchaseOrderUpdateRequest = buildBodyParams();
            ApiResponse<PurchaseOrderDetailSerializerSingle> localVarResp = reviseProcurifyPOWithHttpInfo(procurifyPO, purchaseOrderUpdateRequest, confirmDuplicateExternalPoNumber, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute reviseProcurifyPO request with HTTP info returned
         * @return ApiResponse&lt;PurchaseOrderDetailSerializerSingle&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<PurchaseOrderDetailSerializerSingle> executeWithHttpInfo() throws ApiException {
            PurchaseOrderUpdateRequest purchaseOrderUpdateRequest = buildBodyParams();
            return reviseProcurifyPOWithHttpInfo(procurifyPO, purchaseOrderUpdateRequest, confirmDuplicateExternalPoNumber, format);
        }

        /**
         * Execute reviseProcurifyPO request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<PurchaseOrderDetailSerializerSingle> _callback) throws ApiException {
            PurchaseOrderUpdateRequest purchaseOrderUpdateRequest = buildBodyParams();
            return reviseProcurifyPOAsync(procurifyPO, purchaseOrderUpdateRequest, confirmDuplicateExternalPoNumber, format, _callback);
        }
    }

    /**
     * Revise a Purchase Order
     * Deprecated method for revising a purchase order. Pending removable after November 16, 2023. Use &#x60;PUT&#x60; on &#x60;/api/v3/purchase-orders/{id}&#x60; instead.
     * @param procurifyPO A unique integer value identifying this po. (required)
     * @param purchaseOrderUpdateRequest  (required)
     * @return ReviseProcurifyPORequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ReviseProcurifyPORequestBuilder reviseProcurifyPO(Integer version, List<OrderItemPurchaseEditRequest> orderItems, String buyerName, String buyerContact, String buyerAddressLineOne, String buyerPostalCode, String buyerCity, String buyerCountry, Integer buyerAddress, String receiverName, String receiverContact, String receiverAddressLineOne, String receiverPostalCode, String receiverCity, String receiverCountry, Integer receiverAddress, OffsetDateTime promiseDate, Map<String, Object> discount, Map<String, Object> tax, Integer procurifyPO) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
        if (orderItems == null) throw new IllegalArgumentException("\"orderItems\" is required but got null");
        if (buyerName == null) throw new IllegalArgumentException("\"buyerName\" is required but got null");
            if (buyerName != null && buyerName.length() < 1) {
              throw new IllegalArgumentException("Invalid value for buyerName. Length must be greater than or equal to 1.");
            }

        if (buyerContact == null) throw new IllegalArgumentException("\"buyerContact\" is required but got null");
            if (buyerContact != null && buyerContact.length() < 1) {
              throw new IllegalArgumentException("Invalid value for buyerContact. Length must be greater than or equal to 1.");
            }

        if (buyerAddressLineOne == null) throw new IllegalArgumentException("\"buyerAddressLineOne\" is required but got null");
            if (buyerAddressLineOne != null && buyerAddressLineOne.length() < 1) {
              throw new IllegalArgumentException("Invalid value for buyerAddressLineOne. Length must be greater than or equal to 1.");
            }

        if (buyerPostalCode == null) throw new IllegalArgumentException("\"buyerPostalCode\" is required but got null");
            if (buyerPostalCode != null && buyerPostalCode.length() < 1) {
              throw new IllegalArgumentException("Invalid value for buyerPostalCode. Length must be greater than or equal to 1.");
            }

        if (buyerCity == null) throw new IllegalArgumentException("\"buyerCity\" is required but got null");
            if (buyerCity != null && buyerCity.length() < 1) {
              throw new IllegalArgumentException("Invalid value for buyerCity. Length must be greater than or equal to 1.");
            }

        if (buyerCountry == null) throw new IllegalArgumentException("\"buyerCountry\" is required but got null");
            if (buyerCountry != null && buyerCountry.length() < 1) {
              throw new IllegalArgumentException("Invalid value for buyerCountry. Length must be greater than or equal to 1.");
            }

        if (buyerAddress == null) throw new IllegalArgumentException("\"buyerAddress\" is required but got null");
        if (receiverName == null) throw new IllegalArgumentException("\"receiverName\" is required but got null");
            if (receiverName != null && receiverName.length() < 1) {
              throw new IllegalArgumentException("Invalid value for receiverName. Length must be greater than or equal to 1.");
            }

        if (receiverContact == null) throw new IllegalArgumentException("\"receiverContact\" is required but got null");
            if (receiverContact != null && receiverContact.length() < 1) {
              throw new IllegalArgumentException("Invalid value for receiverContact. Length must be greater than or equal to 1.");
            }

        if (receiverAddressLineOne == null) throw new IllegalArgumentException("\"receiverAddressLineOne\" is required but got null");
            if (receiverAddressLineOne != null && receiverAddressLineOne.length() < 1) {
              throw new IllegalArgumentException("Invalid value for receiverAddressLineOne. Length must be greater than or equal to 1.");
            }

        if (receiverPostalCode == null) throw new IllegalArgumentException("\"receiverPostalCode\" is required but got null");
            if (receiverPostalCode != null && receiverPostalCode.length() < 1) {
              throw new IllegalArgumentException("Invalid value for receiverPostalCode. Length must be greater than or equal to 1.");
            }

        if (receiverCity == null) throw new IllegalArgumentException("\"receiverCity\" is required but got null");
            if (receiverCity != null && receiverCity.length() < 1) {
              throw new IllegalArgumentException("Invalid value for receiverCity. Length must be greater than or equal to 1.");
            }

        if (receiverCountry == null) throw new IllegalArgumentException("\"receiverCountry\" is required but got null");
            if (receiverCountry != null && receiverCountry.length() < 1) {
              throw new IllegalArgumentException("Invalid value for receiverCountry. Length must be greater than or equal to 1.");
            }

        if (receiverAddress == null) throw new IllegalArgumentException("\"receiverAddress\" is required but got null");
        if (promiseDate == null) throw new IllegalArgumentException("\"promiseDate\" is required but got null");
        if (discount == null) throw new IllegalArgumentException("\"discount\" is required but got null");
        if (tax == null) throw new IllegalArgumentException("\"tax\" is required but got null");
        if (procurifyPO == null) throw new IllegalArgumentException("\"procurifyPO\" is required but got null");
        return new ReviseProcurifyPORequestBuilder(version, orderItems, buyerName, buyerContact, buyerAddressLineOne, buyerPostalCode, buyerCity, buyerCountry, buyerAddress, receiverName, receiverContact, receiverAddressLineOne, receiverPostalCode, receiverCity, receiverCountry, receiverAddress, promiseDate, discount, tax, procurifyPO);
    }
    private okhttp3.Call updateOrderCall(Integer procurifyPO, PurchaseOrderUpdateRequest purchaseOrderUpdateRequest, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = purchaseOrderUpdateRequest;

        // create path and map variables
        String localVarPath = "/api/v3/purchase-orders/{procurify_PO}"
            .replace("{" + "procurify_PO" + "}", localVarApiClient.escapeString(procurifyPO.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "",
            "application/xml",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrderValidateBeforeCall(Integer procurifyPO, PurchaseOrderUpdateRequest purchaseOrderUpdateRequest, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'procurifyPO' is set
        if (procurifyPO == null) {
            throw new ApiException("Missing the required parameter 'procurifyPO' when calling updateOrder(Async)");
        }

        // verify the required parameter 'purchaseOrderUpdateRequest' is set
        if (purchaseOrderUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'purchaseOrderUpdateRequest' when calling updateOrder(Async)");
        }

        return updateOrderCall(procurifyPO, purchaseOrderUpdateRequest, format, _callback);

    }


    private ApiResponse<PurchaseOrderUpdateSerializerSingle> updateOrderWithHttpInfo(Integer procurifyPO, PurchaseOrderUpdateRequest purchaseOrderUpdateRequest, String format) throws ApiException {
        okhttp3.Call localVarCall = updateOrderValidateBeforeCall(procurifyPO, purchaseOrderUpdateRequest, format, null);
        Type localVarReturnType = new TypeToken<PurchaseOrderUpdateSerializerSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateOrderAsync(Integer procurifyPO, PurchaseOrderUpdateRequest purchaseOrderUpdateRequest, String format, final ApiCallback<PurchaseOrderUpdateSerializerSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrderValidateBeforeCall(procurifyPO, purchaseOrderUpdateRequest, format, _callback);
        Type localVarReturnType = new TypeToken<PurchaseOrderUpdateSerializerSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateOrderRequestBuilder {
        private final Integer version;
        private final List<OrderItemPurchaseEditRequest> orderItems;
        private final String buyerName;
        private final String buyerContact;
        private final String buyerAddressLineOne;
        private final String buyerPostalCode;
        private final String buyerCity;
        private final String buyerCountry;
        private final Integer buyerAddress;
        private final String receiverName;
        private final String receiverContact;
        private final String receiverAddressLineOne;
        private final String receiverPostalCode;
        private final String receiverCity;
        private final String receiverCountry;
        private final Integer receiverAddress;
        private final OffsetDateTime promiseDate;
        private final Map<String, Object> discount;
        private final Map<String, Object> tax;
        private final Integer procurifyPO;
        private List<Map<String, Object>> customFields;
        private String poNum;
        private String buyerStateProvince;
        private String comment;
        private String receiverStateProvince;
        private BigDecimal freight;
        private BigDecimal other;
        private String disclaimerDescription;
        private String disclaimerText;
        private Integer paymentTermRef;
        private Integer shippingTermRef;
        private Integer paymentMethodRef;
        private Integer shippingMethodRef;
        private Integer creditcard;
        private OffsetDateTime expiryDate;
        private Integer contract;
        private String format;

        private UpdateOrderRequestBuilder(Integer version, List<OrderItemPurchaseEditRequest> orderItems, String buyerName, String buyerContact, String buyerAddressLineOne, String buyerPostalCode, String buyerCity, String buyerCountry, Integer buyerAddress, String receiverName, String receiverContact, String receiverAddressLineOne, String receiverPostalCode, String receiverCity, String receiverCountry, Integer receiverAddress, OffsetDateTime promiseDate, Map<String, Object> discount, Map<String, Object> tax, Integer procurifyPO) {
            this.version = version;
            this.orderItems = orderItems;
            this.buyerName = buyerName;
            this.buyerContact = buyerContact;
            this.buyerAddressLineOne = buyerAddressLineOne;
            this.buyerPostalCode = buyerPostalCode;
            this.buyerCity = buyerCity;
            this.buyerCountry = buyerCountry;
            this.buyerAddress = buyerAddress;
            this.receiverName = receiverName;
            this.receiverContact = receiverContact;
            this.receiverAddressLineOne = receiverAddressLineOne;
            this.receiverPostalCode = receiverPostalCode;
            this.receiverCity = receiverCity;
            this.receiverCountry = receiverCountry;
            this.receiverAddress = receiverAddress;
            this.promiseDate = promiseDate;
            this.discount = discount;
            this.tax = tax;
            this.procurifyPO = procurifyPO;
        }

        /**
         * Set customFields
         * @param customFields  (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder customFields(List<Map<String, Object>> customFields) {
            this.customFields = customFields;
            return this;
        }
        
        /**
         * Set poNum
         * @param poNum  (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder poNum(String poNum) {
            this.poNum = poNum;
            return this;
        }
        
        /**
         * Set buyerStateProvince
         * @param buyerStateProvince  (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder buyerStateProvince(String buyerStateProvince) {
            this.buyerStateProvince = buyerStateProvince;
            return this;
        }
        
        /**
         * Set comment
         * @param comment  (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder comment(String comment) {
            this.comment = comment;
            return this;
        }
        
        /**
         * Set receiverStateProvince
         * @param receiverStateProvince  (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder receiverStateProvince(String receiverStateProvince) {
            this.receiverStateProvince = receiverStateProvince;
            return this;
        }
        
        /**
         * Set freight
         * @param freight  (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder freight(BigDecimal freight) {
            this.freight = freight;
            return this;
        }
        
        /**
         * Set other
         * @param other  (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder other(BigDecimal other) {
            this.other = other;
            return this;
        }
        
        /**
         * Set disclaimerDescription
         * @param disclaimerDescription  (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder disclaimerDescription(String disclaimerDescription) {
            this.disclaimerDescription = disclaimerDescription;
            return this;
        }
        
        /**
         * Set disclaimerText
         * @param disclaimerText  (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder disclaimerText(String disclaimerText) {
            this.disclaimerText = disclaimerText;
            return this;
        }
        
        /**
         * Set paymentTermRef
         * @param paymentTermRef  (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder paymentTermRef(Integer paymentTermRef) {
            this.paymentTermRef = paymentTermRef;
            return this;
        }
        
        /**
         * Set shippingTermRef
         * @param shippingTermRef  (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder shippingTermRef(Integer shippingTermRef) {
            this.shippingTermRef = shippingTermRef;
            return this;
        }
        
        /**
         * Set paymentMethodRef
         * @param paymentMethodRef  (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder paymentMethodRef(Integer paymentMethodRef) {
            this.paymentMethodRef = paymentMethodRef;
            return this;
        }
        
        /**
         * Set shippingMethodRef
         * @param shippingMethodRef  (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder shippingMethodRef(Integer shippingMethodRef) {
            this.shippingMethodRef = shippingMethodRef;
            return this;
        }
        
        /**
         * Set creditcard
         * @param creditcard  (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder creditcard(Integer creditcard) {
            this.creditcard = creditcard;
            return this;
        }
        
        /**
         * Set expiryDate
         * @param expiryDate  (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder expiryDate(OffsetDateTime expiryDate) {
            this.expiryDate = expiryDate;
            return this;
        }
        
        /**
         * Set contract
         * @param contract  (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder contract(Integer contract) {
            this.contract = contract;
            return this;
        }
        
        /**
         * Set format
         * @param format  (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for updateOrder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PurchaseOrderUpdateRequest purchaseOrderUpdateRequest = buildBodyParams();
            return updateOrderCall(procurifyPO, purchaseOrderUpdateRequest, format, _callback);
        }

        private PurchaseOrderUpdateRequest buildBodyParams() {
            PurchaseOrderUpdateRequest purchaseOrderUpdateRequest = new PurchaseOrderUpdateRequest();
            purchaseOrderUpdateRequest.version(this.version);
            purchaseOrderUpdateRequest.orderItems(this.orderItems);
            purchaseOrderUpdateRequest.customFields(this.customFields);
            purchaseOrderUpdateRequest.poNum(this.poNum);
            purchaseOrderUpdateRequest.buyerName(this.buyerName);
            purchaseOrderUpdateRequest.buyerContact(this.buyerContact);
            purchaseOrderUpdateRequest.buyerAddressLineOne(this.buyerAddressLineOne);
            purchaseOrderUpdateRequest.buyerPostalCode(this.buyerPostalCode);
            purchaseOrderUpdateRequest.buyerCity(this.buyerCity);
            purchaseOrderUpdateRequest.buyerStateProvince(this.buyerStateProvince);
            purchaseOrderUpdateRequest.buyerCountry(this.buyerCountry);
            purchaseOrderUpdateRequest.buyerAddress(this.buyerAddress);
            purchaseOrderUpdateRequest.comment(this.comment);
            purchaseOrderUpdateRequest.receiverName(this.receiverName);
            purchaseOrderUpdateRequest.receiverContact(this.receiverContact);
            purchaseOrderUpdateRequest.receiverAddressLineOne(this.receiverAddressLineOne);
            purchaseOrderUpdateRequest.receiverPostalCode(this.receiverPostalCode);
            purchaseOrderUpdateRequest.receiverCity(this.receiverCity);
            purchaseOrderUpdateRequest.receiverStateProvince(this.receiverStateProvince);
            purchaseOrderUpdateRequest.receiverCountry(this.receiverCountry);
            purchaseOrderUpdateRequest.receiverAddress(this.receiverAddress);
            purchaseOrderUpdateRequest.promiseDate(this.promiseDate);
            purchaseOrderUpdateRequest.freight(this.freight);
            purchaseOrderUpdateRequest.discount(this.discount);
            purchaseOrderUpdateRequest.tax(this.tax);
            purchaseOrderUpdateRequest.other(this.other);
            purchaseOrderUpdateRequest.disclaimerDescription(this.disclaimerDescription);
            purchaseOrderUpdateRequest.disclaimerText(this.disclaimerText);
            purchaseOrderUpdateRequest.paymentTermRef(this.paymentTermRef);
            purchaseOrderUpdateRequest.shippingTermRef(this.shippingTermRef);
            purchaseOrderUpdateRequest.paymentMethodRef(this.paymentMethodRef);
            purchaseOrderUpdateRequest.shippingMethodRef(this.shippingMethodRef);
            purchaseOrderUpdateRequest.creditcard(this.creditcard);
            purchaseOrderUpdateRequest.expiryDate(this.expiryDate);
            purchaseOrderUpdateRequest.contract(this.contract);
            return purchaseOrderUpdateRequest;
        }

        /**
         * Execute updateOrder request
         * @return PurchaseOrderUpdateSerializerSingle
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PurchaseOrderUpdateSerializerSingle execute() throws ApiException {
            PurchaseOrderUpdateRequest purchaseOrderUpdateRequest = buildBodyParams();
            ApiResponse<PurchaseOrderUpdateSerializerSingle> localVarResp = updateOrderWithHttpInfo(procurifyPO, purchaseOrderUpdateRequest, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateOrder request with HTTP info returned
         * @return ApiResponse&lt;PurchaseOrderUpdateSerializerSingle&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PurchaseOrderUpdateSerializerSingle> executeWithHttpInfo() throws ApiException {
            PurchaseOrderUpdateRequest purchaseOrderUpdateRequest = buildBodyParams();
            return updateOrderWithHttpInfo(procurifyPO, purchaseOrderUpdateRequest, format);
        }

        /**
         * Execute updateOrder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PurchaseOrderUpdateSerializerSingle> _callback) throws ApiException {
            PurchaseOrderUpdateRequest purchaseOrderUpdateRequest = buildBodyParams();
            return updateOrderAsync(procurifyPO, purchaseOrderUpdateRequest, format, _callback);
        }
    }

    /**
     * Update a Purchase Order
     * 
     * @param procurifyPO A unique integer value identifying this po. (required)
     * @param purchaseOrderUpdateRequest  (required)
     * @return UpdateOrderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateOrderRequestBuilder updateOrder(Integer version, List<OrderItemPurchaseEditRequest> orderItems, String buyerName, String buyerContact, String buyerAddressLineOne, String buyerPostalCode, String buyerCity, String buyerCountry, Integer buyerAddress, String receiverName, String receiverContact, String receiverAddressLineOne, String receiverPostalCode, String receiverCity, String receiverCountry, Integer receiverAddress, OffsetDateTime promiseDate, Map<String, Object> discount, Map<String, Object> tax, Integer procurifyPO) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
        if (orderItems == null) throw new IllegalArgumentException("\"orderItems\" is required but got null");
        if (buyerName == null) throw new IllegalArgumentException("\"buyerName\" is required but got null");
            if (buyerName != null && buyerName.length() < 1) {
              throw new IllegalArgumentException("Invalid value for buyerName. Length must be greater than or equal to 1.");
            }

        if (buyerContact == null) throw new IllegalArgumentException("\"buyerContact\" is required but got null");
            if (buyerContact != null && buyerContact.length() < 1) {
              throw new IllegalArgumentException("Invalid value for buyerContact. Length must be greater than or equal to 1.");
            }

        if (buyerAddressLineOne == null) throw new IllegalArgumentException("\"buyerAddressLineOne\" is required but got null");
            if (buyerAddressLineOne != null && buyerAddressLineOne.length() < 1) {
              throw new IllegalArgumentException("Invalid value for buyerAddressLineOne. Length must be greater than or equal to 1.");
            }

        if (buyerPostalCode == null) throw new IllegalArgumentException("\"buyerPostalCode\" is required but got null");
            if (buyerPostalCode != null && buyerPostalCode.length() < 1) {
              throw new IllegalArgumentException("Invalid value for buyerPostalCode. Length must be greater than or equal to 1.");
            }

        if (buyerCity == null) throw new IllegalArgumentException("\"buyerCity\" is required but got null");
            if (buyerCity != null && buyerCity.length() < 1) {
              throw new IllegalArgumentException("Invalid value for buyerCity. Length must be greater than or equal to 1.");
            }

        if (buyerCountry == null) throw new IllegalArgumentException("\"buyerCountry\" is required but got null");
            if (buyerCountry != null && buyerCountry.length() < 1) {
              throw new IllegalArgumentException("Invalid value for buyerCountry. Length must be greater than or equal to 1.");
            }

        if (buyerAddress == null) throw new IllegalArgumentException("\"buyerAddress\" is required but got null");
        if (receiverName == null) throw new IllegalArgumentException("\"receiverName\" is required but got null");
            if (receiverName != null && receiverName.length() < 1) {
              throw new IllegalArgumentException("Invalid value for receiverName. Length must be greater than or equal to 1.");
            }

        if (receiverContact == null) throw new IllegalArgumentException("\"receiverContact\" is required but got null");
            if (receiverContact != null && receiverContact.length() < 1) {
              throw new IllegalArgumentException("Invalid value for receiverContact. Length must be greater than or equal to 1.");
            }

        if (receiverAddressLineOne == null) throw new IllegalArgumentException("\"receiverAddressLineOne\" is required but got null");
            if (receiverAddressLineOne != null && receiverAddressLineOne.length() < 1) {
              throw new IllegalArgumentException("Invalid value for receiverAddressLineOne. Length must be greater than or equal to 1.");
            }

        if (receiverPostalCode == null) throw new IllegalArgumentException("\"receiverPostalCode\" is required but got null");
            if (receiverPostalCode != null && receiverPostalCode.length() < 1) {
              throw new IllegalArgumentException("Invalid value for receiverPostalCode. Length must be greater than or equal to 1.");
            }

        if (receiverCity == null) throw new IllegalArgumentException("\"receiverCity\" is required but got null");
            if (receiverCity != null && receiverCity.length() < 1) {
              throw new IllegalArgumentException("Invalid value for receiverCity. Length must be greater than or equal to 1.");
            }

        if (receiverCountry == null) throw new IllegalArgumentException("\"receiverCountry\" is required but got null");
            if (receiverCountry != null && receiverCountry.length() < 1) {
              throw new IllegalArgumentException("Invalid value for receiverCountry. Length must be greater than or equal to 1.");
            }

        if (receiverAddress == null) throw new IllegalArgumentException("\"receiverAddress\" is required but got null");
        if (promiseDate == null) throw new IllegalArgumentException("\"promiseDate\" is required but got null");
        if (discount == null) throw new IllegalArgumentException("\"discount\" is required but got null");
        if (tax == null) throw new IllegalArgumentException("\"tax\" is required but got null");
        if (procurifyPO == null) throw new IllegalArgumentException("\"procurifyPO\" is required but got null");
        return new UpdateOrderRequestBuilder(version, orderItems, buyerName, buyerContact, buyerAddressLineOne, buyerPostalCode, buyerCity, buyerCountry, buyerAddress, receiverName, receiverContact, receiverAddressLineOne, receiverPostalCode, receiverCity, receiverCountry, receiverAddress, promiseDate, discount, tax, procurifyPO);
    }
    private okhttp3.Call viewBillingHistoryCall(String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/purchase-orders/billing-history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call viewBillingHistoryValidateBeforeCall(String format, final ApiCallback _callback) throws ApiException {
        return viewBillingHistoryCall(format, _callback);

    }


    private ApiResponse<PurchaseOrderBillingHistorySerializerList> viewBillingHistoryWithHttpInfo(String format) throws ApiException {
        okhttp3.Call localVarCall = viewBillingHistoryValidateBeforeCall(format, null);
        Type localVarReturnType = new TypeToken<PurchaseOrderBillingHistorySerializerList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call viewBillingHistoryAsync(String format, final ApiCallback<PurchaseOrderBillingHistorySerializerList> _callback) throws ApiException {

        okhttp3.Call localVarCall = viewBillingHistoryValidateBeforeCall(format, _callback);
        Type localVarReturnType = new TypeToken<PurchaseOrderBillingHistorySerializerList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ViewBillingHistoryRequestBuilder {
        private String format;

        private ViewBillingHistoryRequestBuilder() {
        }

        /**
         * Set format
         * @param format  (optional)
         * @return ViewBillingHistoryRequestBuilder
         */
        public ViewBillingHistoryRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for viewBillingHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return viewBillingHistoryCall(format, _callback);
        }


        /**
         * Execute viewBillingHistory request
         * @return PurchaseOrderBillingHistorySerializerList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PurchaseOrderBillingHistorySerializerList execute() throws ApiException {
            ApiResponse<PurchaseOrderBillingHistorySerializerList> localVarResp = viewBillingHistoryWithHttpInfo(format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute viewBillingHistory request with HTTP info returned
         * @return ApiResponse&lt;PurchaseOrderBillingHistorySerializerList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PurchaseOrderBillingHistorySerializerList> executeWithHttpInfo() throws ApiException {
            return viewBillingHistoryWithHttpInfo(format);
        }

        /**
         * Execute viewBillingHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PurchaseOrderBillingHistorySerializerList> _callback) throws ApiException {
            return viewBillingHistoryAsync(format, _callback);
        }
    }

    /**
     * View billing history of a Purchase Order
     * 
     * @return ViewBillingHistoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ViewBillingHistoryRequestBuilder viewBillingHistory() throws IllegalArgumentException {
        return new ViewBillingHistoryRequestBuilder();
    }
}
