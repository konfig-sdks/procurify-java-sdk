/*
 * Procurify API Documentation
 *  # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AccountCodeCreateRequest;
import com.konfigthis.client.model.AccountCodeReadSerializerSingleCreate;
import com.konfigthis.client.model.AccountCodeReadSerializerSingleUpdate;
import com.konfigthis.client.model.AccountCodeUpdateRequest;
import com.konfigthis.client.model.ExpenseTypeEnum;
import com.konfigthis.client.model.PaginatedAccountCodeReadList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AccountCodesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountCodesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AccountCodesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createAccountCodesCall(AccountCodeCreateRequest accountCodeCreateRequest, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountCodeCreateRequest;

        // create path and map variables
        String localVarPath = "/api/v3/account-codes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "",
            "application/xml",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAccountCodesValidateBeforeCall(AccountCodeCreateRequest accountCodeCreateRequest, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountCodeCreateRequest' is set
        if (accountCodeCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'accountCodeCreateRequest' when calling createAccountCodes(Async)");
        }

        return createAccountCodesCall(accountCodeCreateRequest, format, _callback);

    }


    private ApiResponse<AccountCodeReadSerializerSingleCreate> createAccountCodesWithHttpInfo(AccountCodeCreateRequest accountCodeCreateRequest, String format) throws ApiException {
        okhttp3.Call localVarCall = createAccountCodesValidateBeforeCall(accountCodeCreateRequest, format, null);
        Type localVarReturnType = new TypeToken<AccountCodeReadSerializerSingleCreate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAccountCodesAsync(AccountCodeCreateRequest accountCodeCreateRequest, String format, final ApiCallback<AccountCodeReadSerializerSingleCreate> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAccountCodesValidateBeforeCall(accountCodeCreateRequest, format, _callback);
        Type localVarReturnType = new TypeToken<AccountCodeReadSerializerSingleCreate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateAccountCodesRequestBuilder {
        private final String description;
        private final String code;
        private Integer parent;
        private ExpenseTypeEnum accountType;
        private List<Integer> departments;
        private String format;

        private CreateAccountCodesRequestBuilder(String description, String code) {
            this.description = description;
            this.code = code;
        }

        /**
         * Set parent
         * @param parent  (optional)
         * @return CreateAccountCodesRequestBuilder
         */
        public CreateAccountCodesRequestBuilder parent(Integer parent) {
            this.parent = parent;
            return this;
        }
        
        /**
         * Set accountType
         * @param accountType  (optional)
         * @return CreateAccountCodesRequestBuilder
         */
        public CreateAccountCodesRequestBuilder accountType(ExpenseTypeEnum accountType) {
            this.accountType = accountType;
            return this;
        }
        
        /**
         * Set departments
         * @param departments  (optional)
         * @return CreateAccountCodesRequestBuilder
         */
        public CreateAccountCodesRequestBuilder departments(List<Integer> departments) {
            this.departments = departments;
            return this;
        }
        
        /**
         * Set format
         * @param format  (optional)
         * @return CreateAccountCodesRequestBuilder
         */
        public CreateAccountCodesRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for createAccountCodes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountCodeCreateRequest accountCodeCreateRequest = buildBodyParams();
            return createAccountCodesCall(accountCodeCreateRequest, format, _callback);
        }

        private AccountCodeCreateRequest buildBodyParams() {
            AccountCodeCreateRequest accountCodeCreateRequest = new AccountCodeCreateRequest();
            accountCodeCreateRequest.description(this.description);
            accountCodeCreateRequest.code(this.code);
            accountCodeCreateRequest.parent(this.parent);
            accountCodeCreateRequest.accountType(this.accountType);
            accountCodeCreateRequest.departments(this.departments);
            return accountCodeCreateRequest;
        }

        /**
         * Execute createAccountCodes request
         * @return AccountCodeReadSerializerSingleCreate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public AccountCodeReadSerializerSingleCreate execute() throws ApiException {
            AccountCodeCreateRequest accountCodeCreateRequest = buildBodyParams();
            ApiResponse<AccountCodeReadSerializerSingleCreate> localVarResp = createAccountCodesWithHttpInfo(accountCodeCreateRequest, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createAccountCodes request with HTTP info returned
         * @return ApiResponse&lt;AccountCodeReadSerializerSingleCreate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccountCodeReadSerializerSingleCreate> executeWithHttpInfo() throws ApiException {
            AccountCodeCreateRequest accountCodeCreateRequest = buildBodyParams();
            return createAccountCodesWithHttpInfo(accountCodeCreateRequest, format);
        }

        /**
         * Execute createAccountCodes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccountCodeReadSerializerSingleCreate> _callback) throws ApiException {
            AccountCodeCreateRequest accountCodeCreateRequest = buildBodyParams();
            return createAccountCodesAsync(accountCodeCreateRequest, format, _callback);
        }
    }

    /**
     * Create Account Codes
     * **Account Code Types**  | Account Code Type | Type | |-------------------|------| | ASSETS            | 0    | | LIABILITY         | 1    | | EXPENSE           | 2    | | INCOME            | 3    | | EQUITY            | 4    | | OTHER             | 5    |
     * @param accountCodeCreateRequest  (required)
     * @return CreateAccountCodesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccountCodesRequestBuilder createAccountCodes(String description, String code) throws IllegalArgumentException {
        if (description == null) throw new IllegalArgumentException("\"description\" is required but got null");
            if (description != null && description.length() < 1) {
              throw new IllegalArgumentException("Invalid value for description. Length must be greater than or equal to 1.");
            }

        if (code == null) throw new IllegalArgumentException("\"code\" is required but got null");
            if (code != null && code.length() < 1) {
              throw new IllegalArgumentException("Invalid value for code. Length must be greater than or equal to 1.");
            }

        return new CreateAccountCodesRequestBuilder(description, code);
    }
    private okhttp3.Call listCall(Boolean active, String code, String format, Boolean isParent, String orderBy, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/account-codes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (isParent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_parent", isParent));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(Boolean active, String code, String format, Boolean isParent, String orderBy, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        return listCall(active, code, format, isParent, orderBy, page, pageSize, search, _callback);

    }


    private ApiResponse<PaginatedAccountCodeReadList> listWithHttpInfo(Boolean active, String code, String format, Boolean isParent, String orderBy, Integer page, Integer pageSize, String search) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(active, code, format, isParent, orderBy, page, pageSize, search, null);
        Type localVarReturnType = new TypeToken<PaginatedAccountCodeReadList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(Boolean active, String code, String format, Boolean isParent, String orderBy, Integer page, Integer pageSize, String search, final ApiCallback<PaginatedAccountCodeReadList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(active, code, format, isParent, orderBy, page, pageSize, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedAccountCodeReadList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private Boolean active;
        private String code;
        private String format;
        private Boolean isParent;
        private String orderBy;
        private Integer page;
        private Integer pageSize;
        private String search;

        private ListRequestBuilder() {
        }

        /**
         * Set active
         * @param active  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Set code
         * @param code  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder code(String code) {
            this.code = code;
            return this;
        }
        
        /**
         * Set format
         * @param format  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set isParent
         * @param isParent  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder isParent(Boolean isParent) {
            this.isParent = isParent;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy Which field to use when ordering the results. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set page
         * @param page A page number within the paginated result set. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Number of results to return per page. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set search
         * @param search A search term. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(active, code, format, isParent, orderBy, page, pageSize, search, _callback);
        }


        /**
         * Execute list request
         * @return PaginatedAccountCodeReadList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PaginatedAccountCodeReadList execute() throws ApiException {
            ApiResponse<PaginatedAccountCodeReadList> localVarResp = listWithHttpInfo(active, code, format, isParent, orderBy, page, pageSize, search);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;PaginatedAccountCodeReadList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaginatedAccountCodeReadList> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(active, code, format, isParent, orderBy, page, pageSize, search);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaginatedAccountCodeReadList> _callback) throws ApiException {
            return listAsync(active, code, format, isParent, orderBy, page, pageSize, search, _callback);
        }
    }

    /**
     * Get Account Codes
     * **Account Code Types**  | Account Code Type | Type | |-------------------|------| | ASSETS            | 0    | | LIABILITY         | 1    | | EXPENSE           | 2    | | INCOME            | 3    | | EQUITY            | 4    | | OTHER             | 5    |
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call updateAccountCodeCall(Integer id, AccountCodeUpdateRequest accountCodeUpdateRequest, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountCodeUpdateRequest;

        // create path and map variables
        String localVarPath = "/api/v3/account-codes/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "",
            "application/xml",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccountCodeValidateBeforeCall(Integer id, AccountCodeUpdateRequest accountCodeUpdateRequest, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateAccountCode(Async)");
        }

        // verify the required parameter 'accountCodeUpdateRequest' is set
        if (accountCodeUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'accountCodeUpdateRequest' when calling updateAccountCode(Async)");
        }

        return updateAccountCodeCall(id, accountCodeUpdateRequest, format, _callback);

    }


    private ApiResponse<AccountCodeReadSerializerSingleUpdate> updateAccountCodeWithHttpInfo(Integer id, AccountCodeUpdateRequest accountCodeUpdateRequest, String format) throws ApiException {
        okhttp3.Call localVarCall = updateAccountCodeValidateBeforeCall(id, accountCodeUpdateRequest, format, null);
        Type localVarReturnType = new TypeToken<AccountCodeReadSerializerSingleUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAccountCodeAsync(Integer id, AccountCodeUpdateRequest accountCodeUpdateRequest, String format, final ApiCallback<AccountCodeReadSerializerSingleUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccountCodeValidateBeforeCall(id, accountCodeUpdateRequest, format, _callback);
        Type localVarReturnType = new TypeToken<AccountCodeReadSerializerSingleUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateAccountCodeRequestBuilder {
        private final String description;
        private final String code;
        private final Integer id;
        private ExpenseTypeEnum accountType;
        private String format;

        private UpdateAccountCodeRequestBuilder(String description, String code, Integer id) {
            this.description = description;
            this.code = code;
            this.id = id;
        }

        /**
         * Set accountType
         * @param accountType  (optional)
         * @return UpdateAccountCodeRequestBuilder
         */
        public UpdateAccountCodeRequestBuilder accountType(ExpenseTypeEnum accountType) {
            this.accountType = accountType;
            return this;
        }
        
        /**
         * Set format
         * @param format  (optional)
         * @return UpdateAccountCodeRequestBuilder
         */
        public UpdateAccountCodeRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for updateAccountCode
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountCodeUpdateRequest accountCodeUpdateRequest = buildBodyParams();
            return updateAccountCodeCall(id, accountCodeUpdateRequest, format, _callback);
        }

        private AccountCodeUpdateRequest buildBodyParams() {
            AccountCodeUpdateRequest accountCodeUpdateRequest = new AccountCodeUpdateRequest();
            accountCodeUpdateRequest.description(this.description);
            accountCodeUpdateRequest.code(this.code);
            accountCodeUpdateRequest.accountType(this.accountType);
            return accountCodeUpdateRequest;
        }

        /**
         * Execute updateAccountCode request
         * @return AccountCodeReadSerializerSingleUpdate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public AccountCodeReadSerializerSingleUpdate execute() throws ApiException {
            AccountCodeUpdateRequest accountCodeUpdateRequest = buildBodyParams();
            ApiResponse<AccountCodeReadSerializerSingleUpdate> localVarResp = updateAccountCodeWithHttpInfo(id, accountCodeUpdateRequest, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateAccountCode request with HTTP info returned
         * @return ApiResponse&lt;AccountCodeReadSerializerSingleUpdate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccountCodeReadSerializerSingleUpdate> executeWithHttpInfo() throws ApiException {
            AccountCodeUpdateRequest accountCodeUpdateRequest = buildBodyParams();
            return updateAccountCodeWithHttpInfo(id, accountCodeUpdateRequest, format);
        }

        /**
         * Execute updateAccountCode request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccountCodeReadSerializerSingleUpdate> _callback) throws ApiException {
            AccountCodeUpdateRequest accountCodeUpdateRequest = buildBodyParams();
            return updateAccountCodeAsync(id, accountCodeUpdateRequest, format, _callback);
        }
    }

    /**
     * Update Account Code
     * **Account Code Types**  | Account Code Type | Type | |-------------------|------| | ASSETS            | 0    | | LIABILITY         | 1    | | EXPENSE           | 2    | | INCOME            | 3    | | EQUITY            | 4    | | OTHER             | 5    |
     * @param id A unique integer value identifying this account code. (required)
     * @param accountCodeUpdateRequest  (required)
     * @return UpdateAccountCodeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAccountCodeRequestBuilder updateAccountCode(String description, String code, Integer id) throws IllegalArgumentException {
        if (description == null) throw new IllegalArgumentException("\"description\" is required but got null");
            if (description != null && description.length() < 1) {
              throw new IllegalArgumentException("Invalid value for description. Length must be greater than or equal to 1.");
            }

        if (code == null) throw new IllegalArgumentException("\"code\" is required but got null");
            if (code != null && code.length() < 1) {
              throw new IllegalArgumentException("Invalid value for code. Length must be greater than or equal to 1.");
            }

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new UpdateAccountCodeRequestBuilder(description, code, id);
    }
}
