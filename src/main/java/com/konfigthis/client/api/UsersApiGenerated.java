/*
 * Procurify API Documentation
 *  # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.InviteFunctionalUserRequest;
import com.konfigthis.client.model.PaginatedUserProfileUnoptimizedList;
import com.konfigthis.client.model.UserProfileMeSerializerSingle;
import com.konfigthis.client.model.UserProfileUnoptimizedSerializerList;
import com.konfigthis.client.model.UserProfileUnoptimizedSerializerSingle;
import com.konfigthis.client.model.UserProfileUpsertRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UsersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCall(List<InviteFunctionalUserRequest> inviteFunctionalUserRequest, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inviteFunctionalUserRequest;

        // create path and map variables
        String localVarPath = "/api/v3/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "",
            "application/xml",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(List<InviteFunctionalUserRequest> inviteFunctionalUserRequest, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inviteFunctionalUserRequest' is set
        if (inviteFunctionalUserRequest == null) {
            throw new ApiException("Missing the required parameter 'inviteFunctionalUserRequest' when calling create(Async)");
        }

        return createCall(inviteFunctionalUserRequest, format, _callback);

    }


    private ApiResponse<UserProfileUnoptimizedSerializerList> createWithHttpInfo(List<InviteFunctionalUserRequest> inviteFunctionalUserRequest, String format) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(inviteFunctionalUserRequest, format, null);
        Type localVarReturnType = new TypeToken<UserProfileUnoptimizedSerializerList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAsync(List<InviteFunctionalUserRequest> inviteFunctionalUserRequest, String format, final ApiCallback<UserProfileUnoptimizedSerializerList> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(inviteFunctionalUserRequest, format, _callback);
        Type localVarReturnType = new TypeToken<UserProfileUnoptimizedSerializerList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRequestBuilder {
        private String format;
        private List<InviteFunctionalUserRequest> inviteFunctionalUserRequest;

        private CreateRequestBuilder() {
        }

        /**
         * Set inviteFunctionalUserRequest
         * @param inviteFunctionalUserRequest  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder inviteFunctionalUserRequest(List<InviteFunctionalUserRequest> inviteFunctionalUserRequest) {
            this.inviteFunctionalUserRequest = inviteFunctionalUserRequest;
            return this;
        }

        /**
         * Set format
         * @param format  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for create
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<InviteFunctionalUserRequest> inviteFunctionalUserRequest = buildBodyParams();
            return createCall(inviteFunctionalUserRequest, format, _callback);
        }

        private List<InviteFunctionalUserRequest> buildBodyParams() {
            return this.inviteFunctionalUserRequest;
        }

        /**
         * Execute create request
         * @return UserProfileUnoptimizedSerializerList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public UserProfileUnoptimizedSerializerList execute() throws ApiException {
            List<InviteFunctionalUserRequest> inviteFunctionalUserRequest = buildBodyParams();
            ApiResponse<UserProfileUnoptimizedSerializerList> localVarResp = createWithHttpInfo(inviteFunctionalUserRequest, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute create request with HTTP info returned
         * @return ApiResponse&lt;UserProfileUnoptimizedSerializerList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserProfileUnoptimizedSerializerList> executeWithHttpInfo() throws ApiException {
            List<InviteFunctionalUserRequest> inviteFunctionalUserRequest = buildBodyParams();
            return createWithHttpInfo(inviteFunctionalUserRequest, format);
        }

        /**
         * Execute create request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserProfileUnoptimizedSerializerList> _callback) throws ApiException {
            List<InviteFunctionalUserRequest> inviteFunctionalUserRequest = buildBodyParams();
            return createAsync(inviteFunctionalUserRequest, format, _callback);
        }
    }

    /**
     * Create New User
     * 
     * @param inviteFunctionalUserRequest  (required)
     * @return CreateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateRequestBuilder create() throws IllegalArgumentException {
        return new CreateRequestBuilder();
    }
    private okhttp3.Call destroyCall(Integer id, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destroyValidateBeforeCall(Integer id, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling destroy(Async)");
        }

        return destroyCall(id, format, _callback);

    }


    private ApiResponse<Void> destroyWithHttpInfo(Integer id, String format) throws ApiException {
        okhttp3.Call localVarCall = destroyValidateBeforeCall(id, format, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call destroyAsync(Integer id, String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = destroyValidateBeforeCall(id, format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DestroyRequestBuilder {
        private final Integer id;
        private String format;

        private DestroyRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set format
         * @param format  (optional)
         * @return DestroyRequestBuilder
         */
        public DestroyRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for destroy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return destroyCall(id, format, _callback);
        }


        /**
         * Execute destroy request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            destroyWithHttpInfo(id, format);
        }

        /**
         * Execute destroy request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return destroyWithHttpInfo(id, format);
        }

        /**
         * Execute destroy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return destroyAsync(id, format, _callback);
        }
    }

    /**
     * Deactivate User
     * 
     * @param id A unique integer value identifying this user profile. (required)
     * @return DestroyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public DestroyRequestBuilder destroy(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new DestroyRequestBuilder(id);
    }
    private okhttp3.Call getLoggedInUserCall(String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/users/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLoggedInUserValidateBeforeCall(String format, final ApiCallback _callback) throws ApiException {
        return getLoggedInUserCall(format, _callback);

    }


    private ApiResponse<UserProfileMeSerializerSingle> getLoggedInUserWithHttpInfo(String format) throws ApiException {
        okhttp3.Call localVarCall = getLoggedInUserValidateBeforeCall(format, null);
        Type localVarReturnType = new TypeToken<UserProfileMeSerializerSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLoggedInUserAsync(String format, final ApiCallback<UserProfileMeSerializerSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLoggedInUserValidateBeforeCall(format, _callback);
        Type localVarReturnType = new TypeToken<UserProfileMeSerializerSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLoggedInUserRequestBuilder {
        private String format;

        private GetLoggedInUserRequestBuilder() {
        }

        /**
         * Set format
         * @param format  (optional)
         * @return GetLoggedInUserRequestBuilder
         */
        public GetLoggedInUserRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for getLoggedInUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLoggedInUserCall(format, _callback);
        }


        /**
         * Execute getLoggedInUser request
         * @return UserProfileMeSerializerSingle
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public UserProfileMeSerializerSingle execute() throws ApiException {
            ApiResponse<UserProfileMeSerializerSingle> localVarResp = getLoggedInUserWithHttpInfo(format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLoggedInUser request with HTTP info returned
         * @return ApiResponse&lt;UserProfileMeSerializerSingle&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserProfileMeSerializerSingle> executeWithHttpInfo() throws ApiException {
            return getLoggedInUserWithHttpInfo(format);
        }

        /**
         * Execute getLoggedInUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserProfileMeSerializerSingle> _callback) throws ApiException {
            return getLoggedInUserAsync(format, _callback);
        }
    }

    /**
     * Get Logged-in User
     * Get the logged in user account information
     * @return GetLoggedInUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetLoggedInUserRequestBuilder getLoggedInUser() throws IllegalArgumentException {
        return new GetLoggedInUserRequestBuilder();
    }
    private okhttp3.Call listCall(String format, Boolean isActive, String location, String orderBy, Integer page, Integer pageSize, Boolean pendingInvite, String permission, Double role, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (isActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_active", isActive));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pendingInvite != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pending_invite", pendingInvite));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String format, Boolean isActive, String location, String orderBy, Integer page, Integer pageSize, Boolean pendingInvite, String permission, Double role, String search, final ApiCallback _callback) throws ApiException {
        return listCall(format, isActive, location, orderBy, page, pageSize, pendingInvite, permission, role, search, _callback);

    }


    private ApiResponse<PaginatedUserProfileUnoptimizedList> listWithHttpInfo(String format, Boolean isActive, String location, String orderBy, Integer page, Integer pageSize, Boolean pendingInvite, String permission, Double role, String search) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(format, isActive, location, orderBy, page, pageSize, pendingInvite, permission, role, search, null);
        Type localVarReturnType = new TypeToken<PaginatedUserProfileUnoptimizedList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String format, Boolean isActive, String location, String orderBy, Integer page, Integer pageSize, Boolean pendingInvite, String permission, Double role, String search, final ApiCallback<PaginatedUserProfileUnoptimizedList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(format, isActive, location, orderBy, page, pageSize, pendingInvite, permission, role, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedUserProfileUnoptimizedList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private String format;
        private Boolean isActive;
        private String location;
        private String orderBy;
        private Integer page;
        private Integer pageSize;
        private Boolean pendingInvite;
        private String permission;
        private Double role;
        private String search;

        private ListRequestBuilder() {
        }

        /**
         * Set format
         * @param format  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set isActive
         * @param isActive  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder isActive(Boolean isActive) {
            this.isActive = isActive;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy Which field to use when ordering the results. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set page
         * @param page A page number within the paginated result set. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Number of results to return per page. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set pendingInvite
         * @param pendingInvite  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder pendingInvite(Boolean pendingInvite) {
            this.pendingInvite = pendingInvite;
            return this;
        }
        
        /**
         * Set permission
         * @param permission  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder permission(String permission) {
            this.permission = permission;
            return this;
        }
        
        /**
         * Set role
         * @param role  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder role(Double role) {
            this.role = role;
            return this;
        }
        
        /**
         * Set search
         * @param search A search term. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(format, isActive, location, orderBy, page, pageSize, pendingInvite, permission, role, search, _callback);
        }


        /**
         * Execute list request
         * @return PaginatedUserProfileUnoptimizedList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PaginatedUserProfileUnoptimizedList execute() throws ApiException {
            ApiResponse<PaginatedUserProfileUnoptimizedList> localVarResp = listWithHttpInfo(format, isActive, location, orderBy, page, pageSize, pendingInvite, permission, role, search);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;PaginatedUserProfileUnoptimizedList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaginatedUserProfileUnoptimizedList> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(format, isActive, location, orderBy, page, pageSize, pendingInvite, permission, role, search);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaginatedUserProfileUnoptimizedList> _callback) throws ApiException {
            return listAsync(format, isActive, location, orderBy, page, pageSize, pendingInvite, permission, role, search, _callback);
        }
    }

    /**
     * List Users
     * 
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call updateCall(Integer id, UserProfileUpsertRequest userProfileUpsertRequest, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userProfileUpsertRequest;

        // create path and map variables
        String localVarPath = "/api/v3/users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "",
            "application/xml",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateValidateBeforeCall(Integer id, UserProfileUpsertRequest userProfileUpsertRequest, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling update(Async)");
        }

        // verify the required parameter 'userProfileUpsertRequest' is set
        if (userProfileUpsertRequest == null) {
            throw new ApiException("Missing the required parameter 'userProfileUpsertRequest' when calling update(Async)");
        }

        return updateCall(id, userProfileUpsertRequest, format, _callback);

    }


    private ApiResponse<UserProfileUnoptimizedSerializerSingle> updateWithHttpInfo(Integer id, UserProfileUpsertRequest userProfileUpsertRequest, String format) throws ApiException {
        okhttp3.Call localVarCall = updateValidateBeforeCall(id, userProfileUpsertRequest, format, null);
        Type localVarReturnType = new TypeToken<UserProfileUnoptimizedSerializerSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAsync(Integer id, UserProfileUpsertRequest userProfileUpsertRequest, String format, final ApiCallback<UserProfileUnoptimizedSerializerSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateValidateBeforeCall(id, userProfileUpsertRequest, format, _callback);
        Type localVarReturnType = new TypeToken<UserProfileUnoptimizedSerializerSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRequestBuilder {
        private final String email;
        private final String firstName;
        private final String lastName;
        private final Integer location;
        private final Integer department;
        private final Integer id;
        private Integer id;
        private Integer user;
        private String position;
        private String phone;
        private String profileImage;
        private Boolean isSsoEnabled;
        private Boolean markForSkip;
        private Boolean markForDelete;
        private String format;

        private UpdateRequestBuilder(String email, String firstName, String lastName, Integer location, Integer department, Integer id) {
            this.email = email;
            this.firstName = firstName;
            this.lastName = lastName;
            this.location = location;
            this.department = department;
            this.id = id;
        }

        /**
         * Set id
         * @param id  (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder id(Integer id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set user
         * @param user  (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder user(Integer user) {
            this.user = user;
            return this;
        }
        
        /**
         * Set position
         * @param position  (optional, default to )
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder position(String position) {
            this.position = position;
            return this;
        }
        
        /**
         * Set phone
         * @param phone  (optional, default to )
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Set profileImage
         * @param profileImage  (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder profileImage(String profileImage) {
            this.profileImage = profileImage;
            return this;
        }
        
        /**
         * Set isSsoEnabled
         * @param isSsoEnabled  (optional, default to false)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder isSsoEnabled(Boolean isSsoEnabled) {
            this.isSsoEnabled = isSsoEnabled;
            return this;
        }
        
        /**
         * Set markForSkip
         * @param markForSkip  (optional, default to false)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder markForSkip(Boolean markForSkip) {
            this.markForSkip = markForSkip;
            return this;
        }
        
        /**
         * Set markForDelete
         * @param markForDelete  (optional, default to false)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder markForDelete(Boolean markForDelete) {
            this.markForDelete = markForDelete;
            return this;
        }
        
        /**
         * Set format
         * @param format  (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for update
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UserProfileUpsertRequest userProfileUpsertRequest = buildBodyParams();
            return updateCall(id, userProfileUpsertRequest, format, _callback);
        }

        private UserProfileUpsertRequest buildBodyParams() {
            UserProfileUpsertRequest userProfileUpsertRequest = new UserProfileUpsertRequest();
            userProfileUpsertRequest.id(this.id);
            userProfileUpsertRequest.user(this.user);
            userProfileUpsertRequest.email(this.email);
            userProfileUpsertRequest.firstName(this.firstName);
            userProfileUpsertRequest.lastName(this.lastName);
            userProfileUpsertRequest.location(this.location);
            userProfileUpsertRequest.department(this.department);
            userProfileUpsertRequest.position(this.position);
            userProfileUpsertRequest.phone(this.phone);
            userProfileUpsertRequest.profileImage(this.profileImage);
            userProfileUpsertRequest.isSsoEnabled(this.isSsoEnabled);
            userProfileUpsertRequest.markForSkip(this.markForSkip);
            userProfileUpsertRequest.markForDelete(this.markForDelete);
            return userProfileUpsertRequest;
        }

        /**
         * Execute update request
         * @return UserProfileUnoptimizedSerializerSingle
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public UserProfileUnoptimizedSerializerSingle execute() throws ApiException {
            UserProfileUpsertRequest userProfileUpsertRequest = buildBodyParams();
            ApiResponse<UserProfileUnoptimizedSerializerSingle> localVarResp = updateWithHttpInfo(id, userProfileUpsertRequest, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute update request with HTTP info returned
         * @return ApiResponse&lt;UserProfileUnoptimizedSerializerSingle&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserProfileUnoptimizedSerializerSingle> executeWithHttpInfo() throws ApiException {
            UserProfileUpsertRequest userProfileUpsertRequest = buildBodyParams();
            return updateWithHttpInfo(id, userProfileUpsertRequest, format);
        }

        /**
         * Execute update request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserProfileUnoptimizedSerializerSingle> _callback) throws ApiException {
            UserProfileUpsertRequest userProfileUpsertRequest = buildBodyParams();
            return updateAsync(id, userProfileUpsertRequest, format, _callback);
        }
    }

    /**
     * Update User
     * 
     * @param id A unique integer value identifying this user profile. (required)
     * @param userProfileUpsertRequest  (required)
     * @return UpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRequestBuilder update(String email, String firstName, String lastName, Integer location, Integer department, Integer id) throws IllegalArgumentException {
        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            if (email != null && email.length() < 1) {
              throw new IllegalArgumentException("Invalid value for email. Length must be greater than or equal to 1.");
            }

        if (firstName == null) throw new IllegalArgumentException("\"firstName\" is required but got null");
            if (firstName != null && firstName.length() < 1) {
              throw new IllegalArgumentException("Invalid value for firstName. Length must be greater than or equal to 1.");
            }

        if (lastName == null) throw new IllegalArgumentException("\"lastName\" is required but got null");
            if (lastName != null && lastName.length() < 1) {
              throw new IllegalArgumentException("Invalid value for lastName. Length must be greater than or equal to 1.");
            }

        
        
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new UpdateRequestBuilder(email, firstName, lastName, location, department, id);
    }
}
