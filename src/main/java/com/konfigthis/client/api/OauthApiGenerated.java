/*
 * Procurify API Documentation
 *  # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.OauthTokenRequestRequest;
import com.konfigthis.client.model.OauthTokenRequestResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OauthApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OauthApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OauthApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call tokenRequestCall(OauthTokenRequestRequest oauthTokenRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://<your-domain>.procurify.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = oauthTokenRequestRequest;

        // create path and map variables
        String localVarPath = "/oauth/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tokenRequestValidateBeforeCall(OauthTokenRequestRequest oauthTokenRequestRequest, final ApiCallback _callback) throws ApiException {
        return tokenRequestCall(oauthTokenRequestRequest, _callback);

    }


    private ApiResponse<OauthTokenRequestResponse> tokenRequestWithHttpInfo(OauthTokenRequestRequest oauthTokenRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = tokenRequestValidateBeforeCall(oauthTokenRequestRequest, null);
        Type localVarReturnType = new TypeToken<OauthTokenRequestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call tokenRequestAsync(OauthTokenRequestRequest oauthTokenRequestRequest, final ApiCallback<OauthTokenRequestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tokenRequestValidateBeforeCall(oauthTokenRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<OauthTokenRequestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TokenRequestRequestBuilder {
        private String clientId;
        private String clientSecret;
        private String audience;
        private String grantType;

        private TokenRequestRequestBuilder() {
        }

        /**
         * Set clientId
         * @param clientId  (optional)
         * @return TokenRequestRequestBuilder
         */
        public TokenRequestRequestBuilder clientId(String clientId) {
            this.clientId = clientId;
            return this;
        }
        
        /**
         * Set clientSecret
         * @param clientSecret  (optional)
         * @return TokenRequestRequestBuilder
         */
        public TokenRequestRequestBuilder clientSecret(String clientSecret) {
            this.clientSecret = clientSecret;
            return this;
        }
        
        /**
         * Set audience
         * @param audience  (optional)
         * @return TokenRequestRequestBuilder
         */
        public TokenRequestRequestBuilder audience(String audience) {
            this.audience = audience;
            return this;
        }
        
        /**
         * Set grantType
         * @param grantType  (optional)
         * @return TokenRequestRequestBuilder
         */
        public TokenRequestRequestBuilder grantType(String grantType) {
            this.grantType = grantType;
            return this;
        }
        
        /**
         * Build call for tokenRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful authentication </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OauthTokenRequestRequest oauthTokenRequestRequest = buildBodyParams();
            return tokenRequestCall(oauthTokenRequestRequest, _callback);
        }

        private OauthTokenRequestRequest buildBodyParams() {
            OauthTokenRequestRequest oauthTokenRequestRequest = new OauthTokenRequestRequest();
            oauthTokenRequestRequest.clientId(this.clientId);
            oauthTokenRequestRequest.clientSecret(this.clientSecret);
            oauthTokenRequestRequest.audience(this.audience);
            oauthTokenRequestRequest.grantType(this.grantType);
            return oauthTokenRequestRequest;
        }

        /**
         * Execute tokenRequest request
         * @return OauthTokenRequestResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful authentication </td><td>  -  </td></tr>
         </table>
         */
        public OauthTokenRequestResponse execute() throws ApiException {
            OauthTokenRequestRequest oauthTokenRequestRequest = buildBodyParams();
            ApiResponse<OauthTokenRequestResponse> localVarResp = tokenRequestWithHttpInfo(oauthTokenRequestRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute tokenRequest request with HTTP info returned
         * @return ApiResponse&lt;OauthTokenRequestResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful authentication </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OauthTokenRequestResponse> executeWithHttpInfo() throws ApiException {
            OauthTokenRequestRequest oauthTokenRequestRequest = buildBodyParams();
            return tokenRequestWithHttpInfo(oauthTokenRequestRequest);
        }

        /**
         * Execute tokenRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful authentication </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OauthTokenRequestResponse> _callback) throws ApiException {
            OauthTokenRequestRequest oauthTokenRequestRequest = buildBodyParams();
            return tokenRequestAsync(oauthTokenRequestRequest, _callback);
        }
    }

    /**
     * Authenticate with OAuth
     * Getting access to Procurify API involves the following three steps:    1. Request credentials for your Procurify account.   2. Request access token using your credentials.   3. Use access token to access Procurify API resources.  #### Request credentials for your Procurify account.  The first step is to request credentials from Procurify. Your role must have access to manage integrations settings in order to request API credentials. You can request API credentials by going to go:    1. Settings in the left navigation bar.   2. Integrations in the Tools section.   3. View button beside API item  This page will allow you to enter an optional description of the application you are developing with the Procurify API and once you are ready, click on “Create Application”. On the next screen, you will be presented with a Client ID and a Client Secret. You will need to copy and save these credentials securely. Please note that the Client Secret is only presented once.  #### Request access token using your credentials.  Once you have the client credentials, you will need to request an access token using these credentials that can be used as a bearer token when making a request to Procurify API. You will need the following information to request an access token:  |Info|Value| --- | --- |Token URL:|https://&amp;lt;your-domain&amp;gt;.procurify.com/oauth/token| |Client ID:|*From the previous step*| |Client Secret:|*From the previous step*| |Audience:|https://api.procurify.com/| |Grant Type:|client_credentials|  Once you have the access token, you will need to cache it until it expires (24 hrs). Please let Procurify support know if you would like help with this.   An example request and response using cURL (replace client id and client secret)      $ curl -H \&quot;content-type: application/json\&quot; -X POST \\         -d &#39;{\&quot;client_id\&quot;: \&quot;~your_client_id~\&quot;, \\              \&quot;client_secret\&quot;: \&quot;~your_client_secret~\&quot;, \\              \&quot;audience\&quot;: \&quot;https://api.procurify.com/\&quot;, \\              \&quot;grant_type\&quot;: \&quot;client_credentials\&quot;}&#39; \\         https://&lt;your-domain&gt;.procurify.com/oauth/token      {\&quot;access_token\&quot;: \&quot;~your-access-token~\&quot;,      \&quot;scope\&quot;: \&quot;urn:procurify-api:domain:~your_domain~ urn:procurify-api:email:~your_email~\&quot;,      \&quot;expires_in\&quot;: 86400,      \&quot;token_type\&quot;: \&quot;Bearer\&quot;}   #### Use access token to access Procurify API resources.  Once you have the access token, you can make requests to Procurify API resources. You will need to set the following headers when making the request.  |Key|Value| --- | --- |Authorization:|Bearer *access_token from previous step*| |X-Procurify-Client:|api|   An example request and response using cURL (replace access token and your procurify domain)      $ curl -H \&quot;Authorization: Bearer ~access_token~\&quot; \\         -H \&quot;X-Procurify-Client: api\&quot; \\         https://&lt;your-domain&gt;.procurify.com/api/v3/vendors/          {\&quot;data\&quot;:[{\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;OTHER\&quot;,\&quot;active\&quot;:true,\&quot;addressLineOne\&quot;:\&quot;OTHER\&quot;...}
     * @return TokenRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful authentication </td><td>  -  </td></tr>
     </table>
     */
    public TokenRequestRequestBuilder tokenRequest() throws IllegalArgumentException {
        return new TokenRequestRequestBuilder();
    }
}
