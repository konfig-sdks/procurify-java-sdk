/*
 * Procurify API Documentation
 *  # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import com.konfigthis.client.model.CatalogItemReadSerializerSingleCreate;
import com.konfigthis.client.model.CatalogItemReadSerializerSingleUpdate;
import com.konfigthis.client.model.CatalogItemUpsertRequest;
import com.konfigthis.client.model.PaginatedCatalogItemBundleReadList;
import com.konfigthis.client.model.PaginatedCatalogItemReadList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CatalogApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CatalogApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CatalogApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAllBundlesCall(String format, String orderBy, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/catalog-bundles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllBundlesValidateBeforeCall(String format, String orderBy, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        return getAllBundlesCall(format, orderBy, page, pageSize, search, _callback);

    }


    private ApiResponse<PaginatedCatalogItemBundleReadList> getAllBundlesWithHttpInfo(String format, String orderBy, Integer page, Integer pageSize, String search) throws ApiException {
        okhttp3.Call localVarCall = getAllBundlesValidateBeforeCall(format, orderBy, page, pageSize, search, null);
        Type localVarReturnType = new TypeToken<PaginatedCatalogItemBundleReadList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllBundlesAsync(String format, String orderBy, Integer page, Integer pageSize, String search, final ApiCallback<PaginatedCatalogItemBundleReadList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllBundlesValidateBeforeCall(format, orderBy, page, pageSize, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedCatalogItemBundleReadList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllBundlesRequestBuilder {
        private String format;
        private String orderBy;
        private Integer page;
        private Integer pageSize;
        private String search;

        private GetAllBundlesRequestBuilder() {
        }

        /**
         * Set format
         * @param format  (optional)
         * @return GetAllBundlesRequestBuilder
         */
        public GetAllBundlesRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy Which field to use when ordering the results. (optional)
         * @return GetAllBundlesRequestBuilder
         */
        public GetAllBundlesRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set page
         * @param page A page number within the paginated result set. (optional)
         * @return GetAllBundlesRequestBuilder
         */
        public GetAllBundlesRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Number of results to return per page. (optional)
         * @return GetAllBundlesRequestBuilder
         */
        public GetAllBundlesRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set search
         * @param search A search term. (optional)
         * @return GetAllBundlesRequestBuilder
         */
        public GetAllBundlesRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Build call for getAllBundles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllBundlesCall(format, orderBy, page, pageSize, search, _callback);
        }


        /**
         * Execute getAllBundles request
         * @return PaginatedCatalogItemBundleReadList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PaginatedCatalogItemBundleReadList execute() throws ApiException {
            ApiResponse<PaginatedCatalogItemBundleReadList> localVarResp = getAllBundlesWithHttpInfo(format, orderBy, page, pageSize, search);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllBundles request with HTTP info returned
         * @return ApiResponse&lt;PaginatedCatalogItemBundleReadList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaginatedCatalogItemBundleReadList> executeWithHttpInfo() throws ApiException {
            return getAllBundlesWithHttpInfo(format, orderBy, page, pageSize, search);
        }

        /**
         * Execute getAllBundles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaginatedCatalogItemBundleReadList> _callback) throws ApiException {
            return getAllBundlesAsync(format, orderBy, page, pageSize, search, _callback);
        }
    }

    /**
     * Get All Catalog Bundles
     * 
     * @return GetAllBundlesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetAllBundlesRequestBuilder getAllBundles() throws IllegalArgumentException {
        return new GetAllBundlesRequestBuilder();
    }
    private okhttp3.Call getAllItemsCall(Integer bundle, String department, String format, String internalSKU, String location, Double maxPrice, Double minPrice, String orderBy, Integer page, Integer pageSize, Integer prefVendor, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/catalog-items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bundle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bundle", bundle));
        }

        if (department != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("department", department));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (internalSKU != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("internalSKU", internalSKU));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (maxPrice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_price", maxPrice));
        }

        if (minPrice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_price", minPrice));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (prefVendor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pref_vendor", prefVendor));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllItemsValidateBeforeCall(Integer bundle, String department, String format, String internalSKU, String location, Double maxPrice, Double minPrice, String orderBy, Integer page, Integer pageSize, Integer prefVendor, String search, final ApiCallback _callback) throws ApiException {
        return getAllItemsCall(bundle, department, format, internalSKU, location, maxPrice, minPrice, orderBy, page, pageSize, prefVendor, search, _callback);

    }


    private ApiResponse<PaginatedCatalogItemReadList> getAllItemsWithHttpInfo(Integer bundle, String department, String format, String internalSKU, String location, Double maxPrice, Double minPrice, String orderBy, Integer page, Integer pageSize, Integer prefVendor, String search) throws ApiException {
        okhttp3.Call localVarCall = getAllItemsValidateBeforeCall(bundle, department, format, internalSKU, location, maxPrice, minPrice, orderBy, page, pageSize, prefVendor, search, null);
        Type localVarReturnType = new TypeToken<PaginatedCatalogItemReadList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllItemsAsync(Integer bundle, String department, String format, String internalSKU, String location, Double maxPrice, Double minPrice, String orderBy, Integer page, Integer pageSize, Integer prefVendor, String search, final ApiCallback<PaginatedCatalogItemReadList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllItemsValidateBeforeCall(bundle, department, format, internalSKU, location, maxPrice, minPrice, orderBy, page, pageSize, prefVendor, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedCatalogItemReadList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllItemsRequestBuilder {
        private Integer bundle;
        private String department;
        private String format;
        private String internalSKU;
        private String location;
        private Double maxPrice;
        private Double minPrice;
        private String orderBy;
        private Integer page;
        private Integer pageSize;
        private Integer prefVendor;
        private String search;

        private GetAllItemsRequestBuilder() {
        }

        /**
         * Set bundle
         * @param bundle  (optional)
         * @return GetAllItemsRequestBuilder
         */
        public GetAllItemsRequestBuilder bundle(Integer bundle) {
            this.bundle = bundle;
            return this;
        }
        
        /**
         * Set department
         * @param department A comma-separated list of integers. (optional)
         * @return GetAllItemsRequestBuilder
         */
        public GetAllItemsRequestBuilder department(String department) {
            this.department = department;
            return this;
        }
        
        /**
         * Set format
         * @param format  (optional)
         * @return GetAllItemsRequestBuilder
         */
        public GetAllItemsRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set internalSKU
         * @param internalSKU  (optional)
         * @return GetAllItemsRequestBuilder
         */
        public GetAllItemsRequestBuilder internalSKU(String internalSKU) {
            this.internalSKU = internalSKU;
            return this;
        }
        
        /**
         * Set location
         * @param location A comma-separated list of integers. (optional)
         * @return GetAllItemsRequestBuilder
         */
        public GetAllItemsRequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set maxPrice
         * @param maxPrice  (optional)
         * @return GetAllItemsRequestBuilder
         */
        public GetAllItemsRequestBuilder maxPrice(Double maxPrice) {
            this.maxPrice = maxPrice;
            return this;
        }
        
        /**
         * Set minPrice
         * @param minPrice  (optional)
         * @return GetAllItemsRequestBuilder
         */
        public GetAllItemsRequestBuilder minPrice(Double minPrice) {
            this.minPrice = minPrice;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy Which field to use when ordering the results. (optional)
         * @return GetAllItemsRequestBuilder
         */
        public GetAllItemsRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set page
         * @param page A page number within the paginated result set. (optional)
         * @return GetAllItemsRequestBuilder
         */
        public GetAllItemsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Number of results to return per page. (optional)
         * @return GetAllItemsRequestBuilder
         */
        public GetAllItemsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set prefVendor
         * @param prefVendor  (optional)
         * @return GetAllItemsRequestBuilder
         */
        public GetAllItemsRequestBuilder prefVendor(Integer prefVendor) {
            this.prefVendor = prefVendor;
            return this;
        }
        
        /**
         * Set search
         * @param search A search term. (optional)
         * @return GetAllItemsRequestBuilder
         */
        public GetAllItemsRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Build call for getAllItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllItemsCall(bundle, department, format, internalSKU, location, maxPrice, minPrice, orderBy, page, pageSize, prefVendor, search, _callback);
        }


        /**
         * Execute getAllItems request
         * @return PaginatedCatalogItemReadList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PaginatedCatalogItemReadList execute() throws ApiException {
            ApiResponse<PaginatedCatalogItemReadList> localVarResp = getAllItemsWithHttpInfo(bundle, department, format, internalSKU, location, maxPrice, minPrice, orderBy, page, pageSize, prefVendor, search);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllItems request with HTTP info returned
         * @return ApiResponse&lt;PaginatedCatalogItemReadList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaginatedCatalogItemReadList> executeWithHttpInfo() throws ApiException {
            return getAllItemsWithHttpInfo(bundle, department, format, internalSKU, location, maxPrice, minPrice, orderBy, page, pageSize, prefVendor, search);
        }

        /**
         * Execute getAllItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaginatedCatalogItemReadList> _callback) throws ApiException {
            return getAllItemsAsync(bundle, department, format, internalSKU, location, maxPrice, minPrice, orderBy, page, pageSize, prefVendor, search, _callback);
        }
    }

    /**
     * Get All Catalog Items
     * 
     * @return GetAllItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetAllItemsRequestBuilder getAllItems() throws IllegalArgumentException {
        return new GetAllItemsRequestBuilder();
    }
    private okhttp3.Call itemCreateCall(CatalogItemUpsertRequest catalogItemUpsertRequest, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = catalogItemUpsertRequest;

        // create path and map variables
        String localVarPath = "/api/v3/catalog-items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "",
            "application/xml",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call itemCreateValidateBeforeCall(CatalogItemUpsertRequest catalogItemUpsertRequest, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'catalogItemUpsertRequest' is set
        if (catalogItemUpsertRequest == null) {
            throw new ApiException("Missing the required parameter 'catalogItemUpsertRequest' when calling itemCreate(Async)");
        }

        return itemCreateCall(catalogItemUpsertRequest, format, _callback);

    }


    private ApiResponse<CatalogItemReadSerializerSingleCreate> itemCreateWithHttpInfo(CatalogItemUpsertRequest catalogItemUpsertRequest, String format) throws ApiException {
        okhttp3.Call localVarCall = itemCreateValidateBeforeCall(catalogItemUpsertRequest, format, null);
        Type localVarReturnType = new TypeToken<CatalogItemReadSerializerSingleCreate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call itemCreateAsync(CatalogItemUpsertRequest catalogItemUpsertRequest, String format, final ApiCallback<CatalogItemReadSerializerSingleCreate> _callback) throws ApiException {

        okhttp3.Call localVarCall = itemCreateValidateBeforeCall(catalogItemUpsertRequest, format, _callback);
        Type localVarReturnType = new TypeToken<CatalogItemReadSerializerSingleCreate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ItemCreateRequestBuilder {
        private final String name;
        private final Integer currency;
        private final List<Map<String, Object>> customFields;
        private String description;
        private Integer id;
        private String image;
        private String unitType;
        private Integer prefVendor;
        private Integer accountCode;
        private String internalSKU;
        private String productUrl;
        private BigDecimal price;
        private Boolean rfoLock;
        private List<Integer> departments;
        private String format;

        private ItemCreateRequestBuilder(String name, Integer currency, List<Map<String, Object>> customFields) {
            this.name = name;
            this.currency = currency;
            this.customFields = customFields;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return ItemCreateRequestBuilder
         */
        public ItemCreateRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return ItemCreateRequestBuilder
         */
        public ItemCreateRequestBuilder id(Integer id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set image
         * @param image  (optional)
         * @return ItemCreateRequestBuilder
         */
        public ItemCreateRequestBuilder image(String image) {
            this.image = image;
            return this;
        }
        
        /**
         * Set unitType
         * @param unitType  (optional)
         * @return ItemCreateRequestBuilder
         */
        public ItemCreateRequestBuilder unitType(String unitType) {
            this.unitType = unitType;
            return this;
        }
        
        /**
         * Set prefVendor
         * @param prefVendor  (optional)
         * @return ItemCreateRequestBuilder
         */
        public ItemCreateRequestBuilder prefVendor(Integer prefVendor) {
            this.prefVendor = prefVendor;
            return this;
        }
        
        /**
         * Set accountCode
         * @param accountCode  (optional)
         * @return ItemCreateRequestBuilder
         */
        public ItemCreateRequestBuilder accountCode(Integer accountCode) {
            this.accountCode = accountCode;
            return this;
        }
        
        /**
         * Set internalSKU
         * @param internalSKU  (optional)
         * @return ItemCreateRequestBuilder
         */
        public ItemCreateRequestBuilder internalSKU(String internalSKU) {
            this.internalSKU = internalSKU;
            return this;
        }
        
        /**
         * Set productUrl
         * @param productUrl  (optional)
         * @return ItemCreateRequestBuilder
         */
        public ItemCreateRequestBuilder productUrl(String productUrl) {
            this.productUrl = productUrl;
            return this;
        }
        
        /**
         * Set price
         * @param price  (optional)
         * @return ItemCreateRequestBuilder
         */
        public ItemCreateRequestBuilder price(BigDecimal price) {
            this.price = price;
            return this;
        }
        
        /**
         * Set rfoLock
         * @param rfoLock  (optional)
         * @return ItemCreateRequestBuilder
         */
        public ItemCreateRequestBuilder rfoLock(Boolean rfoLock) {
            this.rfoLock = rfoLock;
            return this;
        }
        
        /**
         * Set departments
         * @param departments  (optional)
         * @return ItemCreateRequestBuilder
         */
        public ItemCreateRequestBuilder departments(List<Integer> departments) {
            this.departments = departments;
            return this;
        }
        
        /**
         * Set format
         * @param format  (optional)
         * @return ItemCreateRequestBuilder
         */
        public ItemCreateRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for itemCreate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CatalogItemUpsertRequest catalogItemUpsertRequest = buildBodyParams();
            return itemCreateCall(catalogItemUpsertRequest, format, _callback);
        }

        private CatalogItemUpsertRequest buildBodyParams() {
            CatalogItemUpsertRequest catalogItemUpsertRequest = new CatalogItemUpsertRequest();
            catalogItemUpsertRequest.description(this.description);
            catalogItemUpsertRequest.id(this.id);
            catalogItemUpsertRequest.name(this.name);
            catalogItemUpsertRequest.image(this.image);
            catalogItemUpsertRequest.unitType(this.unitType);
            catalogItemUpsertRequest.prefVendor(this.prefVendor);
            catalogItemUpsertRequest.accountCode(this.accountCode);
            catalogItemUpsertRequest.internalSKU(this.internalSKU);
            catalogItemUpsertRequest.productUrl(this.productUrl);
            catalogItemUpsertRequest.currency(this.currency);
            catalogItemUpsertRequest.price(this.price);
            catalogItemUpsertRequest.rfoLock(this.rfoLock);
            catalogItemUpsertRequest.departments(this.departments);
            catalogItemUpsertRequest.customFields(this.customFields);
            return catalogItemUpsertRequest;
        }

        /**
         * Execute itemCreate request
         * @return CatalogItemReadSerializerSingleCreate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CatalogItemReadSerializerSingleCreate execute() throws ApiException {
            CatalogItemUpsertRequest catalogItemUpsertRequest = buildBodyParams();
            ApiResponse<CatalogItemReadSerializerSingleCreate> localVarResp = itemCreateWithHttpInfo(catalogItemUpsertRequest, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute itemCreate request with HTTP info returned
         * @return ApiResponse&lt;CatalogItemReadSerializerSingleCreate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CatalogItemReadSerializerSingleCreate> executeWithHttpInfo() throws ApiException {
            CatalogItemUpsertRequest catalogItemUpsertRequest = buildBodyParams();
            return itemCreateWithHttpInfo(catalogItemUpsertRequest, format);
        }

        /**
         * Execute itemCreate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CatalogItemReadSerializerSingleCreate> _callback) throws ApiException {
            CatalogItemUpsertRequest catalogItemUpsertRequest = buildBodyParams();
            return itemCreateAsync(catalogItemUpsertRequest, format, _callback);
        }
    }

    /**
     * Create Catalog Item
     * 
     * @param catalogItemUpsertRequest  (required)
     * @return ItemCreateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ItemCreateRequestBuilder itemCreate(String name, Integer currency, List<Map<String, Object>> customFields) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            if (name != null && name.length() < 1) {
              throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
            }

        if (currency == null) throw new IllegalArgumentException("\"currency\" is required but got null");
        if (customFields == null) throw new IllegalArgumentException("\"customFields\" is required but got null");
        return new ItemCreateRequestBuilder(name, currency, customFields);
    }
    private okhttp3.Call updateItemCall(Integer id, CatalogItemUpsertRequest catalogItemUpsertRequest, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = catalogItemUpsertRequest;

        // create path and map variables
        String localVarPath = "/api/v3/catalog-items/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "",
            "application/xml",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateItemValidateBeforeCall(Integer id, CatalogItemUpsertRequest catalogItemUpsertRequest, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateItem(Async)");
        }

        // verify the required parameter 'catalogItemUpsertRequest' is set
        if (catalogItemUpsertRequest == null) {
            throw new ApiException("Missing the required parameter 'catalogItemUpsertRequest' when calling updateItem(Async)");
        }

        return updateItemCall(id, catalogItemUpsertRequest, format, _callback);

    }


    private ApiResponse<CatalogItemReadSerializerSingleUpdate> updateItemWithHttpInfo(Integer id, CatalogItemUpsertRequest catalogItemUpsertRequest, String format) throws ApiException {
        okhttp3.Call localVarCall = updateItemValidateBeforeCall(id, catalogItemUpsertRequest, format, null);
        Type localVarReturnType = new TypeToken<CatalogItemReadSerializerSingleUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateItemAsync(Integer id, CatalogItemUpsertRequest catalogItemUpsertRequest, String format, final ApiCallback<CatalogItemReadSerializerSingleUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateItemValidateBeforeCall(id, catalogItemUpsertRequest, format, _callback);
        Type localVarReturnType = new TypeToken<CatalogItemReadSerializerSingleUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateItemRequestBuilder {
        private final String name;
        private final Integer currency;
        private final List<Map<String, Object>> customFields;
        private final Integer id;
        private String description;
        private Integer id;
        private String image;
        private String unitType;
        private Integer prefVendor;
        private Integer accountCode;
        private String internalSKU;
        private String productUrl;
        private BigDecimal price;
        private Boolean rfoLock;
        private List<Integer> departments;
        private String format;

        private UpdateItemRequestBuilder(String name, Integer currency, List<Map<String, Object>> customFields, Integer id) {
            this.name = name;
            this.currency = currency;
            this.customFields = customFields;
            this.id = id;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return UpdateItemRequestBuilder
         */
        public UpdateItemRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return UpdateItemRequestBuilder
         */
        public UpdateItemRequestBuilder id(Integer id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set image
         * @param image  (optional)
         * @return UpdateItemRequestBuilder
         */
        public UpdateItemRequestBuilder image(String image) {
            this.image = image;
            return this;
        }
        
        /**
         * Set unitType
         * @param unitType  (optional)
         * @return UpdateItemRequestBuilder
         */
        public UpdateItemRequestBuilder unitType(String unitType) {
            this.unitType = unitType;
            return this;
        }
        
        /**
         * Set prefVendor
         * @param prefVendor  (optional)
         * @return UpdateItemRequestBuilder
         */
        public UpdateItemRequestBuilder prefVendor(Integer prefVendor) {
            this.prefVendor = prefVendor;
            return this;
        }
        
        /**
         * Set accountCode
         * @param accountCode  (optional)
         * @return UpdateItemRequestBuilder
         */
        public UpdateItemRequestBuilder accountCode(Integer accountCode) {
            this.accountCode = accountCode;
            return this;
        }
        
        /**
         * Set internalSKU
         * @param internalSKU  (optional)
         * @return UpdateItemRequestBuilder
         */
        public UpdateItemRequestBuilder internalSKU(String internalSKU) {
            this.internalSKU = internalSKU;
            return this;
        }
        
        /**
         * Set productUrl
         * @param productUrl  (optional)
         * @return UpdateItemRequestBuilder
         */
        public UpdateItemRequestBuilder productUrl(String productUrl) {
            this.productUrl = productUrl;
            return this;
        }
        
        /**
         * Set price
         * @param price  (optional)
         * @return UpdateItemRequestBuilder
         */
        public UpdateItemRequestBuilder price(BigDecimal price) {
            this.price = price;
            return this;
        }
        
        /**
         * Set rfoLock
         * @param rfoLock  (optional)
         * @return UpdateItemRequestBuilder
         */
        public UpdateItemRequestBuilder rfoLock(Boolean rfoLock) {
            this.rfoLock = rfoLock;
            return this;
        }
        
        /**
         * Set departments
         * @param departments  (optional)
         * @return UpdateItemRequestBuilder
         */
        public UpdateItemRequestBuilder departments(List<Integer> departments) {
            this.departments = departments;
            return this;
        }
        
        /**
         * Set format
         * @param format  (optional)
         * @return UpdateItemRequestBuilder
         */
        public UpdateItemRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for updateItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CatalogItemUpsertRequest catalogItemUpsertRequest = buildBodyParams();
            return updateItemCall(id, catalogItemUpsertRequest, format, _callback);
        }

        private CatalogItemUpsertRequest buildBodyParams() {
            CatalogItemUpsertRequest catalogItemUpsertRequest = new CatalogItemUpsertRequest();
            catalogItemUpsertRequest.description(this.description);
            catalogItemUpsertRequest.id(this.id);
            catalogItemUpsertRequest.name(this.name);
            catalogItemUpsertRequest.image(this.image);
            catalogItemUpsertRequest.unitType(this.unitType);
            catalogItemUpsertRequest.prefVendor(this.prefVendor);
            catalogItemUpsertRequest.accountCode(this.accountCode);
            catalogItemUpsertRequest.internalSKU(this.internalSKU);
            catalogItemUpsertRequest.productUrl(this.productUrl);
            catalogItemUpsertRequest.currency(this.currency);
            catalogItemUpsertRequest.price(this.price);
            catalogItemUpsertRequest.rfoLock(this.rfoLock);
            catalogItemUpsertRequest.departments(this.departments);
            catalogItemUpsertRequest.customFields(this.customFields);
            return catalogItemUpsertRequest;
        }

        /**
         * Execute updateItem request
         * @return CatalogItemReadSerializerSingleUpdate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CatalogItemReadSerializerSingleUpdate execute() throws ApiException {
            CatalogItemUpsertRequest catalogItemUpsertRequest = buildBodyParams();
            ApiResponse<CatalogItemReadSerializerSingleUpdate> localVarResp = updateItemWithHttpInfo(id, catalogItemUpsertRequest, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateItem request with HTTP info returned
         * @return ApiResponse&lt;CatalogItemReadSerializerSingleUpdate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CatalogItemReadSerializerSingleUpdate> executeWithHttpInfo() throws ApiException {
            CatalogItemUpsertRequest catalogItemUpsertRequest = buildBodyParams();
            return updateItemWithHttpInfo(id, catalogItemUpsertRequest, format);
        }

        /**
         * Execute updateItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CatalogItemReadSerializerSingleUpdate> _callback) throws ApiException {
            CatalogItemUpsertRequest catalogItemUpsertRequest = buildBodyParams();
            return updateItemAsync(id, catalogItemUpsertRequest, format, _callback);
        }
    }

    /**
     * Update Catalog Item
     * 
     * @param id A unique integer value identifying this catalog items. (required)
     * @param catalogItemUpsertRequest  (required)
     * @return UpdateItemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateItemRequestBuilder updateItem(String name, Integer currency, List<Map<String, Object>> customFields, Integer id) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            if (name != null && name.length() < 1) {
              throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
            }

        if (currency == null) throw new IllegalArgumentException("\"currency\" is required but got null");
        if (customFields == null) throw new IllegalArgumentException("\"customFields\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new UpdateItemRequestBuilder(name, currency, customFields, id);
    }
}
