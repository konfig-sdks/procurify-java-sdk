/*
 * Procurify API Documentation
 *  # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.DepartmentReadSerializerSingleCreate;
import com.konfigthis.client.model.DepartmentReadSerializerSingleUpdate;
import com.konfigthis.client.model.DepartmentUpsertRequest;
import com.konfigthis.client.model.PaginatedDepartmentReadList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DepartmentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DepartmentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DepartmentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCall(DepartmentUpsertRequest departmentUpsertRequest, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = departmentUpsertRequest;

        // create path and map variables
        String localVarPath = "/api/v3/departments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "",
            "application/xml",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(DepartmentUpsertRequest departmentUpsertRequest, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'departmentUpsertRequest' is set
        if (departmentUpsertRequest == null) {
            throw new ApiException("Missing the required parameter 'departmentUpsertRequest' when calling create(Async)");
        }

        return createCall(departmentUpsertRequest, format, _callback);

    }


    private ApiResponse<DepartmentReadSerializerSingleCreate> createWithHttpInfo(DepartmentUpsertRequest departmentUpsertRequest, String format) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(departmentUpsertRequest, format, null);
        Type localVarReturnType = new TypeToken<DepartmentReadSerializerSingleCreate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAsync(DepartmentUpsertRequest departmentUpsertRequest, String format, final ApiCallback<DepartmentReadSerializerSingleCreate> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(departmentUpsertRequest, format, _callback);
        Type localVarReturnType = new TypeToken<DepartmentReadSerializerSingleCreate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRequestBuilder {
        private final Integer branch;
        private final String name;
        private String externalId;
        private Boolean active;
        private String punchoutEmail;
        private String format;

        private CreateRequestBuilder(Integer branch, String name) {
            this.branch = branch;
            this.name = name;
        }

        /**
         * Set externalId
         * @param externalId External id (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Set active
         * @param active  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Set punchoutEmail
         * @param punchoutEmail  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder punchoutEmail(String punchoutEmail) {
            this.punchoutEmail = punchoutEmail;
            return this;
        }
        
        /**
         * Set format
         * @param format  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for create
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DepartmentUpsertRequest departmentUpsertRequest = buildBodyParams();
            return createCall(departmentUpsertRequest, format, _callback);
        }

        private DepartmentUpsertRequest buildBodyParams() {
            DepartmentUpsertRequest departmentUpsertRequest = new DepartmentUpsertRequest();
            departmentUpsertRequest.branch(this.branch);
            departmentUpsertRequest.externalId(this.externalId);
            departmentUpsertRequest.name(this.name);
            departmentUpsertRequest.active(this.active);
            departmentUpsertRequest.punchoutEmail(this.punchoutEmail);
            return departmentUpsertRequest;
        }

        /**
         * Execute create request
         * @return DepartmentReadSerializerSingleCreate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public DepartmentReadSerializerSingleCreate execute() throws ApiException {
            DepartmentUpsertRequest departmentUpsertRequest = buildBodyParams();
            ApiResponse<DepartmentReadSerializerSingleCreate> localVarResp = createWithHttpInfo(departmentUpsertRequest, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute create request with HTTP info returned
         * @return ApiResponse&lt;DepartmentReadSerializerSingleCreate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DepartmentReadSerializerSingleCreate> executeWithHttpInfo() throws ApiException {
            DepartmentUpsertRequest departmentUpsertRequest = buildBodyParams();
            return createWithHttpInfo(departmentUpsertRequest, format);
        }

        /**
         * Execute create request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DepartmentReadSerializerSingleCreate> _callback) throws ApiException {
            DepartmentUpsertRequest departmentUpsertRequest = buildBodyParams();
            return createAsync(departmentUpsertRequest, format, _callback);
        }
    }

    /**
     * Create New Department
     *  
     * @param departmentUpsertRequest  (required)
     * @return CreateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateRequestBuilder create(Integer branch, String name) throws IllegalArgumentException {
        if (branch == null) throw new IllegalArgumentException("\"branch\" is required but got null");
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            if (name != null && name.length() < 1) {
              throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
            }

        return new CreateRequestBuilder(branch, name);
    }
    private okhttp3.Call listCall(Integer branch, String format, Integer includeIsActiveForAccountCode, Boolean locationPermOverride, List<Integer> locations, String orderBy, Integer page, Integer pageSize, Integer permission, String requestable, String search, Integer user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/departments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (branch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branch", branch));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (includeIsActiveForAccountCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_is_active_for_account_code", includeIsActiveForAccountCode));
        }

        if (locationPermOverride != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_perm_override", locationPermOverride));
        }

        if (locations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "locations", locations));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (requestable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("requestable", requestable));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(Integer branch, String format, Integer includeIsActiveForAccountCode, Boolean locationPermOverride, List<Integer> locations, String orderBy, Integer page, Integer pageSize, Integer permission, String requestable, String search, Integer user, final ApiCallback _callback) throws ApiException {
        return listCall(branch, format, includeIsActiveForAccountCode, locationPermOverride, locations, orderBy, page, pageSize, permission, requestable, search, user, _callback);

    }


    private ApiResponse<PaginatedDepartmentReadList> listWithHttpInfo(Integer branch, String format, Integer includeIsActiveForAccountCode, Boolean locationPermOverride, List<Integer> locations, String orderBy, Integer page, Integer pageSize, Integer permission, String requestable, String search, Integer user) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(branch, format, includeIsActiveForAccountCode, locationPermOverride, locations, orderBy, page, pageSize, permission, requestable, search, user, null);
        Type localVarReturnType = new TypeToken<PaginatedDepartmentReadList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(Integer branch, String format, Integer includeIsActiveForAccountCode, Boolean locationPermOverride, List<Integer> locations, String orderBy, Integer page, Integer pageSize, Integer permission, String requestable, String search, Integer user, final ApiCallback<PaginatedDepartmentReadList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(branch, format, includeIsActiveForAccountCode, locationPermOverride, locations, orderBy, page, pageSize, permission, requestable, search, user, _callback);
        Type localVarReturnType = new TypeToken<PaginatedDepartmentReadList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private Integer branch;
        private String format;
        private Integer includeIsActiveForAccountCode;
        private Boolean locationPermOverride;
        private List<Integer> locations;
        private String orderBy;
        private Integer page;
        private Integer pageSize;
        private Integer permission;
        private String requestable;
        private String search;
        private Integer user;

        private ListRequestBuilder() {
        }

        /**
         * Set branch
         * @param branch Filter departments by their branch. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder branch(Integer branch) {
            this.branch = branch;
            return this;
        }
        
        /**
         * Set format
         * @param format  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set includeIsActiveForAccountCode
         * @param includeIsActiveForAccountCode Setting this adds the addition of the booeal field &#39;has_active_account&#39; to each department object of the response. The query param accepts an integer representing the primary key of the account code to check if there exists an account object associated with the department with that account code. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder includeIsActiveForAccountCode(Integer includeIsActiveForAccountCode) {
            this.includeIsActiveForAccountCode = includeIsActiveForAccountCode;
            return this;
        }
        
        /**
         * Set locationPermOverride
         * @param locationPermOverride Setting this overrides the need to enable the PROCUREMENT_ACCESS and/or RECEIVE_BY_DEPARTMENT feature switches. This parameter can only be used in conjunction with permission and user and cannot function without both of those parameters explicitly set. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder locationPermOverride(Boolean locationPermOverride) {
            this.locationPermOverride = locationPermOverride;
            return this;
        }
        
        /**
         * Set locations
         * @param locations Filter departments by the locations (branches) passed in. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder locations(List<Integer> locations) {
            this.locations = locations;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy Which field to use when ordering the results. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set page
         * @param page A page number within the paginated result set. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Number of results to return per page. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set permission
         * @param permission Filter by permission. In isolation, this parameter can only be set to 68 (add purchase order); 841 (view report); or 899 (receive_po), which correlate with permission to add purchase orders, view reports, and receive purchase orders respectively. However, the results returned correlate with the “by department” version of these permissions, which means that results are filtered by permission to add purchase orders by department, permission to view reports by department, and receive purchase orders by department. This should only be used in conjunction with the PROCUREMENT_ACCESS and/or RECEIVE_BY_DEPARTMENT feature switches. If used in conjunction with location_perm_override&#x3D;true and user, the value can be set to any permission, and the result will be departments filtered by the provided user and permission values. If used in conjunction with the RECEIVE_BY_DEPARTMENT feature flag, the permission can only be set to 68, 841, or 899 (see second sentence for what these permissions do). The result will be all departments filtered by the provided user value. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder permission(Integer permission) {
            this.permission = permission;
            return this;
        }
        
        /**
         * Set requestable
         * @param requestable Fetch all requestable departments by the currently authorized user. Accepts ORDER, EXPENSE, TRAVEL, and PAY_REQUEST. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder requestable(String requestable) {
            this.requestable = requestable;
            return this;
        }
        
        /**
         * Set search
         * @param search A search term. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Set user
         * @param user Filter by user. If this parameter is set, the user must be a superuser or have the add_po_by_department or receive_po_by_department permissions. In isolation, this parameter should only be used in conjunction with the PROCUREMENT_ACCESS and/or RECEIVE_BY_DEPARTMENT feature switches. If used in conjunction with location_perm_override&#x3D;true and permission query parameter, the result returned will be departments filtered by the provided user and permission values. If used in conjunction with the RECEIVE_BY_DEPARTMENT feature flag, the result will be departments filtered by the user provided and the permission set to 68 (add purchase order); 841 (view report); or 899 (receive purchase order) (see permission query parameter explanation for more information on what these stand for). (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder user(Integer user) {
            this.user = user;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(branch, format, includeIsActiveForAccountCode, locationPermOverride, locations, orderBy, page, pageSize, permission, requestable, search, user, _callback);
        }


        /**
         * Execute list request
         * @return PaginatedDepartmentReadList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PaginatedDepartmentReadList execute() throws ApiException {
            ApiResponse<PaginatedDepartmentReadList> localVarResp = listWithHttpInfo(branch, format, includeIsActiveForAccountCode, locationPermOverride, locations, orderBy, page, pageSize, permission, requestable, search, user);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;PaginatedDepartmentReadList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaginatedDepartmentReadList> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(branch, format, includeIsActiveForAccountCode, locationPermOverride, locations, orderBy, page, pageSize, permission, requestable, search, user);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaginatedDepartmentReadList> _callback) throws ApiException {
            return listAsync(branch, format, includeIsActiveForAccountCode, locationPermOverride, locations, orderBy, page, pageSize, permission, requestable, search, user, _callback);
        }
    }

    /**
     * List Departments
     *  
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call updateCall(Integer id, DepartmentUpsertRequest departmentUpsertRequest, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = departmentUpsertRequest;

        // create path and map variables
        String localVarPath = "/api/v3/departments/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "",
            "application/xml",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateValidateBeforeCall(Integer id, DepartmentUpsertRequest departmentUpsertRequest, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling update(Async)");
        }

        // verify the required parameter 'departmentUpsertRequest' is set
        if (departmentUpsertRequest == null) {
            throw new ApiException("Missing the required parameter 'departmentUpsertRequest' when calling update(Async)");
        }

        return updateCall(id, departmentUpsertRequest, format, _callback);

    }


    private ApiResponse<DepartmentReadSerializerSingleUpdate> updateWithHttpInfo(Integer id, DepartmentUpsertRequest departmentUpsertRequest, String format) throws ApiException {
        okhttp3.Call localVarCall = updateValidateBeforeCall(id, departmentUpsertRequest, format, null);
        Type localVarReturnType = new TypeToken<DepartmentReadSerializerSingleUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAsync(Integer id, DepartmentUpsertRequest departmentUpsertRequest, String format, final ApiCallback<DepartmentReadSerializerSingleUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateValidateBeforeCall(id, departmentUpsertRequest, format, _callback);
        Type localVarReturnType = new TypeToken<DepartmentReadSerializerSingleUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRequestBuilder {
        private final Integer branch;
        private final String name;
        private final Integer id;
        private String externalId;
        private Boolean active;
        private String punchoutEmail;
        private String format;

        private UpdateRequestBuilder(Integer branch, String name, Integer id) {
            this.branch = branch;
            this.name = name;
            this.id = id;
        }

        /**
         * Set externalId
         * @param externalId External id (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Set active
         * @param active  (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Set punchoutEmail
         * @param punchoutEmail  (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder punchoutEmail(String punchoutEmail) {
            this.punchoutEmail = punchoutEmail;
            return this;
        }
        
        /**
         * Set format
         * @param format  (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for update
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DepartmentUpsertRequest departmentUpsertRequest = buildBodyParams();
            return updateCall(id, departmentUpsertRequest, format, _callback);
        }

        private DepartmentUpsertRequest buildBodyParams() {
            DepartmentUpsertRequest departmentUpsertRequest = new DepartmentUpsertRequest();
            departmentUpsertRequest.branch(this.branch);
            departmentUpsertRequest.externalId(this.externalId);
            departmentUpsertRequest.name(this.name);
            departmentUpsertRequest.active(this.active);
            departmentUpsertRequest.punchoutEmail(this.punchoutEmail);
            return departmentUpsertRequest;
        }

        /**
         * Execute update request
         * @return DepartmentReadSerializerSingleUpdate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public DepartmentReadSerializerSingleUpdate execute() throws ApiException {
            DepartmentUpsertRequest departmentUpsertRequest = buildBodyParams();
            ApiResponse<DepartmentReadSerializerSingleUpdate> localVarResp = updateWithHttpInfo(id, departmentUpsertRequest, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute update request with HTTP info returned
         * @return ApiResponse&lt;DepartmentReadSerializerSingleUpdate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DepartmentReadSerializerSingleUpdate> executeWithHttpInfo() throws ApiException {
            DepartmentUpsertRequest departmentUpsertRequest = buildBodyParams();
            return updateWithHttpInfo(id, departmentUpsertRequest, format);
        }

        /**
         * Execute update request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DepartmentReadSerializerSingleUpdate> _callback) throws ApiException {
            DepartmentUpsertRequest departmentUpsertRequest = buildBodyParams();
            return updateAsync(id, departmentUpsertRequest, format, _callback);
        }
    }

    /**
     * Update Department
     *  
     * @param id A unique integer value identifying this department. (required)
     * @param departmentUpsertRequest  (required)
     * @return UpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRequestBuilder update(Integer branch, String name, Integer id) throws IllegalArgumentException {
        if (branch == null) throw new IllegalArgumentException("\"branch\" is required but got null");
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            if (name != null && name.length() < 1) {
              throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
            }

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new UpdateRequestBuilder(branch, name, id);
    }
}
