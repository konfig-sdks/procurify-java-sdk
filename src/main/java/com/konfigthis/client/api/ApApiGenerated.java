/*
 * Procurify API Documentation
 *  # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ApproverChoicesMetadataApproverReadDocs;
import com.konfigthis.client.model.BillMetadataBillRead;
import com.konfigthis.client.model.BillMetadataListSimpleBill;
import com.konfigthis.client.model.CompanyPaymentMethod;
import com.konfigthis.client.model.CompanyPaymentMethodRequest;
import com.konfigthis.client.model.ItemMetadataItemRead;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PaginatedCompanyPaymentMethodReadList;
import com.konfigthis.client.model.PaginatedVendorPaymentMethodReadList;
import com.konfigthis.client.model.PaymentMetadataPaymentListRead;
import com.konfigthis.client.model.PaymentMethodTypeEnum;
import java.util.UUID;
import com.konfigthis.client.model.VendorPaymentMethod;
import com.konfigthis.client.model.VendorPaymentMethodRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ApApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ApApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call billsGetByIdCall(String id, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/ap/bills/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billsGetByIdValidateBeforeCall(String id, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling billsGetById(Async)");
        }

        return billsGetByIdCall(id, format, _callback);

    }


    private ApiResponse<BillMetadataBillRead> billsGetByIdWithHttpInfo(String id, String format) throws ApiException {
        okhttp3.Call localVarCall = billsGetByIdValidateBeforeCall(id, format, null);
        Type localVarReturnType = new TypeToken<BillMetadataBillRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call billsGetByIdAsync(String id, String format, final ApiCallback<BillMetadataBillRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = billsGetByIdValidateBeforeCall(id, format, _callback);
        Type localVarReturnType = new TypeToken<BillMetadataBillRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class BillsGetByIdRequestBuilder {
        private final String id;
        private String format;

        private BillsGetByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set format
         * @param format  (optional)
         * @return BillsGetByIdRequestBuilder
         */
        public BillsGetByIdRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for billsGetById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return billsGetByIdCall(id, format, _callback);
        }


        /**
         * Execute billsGetById request
         * @return BillMetadataBillRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public BillMetadataBillRead execute() throws ApiException {
            ApiResponse<BillMetadataBillRead> localVarResp = billsGetByIdWithHttpInfo(id, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute billsGetById request with HTTP info returned
         * @return ApiResponse&lt;BillMetadataBillRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BillMetadataBillRead> executeWithHttpInfo() throws ApiException {
            return billsGetByIdWithHttpInfo(id, format);
        }

        /**
         * Execute billsGetById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BillMetadataBillRead> _callback) throws ApiException {
            return billsGetByIdAsync(id, format, _callback);
        }
    }

    /**
     * Get Bills by ID
     *  
     * @param id  (required)
     * @return BillsGetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public BillsGetByIdRequestBuilder billsGetById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new BillsGetByIdRequestBuilder(id);
    }
    private okhttp3.Call billsListCall(Double approver, Double contract, Integer currency, LocalDate dueDate0, LocalDate dueDate1, String excludeBillGroupIds, String excludeExpenseBills, String expense, String format, LocalDate glPostDate0, LocalDate glPostDate1, Integer group, Boolean hasPayment, Boolean hasPostingDate, String includeBillGroupIds, LocalDate invoiceDate0, LocalDate invoiceDate1, Boolean isExported, LocalDate lastExportDate0, LocalDate lastExportDate1, Double lastExportUser, OffsetDateTime lastModifiedDatetime0, OffsetDateTime lastModifiedDatetime1, LocalDate modifiedDate0, LocalDate modifiedDate1, String orderBy, Integer page, Integer pageSize, String search, LocalDate submittedDate0, LocalDate submittedDate1, String syncStatus, String syncStatusV2, Integer type, Integer user, Integer vendor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/ap/bills";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (approver != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("approver", approver));
        }

        if (contract != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contract", contract));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (dueDate0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("due_date_0", dueDate0));
        }

        if (dueDate1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("due_date_1", dueDate1));
        }

        if (excludeBillGroupIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_bill_group_ids", excludeBillGroupIds));
        }

        if (excludeExpenseBills != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_expense_bills", excludeExpenseBills));
        }

        if (expense != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expense", expense));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (glPostDate0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gl_post_date_0", glPostDate0));
        }

        if (glPostDate1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gl_post_date_1", glPostDate1));
        }

        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }

        if (hasPayment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_payment", hasPayment));
        }

        if (hasPostingDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_posting_date", hasPostingDate));
        }

        if (includeBillGroupIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_bill_group_ids", includeBillGroupIds));
        }

        if (invoiceDate0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invoice_date_0", invoiceDate0));
        }

        if (invoiceDate1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invoice_date_1", invoiceDate1));
        }

        if (isExported != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_exported", isExported));
        }

        if (lastExportDate0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_export_date_0", lastExportDate0));
        }

        if (lastExportDate1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_export_date_1", lastExportDate1));
        }

        if (lastExportUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_export_user", lastExportUser));
        }

        if (lastModifiedDatetime0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_modified_datetime_0", lastModifiedDatetime0));
        }

        if (lastModifiedDatetime1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_modified_datetime_1", lastModifiedDatetime1));
        }

        if (modifiedDate0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_date_0", modifiedDate0));
        }

        if (modifiedDate1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_date_1", modifiedDate1));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (submittedDate0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("submitted_date_0", submittedDate0));
        }

        if (submittedDate1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("submitted_date_1", submittedDate1));
        }

        if (syncStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sync_status", syncStatus));
        }

        if (syncStatusV2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sync_status_v2", syncStatusV2));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (vendor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vendor", vendor));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billsListValidateBeforeCall(Double approver, Double contract, Integer currency, LocalDate dueDate0, LocalDate dueDate1, String excludeBillGroupIds, String excludeExpenseBills, String expense, String format, LocalDate glPostDate0, LocalDate glPostDate1, Integer group, Boolean hasPayment, Boolean hasPostingDate, String includeBillGroupIds, LocalDate invoiceDate0, LocalDate invoiceDate1, Boolean isExported, LocalDate lastExportDate0, LocalDate lastExportDate1, Double lastExportUser, OffsetDateTime lastModifiedDatetime0, OffsetDateTime lastModifiedDatetime1, LocalDate modifiedDate0, LocalDate modifiedDate1, String orderBy, Integer page, Integer pageSize, String search, LocalDate submittedDate0, LocalDate submittedDate1, String syncStatus, String syncStatusV2, Integer type, Integer user, Integer vendor, final ApiCallback _callback) throws ApiException {
        return billsListCall(approver, contract, currency, dueDate0, dueDate1, excludeBillGroupIds, excludeExpenseBills, expense, format, glPostDate0, glPostDate1, group, hasPayment, hasPostingDate, includeBillGroupIds, invoiceDate0, invoiceDate1, isExported, lastExportDate0, lastExportDate1, lastExportUser, lastModifiedDatetime0, lastModifiedDatetime1, modifiedDate0, modifiedDate1, orderBy, page, pageSize, search, submittedDate0, submittedDate1, syncStatus, syncStatusV2, type, user, vendor, _callback);

    }


    private ApiResponse<BillMetadataListSimpleBill> billsListWithHttpInfo(Double approver, Double contract, Integer currency, LocalDate dueDate0, LocalDate dueDate1, String excludeBillGroupIds, String excludeExpenseBills, String expense, String format, LocalDate glPostDate0, LocalDate glPostDate1, Integer group, Boolean hasPayment, Boolean hasPostingDate, String includeBillGroupIds, LocalDate invoiceDate0, LocalDate invoiceDate1, Boolean isExported, LocalDate lastExportDate0, LocalDate lastExportDate1, Double lastExportUser, OffsetDateTime lastModifiedDatetime0, OffsetDateTime lastModifiedDatetime1, LocalDate modifiedDate0, LocalDate modifiedDate1, String orderBy, Integer page, Integer pageSize, String search, LocalDate submittedDate0, LocalDate submittedDate1, String syncStatus, String syncStatusV2, Integer type, Integer user, Integer vendor) throws ApiException {
        okhttp3.Call localVarCall = billsListValidateBeforeCall(approver, contract, currency, dueDate0, dueDate1, excludeBillGroupIds, excludeExpenseBills, expense, format, glPostDate0, glPostDate1, group, hasPayment, hasPostingDate, includeBillGroupIds, invoiceDate0, invoiceDate1, isExported, lastExportDate0, lastExportDate1, lastExportUser, lastModifiedDatetime0, lastModifiedDatetime1, modifiedDate0, modifiedDate1, orderBy, page, pageSize, search, submittedDate0, submittedDate1, syncStatus, syncStatusV2, type, user, vendor, null);
        Type localVarReturnType = new TypeToken<BillMetadataListSimpleBill>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call billsListAsync(Double approver, Double contract, Integer currency, LocalDate dueDate0, LocalDate dueDate1, String excludeBillGroupIds, String excludeExpenseBills, String expense, String format, LocalDate glPostDate0, LocalDate glPostDate1, Integer group, Boolean hasPayment, Boolean hasPostingDate, String includeBillGroupIds, LocalDate invoiceDate0, LocalDate invoiceDate1, Boolean isExported, LocalDate lastExportDate0, LocalDate lastExportDate1, Double lastExportUser, OffsetDateTime lastModifiedDatetime0, OffsetDateTime lastModifiedDatetime1, LocalDate modifiedDate0, LocalDate modifiedDate1, String orderBy, Integer page, Integer pageSize, String search, LocalDate submittedDate0, LocalDate submittedDate1, String syncStatus, String syncStatusV2, Integer type, Integer user, Integer vendor, final ApiCallback<BillMetadataListSimpleBill> _callback) throws ApiException {

        okhttp3.Call localVarCall = billsListValidateBeforeCall(approver, contract, currency, dueDate0, dueDate1, excludeBillGroupIds, excludeExpenseBills, expense, format, glPostDate0, glPostDate1, group, hasPayment, hasPostingDate, includeBillGroupIds, invoiceDate0, invoiceDate1, isExported, lastExportDate0, lastExportDate1, lastExportUser, lastModifiedDatetime0, lastModifiedDatetime1, modifiedDate0, modifiedDate1, orderBy, page, pageSize, search, submittedDate0, submittedDate1, syncStatus, syncStatusV2, type, user, vendor, _callback);
        Type localVarReturnType = new TypeToken<BillMetadataListSimpleBill>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class BillsListRequestBuilder {
        private Double approver;
        private Double contract;
        private Integer currency;
        private LocalDate dueDate0;
        private LocalDate dueDate1;
        private String excludeBillGroupIds;
        private String excludeExpenseBills;
        private String expense;
        private String format;
        private LocalDate glPostDate0;
        private LocalDate glPostDate1;
        private Integer group;
        private Boolean hasPayment;
        private Boolean hasPostingDate;
        private String includeBillGroupIds;
        private LocalDate invoiceDate0;
        private LocalDate invoiceDate1;
        private Boolean isExported;
        private LocalDate lastExportDate0;
        private LocalDate lastExportDate1;
        private Double lastExportUser;
        private OffsetDateTime lastModifiedDatetime0;
        private OffsetDateTime lastModifiedDatetime1;
        private LocalDate modifiedDate0;
        private LocalDate modifiedDate1;
        private String orderBy;
        private Integer page;
        private Integer pageSize;
        private String search;
        private LocalDate submittedDate0;
        private LocalDate submittedDate1;
        private String syncStatus;
        private String syncStatusV2;
        private Integer type;
        private Integer user;
        private Integer vendor;

        private BillsListRequestBuilder() {
        }

        /**
         * Set approver
         * @param approver Approver (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder approver(Double approver) {
            this.approver = approver;
            return this;
        }
        
        /**
         * Set contract
         * @param contract Contracts related to bill items&#39; purchase orders (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder contract(Double contract) {
            this.contract = contract;
            return this;
        }
        
        /**
         * Set currency
         * @param currency  (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder currency(Integer currency) {
            this.currency = currency;
            return this;
        }
        
        /**
         * Set dueDate0
         * @param dueDate0 Due Date (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder dueDate0(LocalDate dueDate0) {
            this.dueDate0 = dueDate0;
            return this;
        }
        
        /**
         * Set dueDate1
         * @param dueDate1 Due Date (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder dueDate1(LocalDate dueDate1) {
            this.dueDate1 = dueDate1;
            return this;
        }
        
        /**
         * Set excludeBillGroupIds
         * @param excludeBillGroupIds  (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder excludeBillGroupIds(String excludeBillGroupIds) {
            this.excludeBillGroupIds = excludeBillGroupIds;
            return this;
        }
        
        /**
         * Set excludeExpenseBills
         * @param excludeExpenseBills Exclude expense bills (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder excludeExpenseBills(String excludeExpenseBills) {
            this.excludeExpenseBills = excludeExpenseBills;
            return this;
        }
        
        /**
         * Set expense
         * @param expense Expense Bills Only (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder expense(String expense) {
            this.expense = expense;
            return this;
        }
        
        /**
         * Set format
         * @param format  (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set glPostDate0
         * @param glPostDate0 Posting Date (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder glPostDate0(LocalDate glPostDate0) {
            this.glPostDate0 = glPostDate0;
            return this;
        }
        
        /**
         * Set glPostDate1
         * @param glPostDate1 Posting Date (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder glPostDate1(LocalDate glPostDate1) {
            this.glPostDate1 = glPostDate1;
            return this;
        }
        
        /**
         * Set group
         * @param group  (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder group(Integer group) {
            this.group = group;
            return this;
        }
        
        /**
         * Set hasPayment
         * @param hasPayment Without Payment (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder hasPayment(Boolean hasPayment) {
            this.hasPayment = hasPayment;
            return this;
        }
        
        /**
         * Set hasPostingDate
         * @param hasPostingDate Has Posting Date (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder hasPostingDate(Boolean hasPostingDate) {
            this.hasPostingDate = hasPostingDate;
            return this;
        }
        
        /**
         * Set includeBillGroupIds
         * @param includeBillGroupIds  (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder includeBillGroupIds(String includeBillGroupIds) {
            this.includeBillGroupIds = includeBillGroupIds;
            return this;
        }
        
        /**
         * Set invoiceDate0
         * @param invoiceDate0 Invoice Date (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder invoiceDate0(LocalDate invoiceDate0) {
            this.invoiceDate0 = invoiceDate0;
            return this;
        }
        
        /**
         * Set invoiceDate1
         * @param invoiceDate1 Invoice Date (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder invoiceDate1(LocalDate invoiceDate1) {
            this.invoiceDate1 = invoiceDate1;
            return this;
        }
        
        /**
         * Set isExported
         * @param isExported Exported Bills Only (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder isExported(Boolean isExported) {
            this.isExported = isExported;
            return this;
        }
        
        /**
         * Set lastExportDate0
         * @param lastExportDate0 Last Export Date (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder lastExportDate0(LocalDate lastExportDate0) {
            this.lastExportDate0 = lastExportDate0;
            return this;
        }
        
        /**
         * Set lastExportDate1
         * @param lastExportDate1 Last Export Date (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder lastExportDate1(LocalDate lastExportDate1) {
            this.lastExportDate1 = lastExportDate1;
            return this;
        }
        
        /**
         * Set lastExportUser
         * @param lastExportUser Last Export User (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder lastExportUser(Double lastExportUser) {
            this.lastExportUser = lastExportUser;
            return this;
        }
        
        /**
         * Set lastModifiedDatetime0
         * @param lastModifiedDatetime0 Last Modified Datetime (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder lastModifiedDatetime0(OffsetDateTime lastModifiedDatetime0) {
            this.lastModifiedDatetime0 = lastModifiedDatetime0;
            return this;
        }
        
        /**
         * Set lastModifiedDatetime1
         * @param lastModifiedDatetime1 Last Modified Datetime (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder lastModifiedDatetime1(OffsetDateTime lastModifiedDatetime1) {
            this.lastModifiedDatetime1 = lastModifiedDatetime1;
            return this;
        }
        
        /**
         * Set modifiedDate0
         * @param modifiedDate0 Last Modified Date (Deprecated - use &#39;Last Modified Datetime&#39;) (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder modifiedDate0(LocalDate modifiedDate0) {
            this.modifiedDate0 = modifiedDate0;
            return this;
        }
        
        /**
         * Set modifiedDate1
         * @param modifiedDate1 Last Modified Date (Deprecated - use &#39;Last Modified Datetime&#39;) (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder modifiedDate1(LocalDate modifiedDate1) {
            this.modifiedDate1 = modifiedDate1;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy Which field to use when ordering the results. (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set page
         * @param page A page number within the paginated result set. (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Number of results to return per page. (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set search
         * @param search A search term. (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Set submittedDate0
         * @param submittedDate0 Submitted Date (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder submittedDate0(LocalDate submittedDate0) {
            this.submittedDate0 = submittedDate0;
            return this;
        }
        
        /**
         * Set submittedDate1
         * @param submittedDate1 Submitted Date (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder submittedDate1(LocalDate submittedDate1) {
            this.submittedDate1 = submittedDate1;
            return this;
        }
        
        /**
         * Set syncStatus
         * @param syncStatus Sync Status (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder syncStatus(String syncStatus) {
            this.syncStatus = syncStatus;
            return this;
        }
        
        /**
         * Set syncStatusV2
         * @param syncStatusV2 Sync Status (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder syncStatusV2(String syncStatusV2) {
            this.syncStatusV2 = syncStatusV2;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder type(Integer type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set user
         * @param user  (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder user(Integer user) {
            this.user = user;
            return this;
        }
        
        /**
         * Set vendor
         * @param vendor  (optional)
         * @return BillsListRequestBuilder
         */
        public BillsListRequestBuilder vendor(Integer vendor) {
            this.vendor = vendor;
            return this;
        }
        
        /**
         * Build call for billsList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return billsListCall(approver, contract, currency, dueDate0, dueDate1, excludeBillGroupIds, excludeExpenseBills, expense, format, glPostDate0, glPostDate1, group, hasPayment, hasPostingDate, includeBillGroupIds, invoiceDate0, invoiceDate1, isExported, lastExportDate0, lastExportDate1, lastExportUser, lastModifiedDatetime0, lastModifiedDatetime1, modifiedDate0, modifiedDate1, orderBy, page, pageSize, search, submittedDate0, submittedDate1, syncStatus, syncStatusV2, type, user, vendor, _callback);
        }


        /**
         * Execute billsList request
         * @return BillMetadataListSimpleBill
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public BillMetadataListSimpleBill execute() throws ApiException {
            ApiResponse<BillMetadataListSimpleBill> localVarResp = billsListWithHttpInfo(approver, contract, currency, dueDate0, dueDate1, excludeBillGroupIds, excludeExpenseBills, expense, format, glPostDate0, glPostDate1, group, hasPayment, hasPostingDate, includeBillGroupIds, invoiceDate0, invoiceDate1, isExported, lastExportDate0, lastExportDate1, lastExportUser, lastModifiedDatetime0, lastModifiedDatetime1, modifiedDate0, modifiedDate1, orderBy, page, pageSize, search, submittedDate0, submittedDate1, syncStatus, syncStatusV2, type, user, vendor);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute billsList request with HTTP info returned
         * @return ApiResponse&lt;BillMetadataListSimpleBill&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BillMetadataListSimpleBill> executeWithHttpInfo() throws ApiException {
            return billsListWithHttpInfo(approver, contract, currency, dueDate0, dueDate1, excludeBillGroupIds, excludeExpenseBills, expense, format, glPostDate0, glPostDate1, group, hasPayment, hasPostingDate, includeBillGroupIds, invoiceDate0, invoiceDate1, isExported, lastExportDate0, lastExportDate1, lastExportUser, lastModifiedDatetime0, lastModifiedDatetime1, modifiedDate0, modifiedDate1, orderBy, page, pageSize, search, submittedDate0, submittedDate1, syncStatus, syncStatusV2, type, user, vendor);
        }

        /**
         * Execute billsList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BillMetadataListSimpleBill> _callback) throws ApiException {
            return billsListAsync(approver, contract, currency, dueDate0, dueDate1, excludeBillGroupIds, excludeExpenseBills, expense, format, glPostDate0, glPostDate1, group, hasPayment, hasPostingDate, includeBillGroupIds, invoiceDate0, invoiceDate1, isExported, lastExportDate0, lastExportDate1, lastExportUser, lastModifiedDatetime0, lastModifiedDatetime1, modifiedDate0, modifiedDate1, orderBy, page, pageSize, search, submittedDate0, submittedDate1, syncStatus, syncStatusV2, type, user, vendor, _callback);
        }
    }

    /**
     * Get Bills
     * list: This endpoint supports OPTIONS method which returns a list of available fields and their types.
     * @return BillsListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public BillsListRequestBuilder billsList() throws IllegalArgumentException {
        return new BillsListRequestBuilder();
    }
    private okhttp3.Call companyPaymentMethodsListCall(Integer currency, String format, String orderBy, Integer page, Integer pageSize, String search, Integer type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/ap/company-payment-methods";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call companyPaymentMethodsListValidateBeforeCall(Integer currency, String format, String orderBy, Integer page, Integer pageSize, String search, Integer type, final ApiCallback _callback) throws ApiException {
        return companyPaymentMethodsListCall(currency, format, orderBy, page, pageSize, search, type, _callback);

    }


    private ApiResponse<PaginatedCompanyPaymentMethodReadList> companyPaymentMethodsListWithHttpInfo(Integer currency, String format, String orderBy, Integer page, Integer pageSize, String search, Integer type) throws ApiException {
        okhttp3.Call localVarCall = companyPaymentMethodsListValidateBeforeCall(currency, format, orderBy, page, pageSize, search, type, null);
        Type localVarReturnType = new TypeToken<PaginatedCompanyPaymentMethodReadList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call companyPaymentMethodsListAsync(Integer currency, String format, String orderBy, Integer page, Integer pageSize, String search, Integer type, final ApiCallback<PaginatedCompanyPaymentMethodReadList> _callback) throws ApiException {

        okhttp3.Call localVarCall = companyPaymentMethodsListValidateBeforeCall(currency, format, orderBy, page, pageSize, search, type, _callback);
        Type localVarReturnType = new TypeToken<PaginatedCompanyPaymentMethodReadList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CompanyPaymentMethodsListRequestBuilder {
        private Integer currency;
        private String format;
        private String orderBy;
        private Integer page;
        private Integer pageSize;
        private String search;
        private Integer type;

        private CompanyPaymentMethodsListRequestBuilder() {
        }

        /**
         * Set currency
         * @param currency  (optional)
         * @return CompanyPaymentMethodsListRequestBuilder
         */
        public CompanyPaymentMethodsListRequestBuilder currency(Integer currency) {
            this.currency = currency;
            return this;
        }
        
        /**
         * Set format
         * @param format  (optional)
         * @return CompanyPaymentMethodsListRequestBuilder
         */
        public CompanyPaymentMethodsListRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy Which field to use when ordering the results. (optional)
         * @return CompanyPaymentMethodsListRequestBuilder
         */
        public CompanyPaymentMethodsListRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set page
         * @param page A page number within the paginated result set. (optional)
         * @return CompanyPaymentMethodsListRequestBuilder
         */
        public CompanyPaymentMethodsListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Number of results to return per page. (optional)
         * @return CompanyPaymentMethodsListRequestBuilder
         */
        public CompanyPaymentMethodsListRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set search
         * @param search A search term. (optional)
         * @return CompanyPaymentMethodsListRequestBuilder
         */
        public CompanyPaymentMethodsListRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return CompanyPaymentMethodsListRequestBuilder
         */
        public CompanyPaymentMethodsListRequestBuilder type(Integer type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for companyPaymentMethodsList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return companyPaymentMethodsListCall(currency, format, orderBy, page, pageSize, search, type, _callback);
        }


        /**
         * Execute companyPaymentMethodsList request
         * @return PaginatedCompanyPaymentMethodReadList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PaginatedCompanyPaymentMethodReadList execute() throws ApiException {
            ApiResponse<PaginatedCompanyPaymentMethodReadList> localVarResp = companyPaymentMethodsListWithHttpInfo(currency, format, orderBy, page, pageSize, search, type);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute companyPaymentMethodsList request with HTTP info returned
         * @return ApiResponse&lt;PaginatedCompanyPaymentMethodReadList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaginatedCompanyPaymentMethodReadList> executeWithHttpInfo() throws ApiException {
            return companyPaymentMethodsListWithHttpInfo(currency, format, orderBy, page, pageSize, search, type);
        }

        /**
         * Execute companyPaymentMethodsList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaginatedCompanyPaymentMethodReadList> _callback) throws ApiException {
            return companyPaymentMethodsListAsync(currency, format, orderBy, page, pageSize, search, type, _callback);
        }
    }

    /**
     * Get list of Company Payment Methods
     * **Payment Method Types:**  | Payment Method | Type      | |----------------|-----------| | OTHER          | 0         | | CHECK          | 1         | | CHEQUE         | 1         | | ACH            | 2         | | EFT            | 3         | | WIRE           | 4         |  **The context of &#39;data&#39; field varies based on different Payment Method type:**  | Payment Method | &#39;data&#39; field structure | |----------------|------------------------| | OTHER          | &#x60;&#x60;&#x60;{\&quot;description\&quot;: &lt;string&gt;}&#x60;&#x60;&#x60; | | CHECK/CHEQUE   | &#x60;&#x60;&#x60;{\&quot;payable_to\&quot;: &lt;string&gt;}&#x60;&#x60;&#x60;  | | ACH            | &#x60;&#x60;&#x60;{\&quot;routing_number\&quot;: &lt;string&gt;, \&quot;account_number\&quot;: &lt;string&gt;, \&quot;company_name\&quot;: &lt;string&gt;}&#x60;&#x60;&#x60; | 
     * @return CompanyPaymentMethodsListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CompanyPaymentMethodsListRequestBuilder companyPaymentMethodsList() throws IllegalArgumentException {
        return new CompanyPaymentMethodsListRequestBuilder();
    }
    private okhttp3.Call createCompanyPaymentMethodCall(CompanyPaymentMethodRequest companyPaymentMethodRequest, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = companyPaymentMethodRequest;

        // create path and map variables
        String localVarPath = "/api/v2/ap/company-payment-methods";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "",
            "application/xml",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCompanyPaymentMethodValidateBeforeCall(CompanyPaymentMethodRequest companyPaymentMethodRequest, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyPaymentMethodRequest' is set
        if (companyPaymentMethodRequest == null) {
            throw new ApiException("Missing the required parameter 'companyPaymentMethodRequest' when calling createCompanyPaymentMethod(Async)");
        }

        return createCompanyPaymentMethodCall(companyPaymentMethodRequest, format, _callback);

    }


    private ApiResponse<CompanyPaymentMethod> createCompanyPaymentMethodWithHttpInfo(CompanyPaymentMethodRequest companyPaymentMethodRequest, String format) throws ApiException {
        okhttp3.Call localVarCall = createCompanyPaymentMethodValidateBeforeCall(companyPaymentMethodRequest, format, null);
        Type localVarReturnType = new TypeToken<CompanyPaymentMethod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCompanyPaymentMethodAsync(CompanyPaymentMethodRequest companyPaymentMethodRequest, String format, final ApiCallback<CompanyPaymentMethod> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCompanyPaymentMethodValidateBeforeCall(companyPaymentMethodRequest, format, _callback);
        Type localVarReturnType = new TypeToken<CompanyPaymentMethod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCompanyPaymentMethodRequestBuilder {
        private final Map<String, Object> data;
        private String name;
        private PaymentMethodTypeEnum type;
        private Integer currency;
        private String glCode;
        private String format;

        private CreateCompanyPaymentMethodRequestBuilder(Map<String, Object> data) {
            this.data = data;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return CreateCompanyPaymentMethodRequestBuilder
         */
        public CreateCompanyPaymentMethodRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return CreateCompanyPaymentMethodRequestBuilder
         */
        public CreateCompanyPaymentMethodRequestBuilder type(PaymentMethodTypeEnum type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set currency
         * @param currency  (optional)
         * @return CreateCompanyPaymentMethodRequestBuilder
         */
        public CreateCompanyPaymentMethodRequestBuilder currency(Integer currency) {
            this.currency = currency;
            return this;
        }
        
        /**
         * Set glCode
         * @param glCode  (optional)
         * @return CreateCompanyPaymentMethodRequestBuilder
         */
        public CreateCompanyPaymentMethodRequestBuilder glCode(String glCode) {
            this.glCode = glCode;
            return this;
        }
        
        /**
         * Set format
         * @param format  (optional)
         * @return CreateCompanyPaymentMethodRequestBuilder
         */
        public CreateCompanyPaymentMethodRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for createCompanyPaymentMethod
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CompanyPaymentMethodRequest companyPaymentMethodRequest = buildBodyParams();
            return createCompanyPaymentMethodCall(companyPaymentMethodRequest, format, _callback);
        }

        private CompanyPaymentMethodRequest buildBodyParams() {
            CompanyPaymentMethodRequest companyPaymentMethodRequest = new CompanyPaymentMethodRequest();
            companyPaymentMethodRequest.name(this.name);
            companyPaymentMethodRequest.type(this.type);
            companyPaymentMethodRequest.data(this.data);
            companyPaymentMethodRequest.currency(this.currency);
            companyPaymentMethodRequest.glCode(this.glCode);
            return companyPaymentMethodRequest;
        }

        /**
         * Execute createCompanyPaymentMethod request
         * @return CompanyPaymentMethod
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CompanyPaymentMethod execute() throws ApiException {
            CompanyPaymentMethodRequest companyPaymentMethodRequest = buildBodyParams();
            ApiResponse<CompanyPaymentMethod> localVarResp = createCompanyPaymentMethodWithHttpInfo(companyPaymentMethodRequest, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCompanyPaymentMethod request with HTTP info returned
         * @return ApiResponse&lt;CompanyPaymentMethod&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompanyPaymentMethod> executeWithHttpInfo() throws ApiException {
            CompanyPaymentMethodRequest companyPaymentMethodRequest = buildBodyParams();
            return createCompanyPaymentMethodWithHttpInfo(companyPaymentMethodRequest, format);
        }

        /**
         * Execute createCompanyPaymentMethod request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompanyPaymentMethod> _callback) throws ApiException {
            CompanyPaymentMethodRequest companyPaymentMethodRequest = buildBodyParams();
            return createCompanyPaymentMethodAsync(companyPaymentMethodRequest, format, _callback);
        }
    }

    /**
     * Create Company Payment Method
     * **Payment Method Types:**  | Payment Method | Type      | |----------------|-----------| | OTHER          | 0         | | CHECK          | 1         | | CHEQUE         | 1         | | ACH            | 2         | | EFT            | 3         | | WIRE           | 4         |  **The context of &#39;data&#39; field varies based on different Payment Method type:**  | Payment Method | &#39;data&#39; field structure | |----------------|------------------------| | OTHER          | &#x60;&#x60;&#x60;{\&quot;description\&quot;: &lt;string&gt;}&#x60;&#x60;&#x60; | | CHECK/CHEQUE   | &#x60;&#x60;&#x60;{\&quot;payable_to\&quot;: &lt;string&gt;}&#x60;&#x60;&#x60;  | | ACH            | &#x60;&#x60;&#x60;{\&quot;routing_number\&quot;: &lt;string&gt;, \&quot;account_number\&quot;: &lt;string&gt;, \&quot;company_name\&quot;: &lt;string&gt;}&#x60;&#x60;&#x60; | 
     * @param companyPaymentMethodRequest  (required)
     * @return CreateCompanyPaymentMethodRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateCompanyPaymentMethodRequestBuilder createCompanyPaymentMethod(Map<String, Object> data) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        return new CreateCompanyPaymentMethodRequestBuilder(data);
    }
    private okhttp3.Call createVendorPaymentMethodCall(VendorPaymentMethodRequest vendorPaymentMethodRequest, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vendorPaymentMethodRequest;

        // create path and map variables
        String localVarPath = "/api/v2/ap/vendor-payment-methods";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "",
            "application/xml",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVendorPaymentMethodValidateBeforeCall(VendorPaymentMethodRequest vendorPaymentMethodRequest, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vendorPaymentMethodRequest' is set
        if (vendorPaymentMethodRequest == null) {
            throw new ApiException("Missing the required parameter 'vendorPaymentMethodRequest' when calling createVendorPaymentMethod(Async)");
        }

        return createVendorPaymentMethodCall(vendorPaymentMethodRequest, format, _callback);

    }


    private ApiResponse<VendorPaymentMethod> createVendorPaymentMethodWithHttpInfo(VendorPaymentMethodRequest vendorPaymentMethodRequest, String format) throws ApiException {
        okhttp3.Call localVarCall = createVendorPaymentMethodValidateBeforeCall(vendorPaymentMethodRequest, format, null);
        Type localVarReturnType = new TypeToken<VendorPaymentMethod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createVendorPaymentMethodAsync(VendorPaymentMethodRequest vendorPaymentMethodRequest, String format, final ApiCallback<VendorPaymentMethod> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVendorPaymentMethodValidateBeforeCall(vendorPaymentMethodRequest, format, _callback);
        Type localVarReturnType = new TypeToken<VendorPaymentMethod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateVendorPaymentMethodRequestBuilder {
        private final Integer vendor;
        private final Map<String, Object> data;
        private String name;
        private PaymentMethodTypeEnum type;
        private Integer currency;
        private String format;

        private CreateVendorPaymentMethodRequestBuilder(Integer vendor, Map<String, Object> data) {
            this.vendor = vendor;
            this.data = data;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return CreateVendorPaymentMethodRequestBuilder
         */
        public CreateVendorPaymentMethodRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return CreateVendorPaymentMethodRequestBuilder
         */
        public CreateVendorPaymentMethodRequestBuilder type(PaymentMethodTypeEnum type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set currency
         * @param currency  (optional)
         * @return CreateVendorPaymentMethodRequestBuilder
         */
        public CreateVendorPaymentMethodRequestBuilder currency(Integer currency) {
            this.currency = currency;
            return this;
        }
        
        /**
         * Set format
         * @param format  (optional)
         * @return CreateVendorPaymentMethodRequestBuilder
         */
        public CreateVendorPaymentMethodRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for createVendorPaymentMethod
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VendorPaymentMethodRequest vendorPaymentMethodRequest = buildBodyParams();
            return createVendorPaymentMethodCall(vendorPaymentMethodRequest, format, _callback);
        }

        private VendorPaymentMethodRequest buildBodyParams() {
            VendorPaymentMethodRequest vendorPaymentMethodRequest = new VendorPaymentMethodRequest();
            vendorPaymentMethodRequest.vendor(this.vendor);
            vendorPaymentMethodRequest.name(this.name);
            vendorPaymentMethodRequest.type(this.type);
            vendorPaymentMethodRequest.data(this.data);
            vendorPaymentMethodRequest.currency(this.currency);
            return vendorPaymentMethodRequest;
        }

        /**
         * Execute createVendorPaymentMethod request
         * @return VendorPaymentMethod
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public VendorPaymentMethod execute() throws ApiException {
            VendorPaymentMethodRequest vendorPaymentMethodRequest = buildBodyParams();
            ApiResponse<VendorPaymentMethod> localVarResp = createVendorPaymentMethodWithHttpInfo(vendorPaymentMethodRequest, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createVendorPaymentMethod request with HTTP info returned
         * @return ApiResponse&lt;VendorPaymentMethod&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VendorPaymentMethod> executeWithHttpInfo() throws ApiException {
            VendorPaymentMethodRequest vendorPaymentMethodRequest = buildBodyParams();
            return createVendorPaymentMethodWithHttpInfo(vendorPaymentMethodRequest, format);
        }

        /**
         * Execute createVendorPaymentMethod request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VendorPaymentMethod> _callback) throws ApiException {
            VendorPaymentMethodRequest vendorPaymentMethodRequest = buildBodyParams();
            return createVendorPaymentMethodAsync(vendorPaymentMethodRequest, format, _callback);
        }
    }

    /**
     * Create Vendor Payment Method
     * **Payment Method Types:**  | Payment Method | Type      | |----------------|-----------| | OTHER          | 0         | | CHECK          | 1         | | CHEQUE         | 1         | | ACH            | 2         | | EFT            | 3         | | WIRE           | 4         |  **The context of &#39;data&#39; field varies based on different Payment Method type:**  | Payment Method | &#39;data&#39; field structure | |----------------|------------------------| | OTHER          | &#x60;&#x60;&#x60;{\&quot;description\&quot;: &lt;string&gt;}&#x60;&#x60;&#x60; | | CHECK/CHEQUE   | &#x60;&#x60;&#x60;{\&quot;payable_to\&quot;: &lt;string&gt;}&#x60;&#x60;&#x60;  | | ACH            | &#x60;&#x60;&#x60;{\&quot;routing_number\&quot;: &lt;string&gt;, \&quot;account_number\&quot;: &lt;string&gt;, \&quot;company_name\&quot;: &lt;string&gt;}&#x60;&#x60;&#x60; | 
     * @param vendorPaymentMethodRequest  (required)
     * @return CreateVendorPaymentMethodRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateVendorPaymentMethodRequestBuilder createVendorPaymentMethod(Integer vendor, Map<String, Object> data) throws IllegalArgumentException {
        if (vendor == null) throw new IllegalArgumentException("\"vendor\" is required but got null");
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        return new CreateVendorPaymentMethodRequestBuilder(vendor, data);
    }
    private okhttp3.Call getPaymentsCall(String approver, Integer currency, String format, String orderBy, Integer page, Integer pageSize, LocalDate paymentDate0, LocalDate paymentDate1, Integer paymentMethodType, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/ap/payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (approver != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("approver", approver));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (paymentDate0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payment_date_0", paymentDate0));
        }

        if (paymentDate1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payment_date_1", paymentDate1));
        }

        if (paymentMethodType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payment_method__type", paymentMethodType));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentsValidateBeforeCall(String approver, Integer currency, String format, String orderBy, Integer page, Integer pageSize, LocalDate paymentDate0, LocalDate paymentDate1, Integer paymentMethodType, String search, final ApiCallback _callback) throws ApiException {
        return getPaymentsCall(approver, currency, format, orderBy, page, pageSize, paymentDate0, paymentDate1, paymentMethodType, search, _callback);

    }


    private ApiResponse<PaymentMetadataPaymentListRead> getPaymentsWithHttpInfo(String approver, Integer currency, String format, String orderBy, Integer page, Integer pageSize, LocalDate paymentDate0, LocalDate paymentDate1, Integer paymentMethodType, String search) throws ApiException {
        okhttp3.Call localVarCall = getPaymentsValidateBeforeCall(approver, currency, format, orderBy, page, pageSize, paymentDate0, paymentDate1, paymentMethodType, search, null);
        Type localVarReturnType = new TypeToken<PaymentMetadataPaymentListRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPaymentsAsync(String approver, Integer currency, String format, String orderBy, Integer page, Integer pageSize, LocalDate paymentDate0, LocalDate paymentDate1, Integer paymentMethodType, String search, final ApiCallback<PaymentMetadataPaymentListRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentsValidateBeforeCall(approver, currency, format, orderBy, page, pageSize, paymentDate0, paymentDate1, paymentMethodType, search, _callback);
        Type localVarReturnType = new TypeToken<PaymentMetadataPaymentListRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPaymentsRequestBuilder {
        private String approver;
        private Integer currency;
        private String format;
        private String orderBy;
        private Integer page;
        private Integer pageSize;
        private LocalDate paymentDate0;
        private LocalDate paymentDate1;
        private Integer paymentMethodType;
        private String search;

        private GetPaymentsRequestBuilder() {
        }

        /**
         * Set approver
         * @param approver  (optional)
         * @return GetPaymentsRequestBuilder
         */
        public GetPaymentsRequestBuilder approver(String approver) {
            this.approver = approver;
            return this;
        }
        
        /**
         * Set currency
         * @param currency  (optional)
         * @return GetPaymentsRequestBuilder
         */
        public GetPaymentsRequestBuilder currency(Integer currency) {
            this.currency = currency;
            return this;
        }
        
        /**
         * Set format
         * @param format  (optional)
         * @return GetPaymentsRequestBuilder
         */
        public GetPaymentsRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy Which field to use when ordering the results. (optional)
         * @return GetPaymentsRequestBuilder
         */
        public GetPaymentsRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set page
         * @param page A page number within the paginated result set. (optional)
         * @return GetPaymentsRequestBuilder
         */
        public GetPaymentsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Number of results to return per page. (optional)
         * @return GetPaymentsRequestBuilder
         */
        public GetPaymentsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set paymentDate0
         * @param paymentDate0  (optional)
         * @return GetPaymentsRequestBuilder
         */
        public GetPaymentsRequestBuilder paymentDate0(LocalDate paymentDate0) {
            this.paymentDate0 = paymentDate0;
            return this;
        }
        
        /**
         * Set paymentDate1
         * @param paymentDate1  (optional)
         * @return GetPaymentsRequestBuilder
         */
        public GetPaymentsRequestBuilder paymentDate1(LocalDate paymentDate1) {
            this.paymentDate1 = paymentDate1;
            return this;
        }
        
        /**
         * Set paymentMethodType
         * @param paymentMethodType  (optional)
         * @return GetPaymentsRequestBuilder
         */
        public GetPaymentsRequestBuilder paymentMethodType(Integer paymentMethodType) {
            this.paymentMethodType = paymentMethodType;
            return this;
        }
        
        /**
         * Set search
         * @param search A search term. (optional)
         * @return GetPaymentsRequestBuilder
         */
        public GetPaymentsRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Build call for getPayments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPaymentsCall(approver, currency, format, orderBy, page, pageSize, paymentDate0, paymentDate1, paymentMethodType, search, _callback);
        }


        /**
         * Execute getPayments request
         * @return PaymentMetadataPaymentListRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PaymentMetadataPaymentListRead execute() throws ApiException {
            ApiResponse<PaymentMetadataPaymentListRead> localVarResp = getPaymentsWithHttpInfo(approver, currency, format, orderBy, page, pageSize, paymentDate0, paymentDate1, paymentMethodType, search);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPayments request with HTTP info returned
         * @return ApiResponse&lt;PaymentMetadataPaymentListRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentMetadataPaymentListRead> executeWithHttpInfo() throws ApiException {
            return getPaymentsWithHttpInfo(approver, currency, format, orderBy, page, pageSize, paymentDate0, paymentDate1, paymentMethodType, search);
        }

        /**
         * Execute getPayments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentMetadataPaymentListRead> _callback) throws ApiException {
            return getPaymentsAsync(approver, currency, format, orderBy, page, pageSize, paymentDate0, paymentDate1, paymentMethodType, search, _callback);
        }
    }

    /**
     * Get Payments
     * 
     * @return GetPaymentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetPaymentsRequestBuilder getPayments() throws IllegalArgumentException {
        return new GetPaymentsRequestBuilder();
    }
    private okhttp3.Call itemsGetCall(Integer bill, UUID billUuid, Boolean billed, Integer budget, LocalDate createdAt0, LocalDate createdAt1, Double department, String exclude, String format, Double location, String orderBy, Integer page, Integer pageSize, LocalDate receivedOn0, LocalDate receivedOn1, Boolean reimburse, Double requester, String search, Integer vendor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/ap/items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bill != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bill", bill));
        }

        if (billUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bill_uuid", billUuid));
        }

        if (billed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("billed", billed));
        }

        if (budget != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("budget", budget));
        }

        if (createdAt0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at_0", createdAt0));
        }

        if (createdAt1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at_1", createdAt1));
        }

        if (department != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("department", department));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (receivedOn0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("received_on_0", receivedOn0));
        }

        if (receivedOn1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("received_on_1", receivedOn1));
        }

        if (reimburse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reimburse", reimburse));
        }

        if (requester != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("requester", requester));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (vendor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vendor", vendor));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call itemsGetValidateBeforeCall(Integer bill, UUID billUuid, Boolean billed, Integer budget, LocalDate createdAt0, LocalDate createdAt1, Double department, String exclude, String format, Double location, String orderBy, Integer page, Integer pageSize, LocalDate receivedOn0, LocalDate receivedOn1, Boolean reimburse, Double requester, String search, Integer vendor, final ApiCallback _callback) throws ApiException {
        return itemsGetCall(bill, billUuid, billed, budget, createdAt0, createdAt1, department, exclude, format, location, orderBy, page, pageSize, receivedOn0, receivedOn1, reimburse, requester, search, vendor, _callback);

    }


    private ApiResponse<ItemMetadataItemRead> itemsGetWithHttpInfo(Integer bill, UUID billUuid, Boolean billed, Integer budget, LocalDate createdAt0, LocalDate createdAt1, Double department, String exclude, String format, Double location, String orderBy, Integer page, Integer pageSize, LocalDate receivedOn0, LocalDate receivedOn1, Boolean reimburse, Double requester, String search, Integer vendor) throws ApiException {
        okhttp3.Call localVarCall = itemsGetValidateBeforeCall(bill, billUuid, billed, budget, createdAt0, createdAt1, department, exclude, format, location, orderBy, page, pageSize, receivedOn0, receivedOn1, reimburse, requester, search, vendor, null);
        Type localVarReturnType = new TypeToken<ItemMetadataItemRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call itemsGetAsync(Integer bill, UUID billUuid, Boolean billed, Integer budget, LocalDate createdAt0, LocalDate createdAt1, Double department, String exclude, String format, Double location, String orderBy, Integer page, Integer pageSize, LocalDate receivedOn0, LocalDate receivedOn1, Boolean reimburse, Double requester, String search, Integer vendor, final ApiCallback<ItemMetadataItemRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = itemsGetValidateBeforeCall(bill, billUuid, billed, budget, createdAt0, createdAt1, department, exclude, format, location, orderBy, page, pageSize, receivedOn0, receivedOn1, reimburse, requester, search, vendor, _callback);
        Type localVarReturnType = new TypeToken<ItemMetadataItemRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ItemsGetRequestBuilder {
        private Integer bill;
        private UUID billUuid;
        private Boolean billed;
        private Integer budget;
        private LocalDate createdAt0;
        private LocalDate createdAt1;
        private Double department;
        private String exclude;
        private String format;
        private Double location;
        private String orderBy;
        private Integer page;
        private Integer pageSize;
        private LocalDate receivedOn0;
        private LocalDate receivedOn1;
        private Boolean reimburse;
        private Double requester;
        private String search;
        private Integer vendor;

        private ItemsGetRequestBuilder() {
        }

        /**
         * Set bill
         * @param bill  (optional)
         * @return ItemsGetRequestBuilder
         */
        public ItemsGetRequestBuilder bill(Integer bill) {
            this.bill = bill;
            return this;
        }
        
        /**
         * Set billUuid
         * @param billUuid  (optional)
         * @return ItemsGetRequestBuilder
         */
        public ItemsGetRequestBuilder billUuid(UUID billUuid) {
            this.billUuid = billUuid;
            return this;
        }
        
        /**
         * Set billed
         * @param billed  (optional)
         * @return ItemsGetRequestBuilder
         */
        public ItemsGetRequestBuilder billed(Boolean billed) {
            this.billed = billed;
            return this;
        }
        
        /**
         * Set budget
         * @param budget  (optional)
         * @return ItemsGetRequestBuilder
         */
        public ItemsGetRequestBuilder budget(Integer budget) {
            this.budget = budget;
            return this;
        }
        
        /**
         * Set createdAt0
         * @param createdAt0  (optional)
         * @return ItemsGetRequestBuilder
         */
        public ItemsGetRequestBuilder createdAt0(LocalDate createdAt0) {
            this.createdAt0 = createdAt0;
            return this;
        }
        
        /**
         * Set createdAt1
         * @param createdAt1  (optional)
         * @return ItemsGetRequestBuilder
         */
        public ItemsGetRequestBuilder createdAt1(LocalDate createdAt1) {
            this.createdAt1 = createdAt1;
            return this;
        }
        
        /**
         * Set department
         * @param department  (optional)
         * @return ItemsGetRequestBuilder
         */
        public ItemsGetRequestBuilder department(Double department) {
            this.department = department;
            return this;
        }
        
        /**
         * Set exclude
         * @param exclude  (optional)
         * @return ItemsGetRequestBuilder
         */
        public ItemsGetRequestBuilder exclude(String exclude) {
            this.exclude = exclude;
            return this;
        }
        
        /**
         * Set format
         * @param format  (optional)
         * @return ItemsGetRequestBuilder
         */
        public ItemsGetRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return ItemsGetRequestBuilder
         */
        public ItemsGetRequestBuilder location(Double location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy Which field to use when ordering the results. (optional)
         * @return ItemsGetRequestBuilder
         */
        public ItemsGetRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set page
         * @param page A page number within the paginated result set. (optional)
         * @return ItemsGetRequestBuilder
         */
        public ItemsGetRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Number of results to return per page. (optional)
         * @return ItemsGetRequestBuilder
         */
        public ItemsGetRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set receivedOn0
         * @param receivedOn0  (optional)
         * @return ItemsGetRequestBuilder
         */
        public ItemsGetRequestBuilder receivedOn0(LocalDate receivedOn0) {
            this.receivedOn0 = receivedOn0;
            return this;
        }
        
        /**
         * Set receivedOn1
         * @param receivedOn1  (optional)
         * @return ItemsGetRequestBuilder
         */
        public ItemsGetRequestBuilder receivedOn1(LocalDate receivedOn1) {
            this.receivedOn1 = receivedOn1;
            return this;
        }
        
        /**
         * Set reimburse
         * @param reimburse  (optional)
         * @return ItemsGetRequestBuilder
         */
        public ItemsGetRequestBuilder reimburse(Boolean reimburse) {
            this.reimburse = reimburse;
            return this;
        }
        
        /**
         * Set requester
         * @param requester  (optional)
         * @return ItemsGetRequestBuilder
         */
        public ItemsGetRequestBuilder requester(Double requester) {
            this.requester = requester;
            return this;
        }
        
        /**
         * Set search
         * @param search A search term. (optional)
         * @return ItemsGetRequestBuilder
         */
        public ItemsGetRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Set vendor
         * @param vendor  (optional)
         * @return ItemsGetRequestBuilder
         */
        public ItemsGetRequestBuilder vendor(Integer vendor) {
            this.vendor = vendor;
            return this;
        }
        
        /**
         * Build call for itemsGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return itemsGetCall(bill, billUuid, billed, budget, createdAt0, createdAt1, department, exclude, format, location, orderBy, page, pageSize, receivedOn0, receivedOn1, reimburse, requester, search, vendor, _callback);
        }


        /**
         * Execute itemsGet request
         * @return ItemMetadataItemRead
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ItemMetadataItemRead execute() throws ApiException {
            ApiResponse<ItemMetadataItemRead> localVarResp = itemsGetWithHttpInfo(bill, billUuid, billed, budget, createdAt0, createdAt1, department, exclude, format, location, orderBy, page, pageSize, receivedOn0, receivedOn1, reimburse, requester, search, vendor);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute itemsGet request with HTTP info returned
         * @return ApiResponse&lt;ItemMetadataItemRead&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ItemMetadataItemRead> executeWithHttpInfo() throws ApiException {
            return itemsGetWithHttpInfo(bill, billUuid, billed, budget, createdAt0, createdAt1, department, exclude, format, location, orderBy, page, pageSize, receivedOn0, receivedOn1, reimburse, requester, search, vendor);
        }

        /**
         * Execute itemsGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ItemMetadataItemRead> _callback) throws ApiException {
            return itemsGetAsync(bill, billUuid, billed, budget, createdAt0, createdAt1, department, exclude, format, location, orderBy, page, pageSize, receivedOn0, receivedOn1, reimburse, requester, search, vendor, _callback);
        }
    }

    /**
     * Get Unbilled/Billed Items
     *  
     * @return ItemsGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ItemsGetRequestBuilder itemsGet() throws IllegalArgumentException {
        return new ItemsGetRequestBuilder();
    }
    private okhttp3.Call paymentsApproverChoicesRetrieveCall(Integer id, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/ap/payments/{id}/approver-choices"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentsApproverChoicesRetrieveValidateBeforeCall(Integer id, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling paymentsApproverChoicesRetrieve(Async)");
        }

        return paymentsApproverChoicesRetrieveCall(id, format, _callback);

    }


    private ApiResponse<ApproverChoicesMetadataApproverReadDocs> paymentsApproverChoicesRetrieveWithHttpInfo(Integer id, String format) throws ApiException {
        okhttp3.Call localVarCall = paymentsApproverChoicesRetrieveValidateBeforeCall(id, format, null);
        Type localVarReturnType = new TypeToken<ApproverChoicesMetadataApproverReadDocs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call paymentsApproverChoicesRetrieveAsync(Integer id, String format, final ApiCallback<ApproverChoicesMetadataApproverReadDocs> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentsApproverChoicesRetrieveValidateBeforeCall(id, format, _callback);
        Type localVarReturnType = new TypeToken<ApproverChoicesMetadataApproverReadDocs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PaymentsApproverChoicesRetrieveRequestBuilder {
        private final Integer id;
        private String format;

        private PaymentsApproverChoicesRetrieveRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set format
         * @param format  (optional)
         * @return PaymentsApproverChoicesRetrieveRequestBuilder
         */
        public PaymentsApproverChoicesRetrieveRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for paymentsApproverChoicesRetrieve
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return paymentsApproverChoicesRetrieveCall(id, format, _callback);
        }


        /**
         * Execute paymentsApproverChoicesRetrieve request
         * @return ApproverChoicesMetadataApproverReadDocs
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApproverChoicesMetadataApproverReadDocs execute() throws ApiException {
            ApiResponse<ApproverChoicesMetadataApproverReadDocs> localVarResp = paymentsApproverChoicesRetrieveWithHttpInfo(id, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute paymentsApproverChoicesRetrieve request with HTTP info returned
         * @return ApiResponse&lt;ApproverChoicesMetadataApproverReadDocs&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApproverChoicesMetadataApproverReadDocs> executeWithHttpInfo() throws ApiException {
            return paymentsApproverChoicesRetrieveWithHttpInfo(id, format);
        }

        /**
         * Execute paymentsApproverChoicesRetrieve request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApproverChoicesMetadataApproverReadDocs> _callback) throws ApiException {
            return paymentsApproverChoicesRetrieveAsync(id, format, _callback);
        }
    }

    /**
     * Get Approver Choices
     * 
     * @param id A unique integer value identifying this payment. (required)
     * @return PaymentsApproverChoicesRetrieveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaymentsApproverChoicesRetrieveRequestBuilder paymentsApproverChoicesRetrieve(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new PaymentsApproverChoicesRetrieveRequestBuilder(id);
    }
    private okhttp3.Call vendorPaymentMethodsListCall(Integer currency, String format, String orderBy, Integer page, Integer pageSize, String search, Integer type, Integer vendor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/ap/vendor-payment-methods";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (vendor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vendor", vendor));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vendorPaymentMethodsListValidateBeforeCall(Integer currency, String format, String orderBy, Integer page, Integer pageSize, String search, Integer type, Integer vendor, final ApiCallback _callback) throws ApiException {
        return vendorPaymentMethodsListCall(currency, format, orderBy, page, pageSize, search, type, vendor, _callback);

    }


    private ApiResponse<PaginatedVendorPaymentMethodReadList> vendorPaymentMethodsListWithHttpInfo(Integer currency, String format, String orderBy, Integer page, Integer pageSize, String search, Integer type, Integer vendor) throws ApiException {
        okhttp3.Call localVarCall = vendorPaymentMethodsListValidateBeforeCall(currency, format, orderBy, page, pageSize, search, type, vendor, null);
        Type localVarReturnType = new TypeToken<PaginatedVendorPaymentMethodReadList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call vendorPaymentMethodsListAsync(Integer currency, String format, String orderBy, Integer page, Integer pageSize, String search, Integer type, Integer vendor, final ApiCallback<PaginatedVendorPaymentMethodReadList> _callback) throws ApiException {

        okhttp3.Call localVarCall = vendorPaymentMethodsListValidateBeforeCall(currency, format, orderBy, page, pageSize, search, type, vendor, _callback);
        Type localVarReturnType = new TypeToken<PaginatedVendorPaymentMethodReadList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VendorPaymentMethodsListRequestBuilder {
        private Integer currency;
        private String format;
        private String orderBy;
        private Integer page;
        private Integer pageSize;
        private String search;
        private Integer type;
        private Integer vendor;

        private VendorPaymentMethodsListRequestBuilder() {
        }

        /**
         * Set currency
         * @param currency  (optional)
         * @return VendorPaymentMethodsListRequestBuilder
         */
        public VendorPaymentMethodsListRequestBuilder currency(Integer currency) {
            this.currency = currency;
            return this;
        }
        
        /**
         * Set format
         * @param format  (optional)
         * @return VendorPaymentMethodsListRequestBuilder
         */
        public VendorPaymentMethodsListRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy Which field to use when ordering the results. (optional)
         * @return VendorPaymentMethodsListRequestBuilder
         */
        public VendorPaymentMethodsListRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set page
         * @param page A page number within the paginated result set. (optional)
         * @return VendorPaymentMethodsListRequestBuilder
         */
        public VendorPaymentMethodsListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Number of results to return per page. (optional)
         * @return VendorPaymentMethodsListRequestBuilder
         */
        public VendorPaymentMethodsListRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set search
         * @param search A search term. (optional)
         * @return VendorPaymentMethodsListRequestBuilder
         */
        public VendorPaymentMethodsListRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return VendorPaymentMethodsListRequestBuilder
         */
        public VendorPaymentMethodsListRequestBuilder type(Integer type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set vendor
         * @param vendor  (optional)
         * @return VendorPaymentMethodsListRequestBuilder
         */
        public VendorPaymentMethodsListRequestBuilder vendor(Integer vendor) {
            this.vendor = vendor;
            return this;
        }
        
        /**
         * Build call for vendorPaymentMethodsList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return vendorPaymentMethodsListCall(currency, format, orderBy, page, pageSize, search, type, vendor, _callback);
        }


        /**
         * Execute vendorPaymentMethodsList request
         * @return PaginatedVendorPaymentMethodReadList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PaginatedVendorPaymentMethodReadList execute() throws ApiException {
            ApiResponse<PaginatedVendorPaymentMethodReadList> localVarResp = vendorPaymentMethodsListWithHttpInfo(currency, format, orderBy, page, pageSize, search, type, vendor);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute vendorPaymentMethodsList request with HTTP info returned
         * @return ApiResponse&lt;PaginatedVendorPaymentMethodReadList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaginatedVendorPaymentMethodReadList> executeWithHttpInfo() throws ApiException {
            return vendorPaymentMethodsListWithHttpInfo(currency, format, orderBy, page, pageSize, search, type, vendor);
        }

        /**
         * Execute vendorPaymentMethodsList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaginatedVendorPaymentMethodReadList> _callback) throws ApiException {
            return vendorPaymentMethodsListAsync(currency, format, orderBy, page, pageSize, search, type, vendor, _callback);
        }
    }

    /**
     * Get list of Vendor Payment Methods
     * **Payment Method Types:**  | Payment Method | Type      | |----------------|-----------| | OTHER          | 0         | | CHECK          | 1         | | CHEQUE         | 1         | | ACH            | 2         | | EFT            | 3         | | WIRE           | 4         |  **The context of &#39;data&#39; field varies based on different Payment Method type:**  | Payment Method | &#39;data&#39; field structure | |----------------|------------------------| | OTHER          | &#x60;&#x60;&#x60;{\&quot;description\&quot;: &lt;string&gt;}&#x60;&#x60;&#x60; | | CHECK/CHEQUE   | &#x60;&#x60;&#x60;{\&quot;payable_to\&quot;: &lt;string&gt;}&#x60;&#x60;&#x60;  | | ACH            | &#x60;&#x60;&#x60;{\&quot;routing_number\&quot;: &lt;string&gt;, \&quot;account_number\&quot;: &lt;string&gt;, \&quot;company_name\&quot;: &lt;string&gt;}&#x60;&#x60;&#x60; | 
     * @return VendorPaymentMethodsListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VendorPaymentMethodsListRequestBuilder vendorPaymentMethodsList() throws IllegalArgumentException {
        return new VendorPaymentMethodsListRequestBuilder();
    }
}
