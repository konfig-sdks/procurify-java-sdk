/*
 * Procurify API Documentation
 *  # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import com.konfigthis.client.model.PaginatedOrderItemList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OrderItemsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrderItemsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OrderItemsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call listItemsCall(Integer account, Integer accountCode, Boolean active, LocalDate approvedDatetime0, LocalDate approvedDatetime1, Double approvedPrice, Double approvedQuantity, Double approver, Double approverId, Integer branch, Boolean catalog, String catalogItem, Integer currency, Integer department, String departments, String exclude, Boolean excludePunchout, String format, String fulfilmentStatus, Boolean isPurchased, Boolean isRecurring, Integer lastChangedBy, LocalDate lastModified0, LocalDate lastModified1, String lineComment, Integer location, String locations, String name, String num, Integer orderNum, Integer orderNumStatus, String orderBy, LocalDate orderCreatedDate0, LocalDate orderCreatedDate1, Integer page, Integer pageSize, LocalDate poCreatedDate0, LocalDate poCreatedDate1, Integer poVendor, Integer prefVendor, Double price, Double purchaseAgreement, LocalDate purchasedDate0, LocalDate purchasedDate1, Integer purchaser, Double quantity, Double receivedFailQty, Double receivedPassQty, Integer requester, String search, String sku, Integer status, Integer type, String unit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/order-items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (account != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account", account));
        }

        if (accountCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_code", accountCode));
        }

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (approvedDatetime0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("approved_datetime_0", approvedDatetime0));
        }

        if (approvedDatetime1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("approved_datetime_1", approvedDatetime1));
        }

        if (approvedPrice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("approved_price", approvedPrice));
        }

        if (approvedQuantity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("approved_quantity", approvedQuantity));
        }

        if (approver != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("approver", approver));
        }

        if (approverId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("approver_id", approverId));
        }

        if (branch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branch", branch));
        }

        if (catalog != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("catalog", catalog));
        }

        if (catalogItem != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("catalog_item", catalogItem));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (department != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("department", department));
        }

        if (departments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departments", departments));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (excludePunchout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_punchout", excludePunchout));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (fulfilmentStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fulfilment_status", fulfilmentStatus));
        }

        if (isPurchased != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_purchased", isPurchased));
        }

        if (isRecurring != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_recurring", isRecurring));
        }

        if (lastChangedBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_changed_by", lastChangedBy));
        }

        if (lastModified0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_modified_0", lastModified0));
        }

        if (lastModified1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_modified_1", lastModified1));
        }

        if (lineComment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lineComment", lineComment));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (locations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locations", locations));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (num != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("num", num));
        }

        if (orderNum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderNum", orderNum));
        }

        if (orderNumStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderNum__status", orderNumStatus));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (orderCreatedDate0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_created_date_0", orderCreatedDate0));
        }

        if (orderCreatedDate1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_created_date_1", orderCreatedDate1));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (poCreatedDate0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("po_created_date_0", poCreatedDate0));
        }

        if (poCreatedDate1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("po_created_date_1", poCreatedDate1));
        }

        if (poVendor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("po_vendor", poVendor));
        }

        if (prefVendor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pref_vendor", prefVendor));
        }

        if (price != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price", price));
        }

        if (purchaseAgreement != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("purchase_agreement", purchaseAgreement));
        }

        if (purchasedDate0 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("purchased_date_0", purchasedDate0));
        }

        if (purchasedDate1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("purchased_date_1", purchasedDate1));
        }

        if (purchaser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("purchaser", purchaser));
        }

        if (quantity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quantity", quantity));
        }

        if (receivedFailQty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("receivedFailQty", receivedFailQty));
        }

        if (receivedPassQty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("receivedPassQty", receivedPassQty));
        }

        if (requester != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("requester", requester));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (sku != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sku", sku));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (unit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unit", unit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listItemsValidateBeforeCall(Integer account, Integer accountCode, Boolean active, LocalDate approvedDatetime0, LocalDate approvedDatetime1, Double approvedPrice, Double approvedQuantity, Double approver, Double approverId, Integer branch, Boolean catalog, String catalogItem, Integer currency, Integer department, String departments, String exclude, Boolean excludePunchout, String format, String fulfilmentStatus, Boolean isPurchased, Boolean isRecurring, Integer lastChangedBy, LocalDate lastModified0, LocalDate lastModified1, String lineComment, Integer location, String locations, String name, String num, Integer orderNum, Integer orderNumStatus, String orderBy, LocalDate orderCreatedDate0, LocalDate orderCreatedDate1, Integer page, Integer pageSize, LocalDate poCreatedDate0, LocalDate poCreatedDate1, Integer poVendor, Integer prefVendor, Double price, Double purchaseAgreement, LocalDate purchasedDate0, LocalDate purchasedDate1, Integer purchaser, Double quantity, Double receivedFailQty, Double receivedPassQty, Integer requester, String search, String sku, Integer status, Integer type, String unit, final ApiCallback _callback) throws ApiException {
        return listItemsCall(account, accountCode, active, approvedDatetime0, approvedDatetime1, approvedPrice, approvedQuantity, approver, approverId, branch, catalog, catalogItem, currency, department, departments, exclude, excludePunchout, format, fulfilmentStatus, isPurchased, isRecurring, lastChangedBy, lastModified0, lastModified1, lineComment, location, locations, name, num, orderNum, orderNumStatus, orderBy, orderCreatedDate0, orderCreatedDate1, page, pageSize, poCreatedDate0, poCreatedDate1, poVendor, prefVendor, price, purchaseAgreement, purchasedDate0, purchasedDate1, purchaser, quantity, receivedFailQty, receivedPassQty, requester, search, sku, status, type, unit, _callback);

    }


    private ApiResponse<PaginatedOrderItemList> listItemsWithHttpInfo(Integer account, Integer accountCode, Boolean active, LocalDate approvedDatetime0, LocalDate approvedDatetime1, Double approvedPrice, Double approvedQuantity, Double approver, Double approverId, Integer branch, Boolean catalog, String catalogItem, Integer currency, Integer department, String departments, String exclude, Boolean excludePunchout, String format, String fulfilmentStatus, Boolean isPurchased, Boolean isRecurring, Integer lastChangedBy, LocalDate lastModified0, LocalDate lastModified1, String lineComment, Integer location, String locations, String name, String num, Integer orderNum, Integer orderNumStatus, String orderBy, LocalDate orderCreatedDate0, LocalDate orderCreatedDate1, Integer page, Integer pageSize, LocalDate poCreatedDate0, LocalDate poCreatedDate1, Integer poVendor, Integer prefVendor, Double price, Double purchaseAgreement, LocalDate purchasedDate0, LocalDate purchasedDate1, Integer purchaser, Double quantity, Double receivedFailQty, Double receivedPassQty, Integer requester, String search, String sku, Integer status, Integer type, String unit) throws ApiException {
        okhttp3.Call localVarCall = listItemsValidateBeforeCall(account, accountCode, active, approvedDatetime0, approvedDatetime1, approvedPrice, approvedQuantity, approver, approverId, branch, catalog, catalogItem, currency, department, departments, exclude, excludePunchout, format, fulfilmentStatus, isPurchased, isRecurring, lastChangedBy, lastModified0, lastModified1, lineComment, location, locations, name, num, orderNum, orderNumStatus, orderBy, orderCreatedDate0, orderCreatedDate1, page, pageSize, poCreatedDate0, poCreatedDate1, poVendor, prefVendor, price, purchaseAgreement, purchasedDate0, purchasedDate1, purchaser, quantity, receivedFailQty, receivedPassQty, requester, search, sku, status, type, unit, null);
        Type localVarReturnType = new TypeToken<PaginatedOrderItemList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listItemsAsync(Integer account, Integer accountCode, Boolean active, LocalDate approvedDatetime0, LocalDate approvedDatetime1, Double approvedPrice, Double approvedQuantity, Double approver, Double approverId, Integer branch, Boolean catalog, String catalogItem, Integer currency, Integer department, String departments, String exclude, Boolean excludePunchout, String format, String fulfilmentStatus, Boolean isPurchased, Boolean isRecurring, Integer lastChangedBy, LocalDate lastModified0, LocalDate lastModified1, String lineComment, Integer location, String locations, String name, String num, Integer orderNum, Integer orderNumStatus, String orderBy, LocalDate orderCreatedDate0, LocalDate orderCreatedDate1, Integer page, Integer pageSize, LocalDate poCreatedDate0, LocalDate poCreatedDate1, Integer poVendor, Integer prefVendor, Double price, Double purchaseAgreement, LocalDate purchasedDate0, LocalDate purchasedDate1, Integer purchaser, Double quantity, Double receivedFailQty, Double receivedPassQty, Integer requester, String search, String sku, Integer status, Integer type, String unit, final ApiCallback<PaginatedOrderItemList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listItemsValidateBeforeCall(account, accountCode, active, approvedDatetime0, approvedDatetime1, approvedPrice, approvedQuantity, approver, approverId, branch, catalog, catalogItem, currency, department, departments, exclude, excludePunchout, format, fulfilmentStatus, isPurchased, isRecurring, lastChangedBy, lastModified0, lastModified1, lineComment, location, locations, name, num, orderNum, orderNumStatus, orderBy, orderCreatedDate0, orderCreatedDate1, page, pageSize, poCreatedDate0, poCreatedDate1, poVendor, prefVendor, price, purchaseAgreement, purchasedDate0, purchasedDate1, purchaser, quantity, receivedFailQty, receivedPassQty, requester, search, sku, status, type, unit, _callback);
        Type localVarReturnType = new TypeToken<PaginatedOrderItemList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListItemsRequestBuilder {
        private Integer account;
        private Integer accountCode;
        private Boolean active;
        private LocalDate approvedDatetime0;
        private LocalDate approvedDatetime1;
        private Double approvedPrice;
        private Double approvedQuantity;
        private Double approver;
        private Double approverId;
        private Integer branch;
        private Boolean catalog;
        private String catalogItem;
        private Integer currency;
        private Integer department;
        private String departments;
        private String exclude;
        private Boolean excludePunchout;
        private String format;
        private String fulfilmentStatus;
        private Boolean isPurchased;
        private Boolean isRecurring;
        private Integer lastChangedBy;
        private LocalDate lastModified0;
        private LocalDate lastModified1;
        private String lineComment;
        private Integer location;
        private String locations;
        private String name;
        private String num;
        private Integer orderNum;
        private Integer orderNumStatus;
        private String orderBy;
        private LocalDate orderCreatedDate0;
        private LocalDate orderCreatedDate1;
        private Integer page;
        private Integer pageSize;
        private LocalDate poCreatedDate0;
        private LocalDate poCreatedDate1;
        private Integer poVendor;
        private Integer prefVendor;
        private Double price;
        private Double purchaseAgreement;
        private LocalDate purchasedDate0;
        private LocalDate purchasedDate1;
        private Integer purchaser;
        private Double quantity;
        private Double receivedFailQty;
        private Double receivedPassQty;
        private Integer requester;
        private String search;
        private String sku;
        private Integer status;
        private Integer type;
        private String unit;

        private ListItemsRequestBuilder() {
        }

        /**
         * Set account
         * @param account  (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder account(Integer account) {
            this.account = account;
            return this;
        }
        
        /**
         * Set accountCode
         * @param accountCode Account Code (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder accountCode(Integer accountCode) {
            this.accountCode = accountCode;
            return this;
        }
        
        /**
         * Set active
         * @param active  (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Set approvedDatetime0
         * @param approvedDatetime0 Approved Date (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder approvedDatetime0(LocalDate approvedDatetime0) {
            this.approvedDatetime0 = approvedDatetime0;
            return this;
        }
        
        /**
         * Set approvedDatetime1
         * @param approvedDatetime1 Approved Date (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder approvedDatetime1(LocalDate approvedDatetime1) {
            this.approvedDatetime1 = approvedDatetime1;
            return this;
        }
        
        /**
         * Set approvedPrice
         * @param approvedPrice  (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder approvedPrice(Double approvedPrice) {
            this.approvedPrice = approvedPrice;
            return this;
        }
        
        /**
         * Set approvedQuantity
         * @param approvedQuantity  (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder approvedQuantity(Double approvedQuantity) {
            this.approvedQuantity = approvedQuantity;
            return this;
        }
        
        /**
         * Set approver
         * @param approver  (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder approver(Double approver) {
            this.approver = approver;
            return this;
        }
        
        /**
         * Set approverId
         * @param approverId  (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder approverId(Double approverId) {
            this.approverId = approverId;
            return this;
        }
        
        /**
         * Set branch
         * @param branch Location (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder branch(Integer branch) {
            this.branch = branch;
            return this;
        }
        
        /**
         * Set catalog
         * @param catalog  (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder catalog(Boolean catalog) {
            this.catalog = catalog;
            return this;
        }
        
        /**
         * Set catalogItem
         * @param catalogItem A comma-separated list of integers. (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder catalogItem(String catalogItem) {
            this.catalogItem = catalogItem;
            return this;
        }
        
        /**
         * Set currency
         * @param currency  (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder currency(Integer currency) {
            this.currency = currency;
            return this;
        }
        
        /**
         * Set department
         * @param department Department (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder department(Integer department) {
            this.department = department;
            return this;
        }
        
        /**
         * Set departments
         * @param departments A comma-separated list of integers. (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder departments(String departments) {
            this.departments = departments;
            return this;
        }
        
        /**
         * Set exclude
         * @param exclude A comma-separated list of integers. (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder exclude(String exclude) {
            this.exclude = exclude;
            return this;
        }
        
        /**
         * Set excludePunchout
         * @param excludePunchout  (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder excludePunchout(Boolean excludePunchout) {
            this.excludePunchout = excludePunchout;
            return this;
        }
        
        /**
         * Set format
         * @param format  (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set fulfilmentStatus
         * @param fulfilmentStatus  (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder fulfilmentStatus(String fulfilmentStatus) {
            this.fulfilmentStatus = fulfilmentStatus;
            return this;
        }
        
        /**
         * Set isPurchased
         * @param isPurchased  (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder isPurchased(Boolean isPurchased) {
            this.isPurchased = isPurchased;
            return this;
        }
        
        /**
         * Set isRecurring
         * @param isRecurring  (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder isRecurring(Boolean isRecurring) {
            this.isRecurring = isRecurring;
            return this;
        }
        
        /**
         * Set lastChangedBy
         * @param lastChangedBy  (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder lastChangedBy(Integer lastChangedBy) {
            this.lastChangedBy = lastChangedBy;
            return this;
        }
        
        /**
         * Set lastModified0
         * @param lastModified0 Last Modified Date (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder lastModified0(LocalDate lastModified0) {
            this.lastModified0 = lastModified0;
            return this;
        }
        
        /**
         * Set lastModified1
         * @param lastModified1 Last Modified Date (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder lastModified1(LocalDate lastModified1) {
            this.lastModified1 = lastModified1;
            return this;
        }
        
        /**
         * Set lineComment
         * @param lineComment  (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder lineComment(String lineComment) {
            this.lineComment = lineComment;
            return this;
        }
        
        /**
         * Set location
         * @param location Location (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder location(Integer location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set locations
         * @param locations A comma-separated list of integers. (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder locations(String locations) {
            this.locations = locations;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set num
         * @param num  (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder num(String num) {
            this.num = num;
            return this;
        }
        
        /**
         * Set orderNum
         * @param orderNum  (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder orderNum(Integer orderNum) {
            this.orderNum = orderNum;
            return this;
        }
        
        /**
         * Set orderNumStatus
         * @param orderNumStatus  (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder orderNumStatus(Integer orderNumStatus) {
            this.orderNumStatus = orderNumStatus;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy Which field to use when ordering the results. (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set orderCreatedDate0
         * @param orderCreatedDate0 Order Created Date (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder orderCreatedDate0(LocalDate orderCreatedDate0) {
            this.orderCreatedDate0 = orderCreatedDate0;
            return this;
        }
        
        /**
         * Set orderCreatedDate1
         * @param orderCreatedDate1 Order Created Date (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder orderCreatedDate1(LocalDate orderCreatedDate1) {
            this.orderCreatedDate1 = orderCreatedDate1;
            return this;
        }
        
        /**
         * Set page
         * @param page A page number within the paginated result set. (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Number of results to return per page. (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set poCreatedDate0
         * @param poCreatedDate0 Purchased Date (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder poCreatedDate0(LocalDate poCreatedDate0) {
            this.poCreatedDate0 = poCreatedDate0;
            return this;
        }
        
        /**
         * Set poCreatedDate1
         * @param poCreatedDate1 Purchased Date (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder poCreatedDate1(LocalDate poCreatedDate1) {
            this.poCreatedDate1 = poCreatedDate1;
            return this;
        }
        
        /**
         * Set poVendor
         * @param poVendor Purchased Vendor (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder poVendor(Integer poVendor) {
            this.poVendor = poVendor;
            return this;
        }
        
        /**
         * Set prefVendor
         * @param prefVendor  (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder prefVendor(Integer prefVendor) {
            this.prefVendor = prefVendor;
            return this;
        }
        
        /**
         * Set price
         * @param price  (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder price(Double price) {
            this.price = price;
            return this;
        }
        
        /**
         * Set purchaseAgreement
         * @param purchaseAgreement  (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder purchaseAgreement(Double purchaseAgreement) {
            this.purchaseAgreement = purchaseAgreement;
            return this;
        }
        
        /**
         * Set purchasedDate0
         * @param purchasedDate0 Purchased Date (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder purchasedDate0(LocalDate purchasedDate0) {
            this.purchasedDate0 = purchasedDate0;
            return this;
        }
        
        /**
         * Set purchasedDate1
         * @param purchasedDate1 Purchased Date (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder purchasedDate1(LocalDate purchasedDate1) {
            this.purchasedDate1 = purchasedDate1;
            return this;
        }
        
        /**
         * Set purchaser
         * @param purchaser  (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder purchaser(Integer purchaser) {
            this.purchaser = purchaser;
            return this;
        }
        
        /**
         * Set quantity
         * @param quantity  (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder quantity(Double quantity) {
            this.quantity = quantity;
            return this;
        }
        
        /**
         * Set receivedFailQty
         * @param receivedFailQty  (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder receivedFailQty(Double receivedFailQty) {
            this.receivedFailQty = receivedFailQty;
            return this;
        }
        
        /**
         * Set receivedPassQty
         * @param receivedPassQty  (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder receivedPassQty(Double receivedPassQty) {
            this.receivedPassQty = receivedPassQty;
            return this;
        }
        
        /**
         * Set requester
         * @param requester Requester (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder requester(Integer requester) {
            this.requester = requester;
            return this;
        }
        
        /**
         * Set search
         * @param search A search term. (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Set sku
         * @param sku  (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder sku(String sku) {
            this.sku = sku;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder status(Integer status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder type(Integer type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set unit
         * @param unit  (optional)
         * @return ListItemsRequestBuilder
         */
        public ListItemsRequestBuilder unit(String unit) {
            this.unit = unit;
            return this;
        }
        
        /**
         * Build call for listItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listItemsCall(account, accountCode, active, approvedDatetime0, approvedDatetime1, approvedPrice, approvedQuantity, approver, approverId, branch, catalog, catalogItem, currency, department, departments, exclude, excludePunchout, format, fulfilmentStatus, isPurchased, isRecurring, lastChangedBy, lastModified0, lastModified1, lineComment, location, locations, name, num, orderNum, orderNumStatus, orderBy, orderCreatedDate0, orderCreatedDate1, page, pageSize, poCreatedDate0, poCreatedDate1, poVendor, prefVendor, price, purchaseAgreement, purchasedDate0, purchasedDate1, purchaser, quantity, receivedFailQty, receivedPassQty, requester, search, sku, status, type, unit, _callback);
        }


        /**
         * Execute listItems request
         * @return PaginatedOrderItemList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PaginatedOrderItemList execute() throws ApiException {
            ApiResponse<PaginatedOrderItemList> localVarResp = listItemsWithHttpInfo(account, accountCode, active, approvedDatetime0, approvedDatetime1, approvedPrice, approvedQuantity, approver, approverId, branch, catalog, catalogItem, currency, department, departments, exclude, excludePunchout, format, fulfilmentStatus, isPurchased, isRecurring, lastChangedBy, lastModified0, lastModified1, lineComment, location, locations, name, num, orderNum, orderNumStatus, orderBy, orderCreatedDate0, orderCreatedDate1, page, pageSize, poCreatedDate0, poCreatedDate1, poVendor, prefVendor, price, purchaseAgreement, purchasedDate0, purchasedDate1, purchaser, quantity, receivedFailQty, receivedPassQty, requester, search, sku, status, type, unit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listItems request with HTTP info returned
         * @return ApiResponse&lt;PaginatedOrderItemList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaginatedOrderItemList> executeWithHttpInfo() throws ApiException {
            return listItemsWithHttpInfo(account, accountCode, active, approvedDatetime0, approvedDatetime1, approvedPrice, approvedQuantity, approver, approverId, branch, catalog, catalogItem, currency, department, departments, exclude, excludePunchout, format, fulfilmentStatus, isPurchased, isRecurring, lastChangedBy, lastModified0, lastModified1, lineComment, location, locations, name, num, orderNum, orderNumStatus, orderBy, orderCreatedDate0, orderCreatedDate1, page, pageSize, poCreatedDate0, poCreatedDate1, poVendor, prefVendor, price, purchaseAgreement, purchasedDate0, purchasedDate1, purchaser, quantity, receivedFailQty, receivedPassQty, requester, search, sku, status, type, unit);
        }

        /**
         * Execute listItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaginatedOrderItemList> _callback) throws ApiException {
            return listItemsAsync(account, accountCode, active, approvedDatetime0, approvedDatetime1, approvedPrice, approvedQuantity, approver, approverId, branch, catalog, catalogItem, currency, department, departments, exclude, excludePunchout, format, fulfilmentStatus, isPurchased, isRecurring, lastChangedBy, lastModified0, lastModified1, lineComment, location, locations, name, num, orderNum, orderNumStatus, orderBy, orderCreatedDate0, orderCreatedDate1, page, pageSize, poCreatedDate0, poCreatedDate1, poVendor, prefVendor, price, purchaseAgreement, purchasedDate0, purchasedDate1, purchaser, quantity, receivedFailQty, receivedPassQty, requester, search, sku, status, type, unit, _callback);
        }
    }

    /**
     * Get list of all order items
     * **Order Item Status Codes**  | Order Item Type          | Code      | Description                       | |--------------------------|-----------|-----------------------------------| | PURCHASE_PENDING         | 0         | Approved but not purchased.       | | PURCHASE_INUSE           | 1         | Added to purchaser&#39;s PO list.     | | RECEIVE_PENDING          | 2         | Purchased but not yet received, i.e. receivedPassQty &#x3D;&#x3D; 0. | | RECEIVED                 | 3         | Fully received, i.e. receivedPassQty &#x3D;&#x3D; quantity. | | REJECTED_FOR_PURCHASE    | 4         | Rejected at procurement, i.e. denied. | | RECEIVE_PARTIAL          | 5         | Partially received, i.e. receivedPassQty !&#x3D; quantity and receivedPassQty &gt; 0. | | FULFILLED                | 6         | Received but unused. | | APPROVAL_DENIED          | 7         | Denied in approval routing (by approver). | | REQUEST_DRAFT            | 8         | Preparing for draft instead of using sessions. |
     * @return ListItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListItemsRequestBuilder listItems() throws IllegalArgumentException {
        return new ListItemsRequestBuilder();
    }
}
