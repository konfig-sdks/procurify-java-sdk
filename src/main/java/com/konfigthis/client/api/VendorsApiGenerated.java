/*
 * Procurify API Documentation
 *  # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import com.konfigthis.client.model.OptimizedVendorRequest;
import com.konfigthis.client.model.OptimizedVendorSerializerSingle;
import com.konfigthis.client.model.PaginatedOptimizedVendorList;
import com.konfigthis.client.model.PatchedOptimizedVendorRequest;
import com.konfigthis.client.model.PaymentMethodRequestNullable;
import com.konfigthis.client.model.PaymentTermRequestNullable;
import com.konfigthis.client.model.ShippingMethodRequestNullable;
import com.konfigthis.client.model.ShippingTermRequestNullable;
import com.konfigthis.client.model.VendorDetailSerializerSingleCreate;
import com.konfigthis.client.model.VendorDetailSerializerSingleRetrieve;
import com.konfigthis.client.model.VendorSerializerSingle;
import com.konfigthis.client.model.VendorTypeEnum;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class VendorsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VendorsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public VendorsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCall(OptimizedVendorRequest optimizedVendorRequest, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = optimizedVendorRequest;

        // create path and map variables
        String localVarPath = "/api/v3/vendors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "",
            "application/xml",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(OptimizedVendorRequest optimizedVendorRequest, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'optimizedVendorRequest' is set
        if (optimizedVendorRequest == null) {
            throw new ApiException("Missing the required parameter 'optimizedVendorRequest' when calling create(Async)");
        }

        return createCall(optimizedVendorRequest, format, _callback);

    }


    private ApiResponse<VendorDetailSerializerSingleCreate> createWithHttpInfo(OptimizedVendorRequest optimizedVendorRequest, String format) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(optimizedVendorRequest, format, null);
        Type localVarReturnType = new TypeToken<VendorDetailSerializerSingleCreate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAsync(OptimizedVendorRequest optimizedVendorRequest, String format, final ApiCallback<VendorDetailSerializerSingleCreate> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(optimizedVendorRequest, format, _callback);
        Type localVarReturnType = new TypeToken<VendorDetailSerializerSingleCreate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRequestBuilder {
        private final String name;
        private final List<String> email;
        private final VendorTypeEnum type;
        private final BigDecimal overallScore;
        private Boolean active;
        private String addressLineOne;
        private String addressLineTwo;
        private String postalCode;
        private String city;
        private String stateProvince;
        private String country;
        private String phoneOne;
        private String phoneTwo;
        private String fax;
        private String comments;
        private String contact;
        private String url;
        private String externalId;
        private Integer currency;
        private PaymentTermRequestNullable paymentTermRef;
        private ShippingTermRequestNullable shippingTermRef;
        private PaymentMethodRequestNullable paymentMethodRef;
        private ShippingMethodRequestNullable shippingMethodRef;
        private Integer tax;
        private Integer defaultPaymentMethod;
        private Boolean is1099Eligible;
        private Boolean isAutoEmailPoEnabled;
        private String poPdfLabels;
        private String format;

        private CreateRequestBuilder(String name, List<String> email, VendorTypeEnum type, BigDecimal overallScore) {
            this.name = name;
            this.email = email;
            this.type = type;
            this.overallScore = overallScore;
        }

        /**
         * Set active
         * @param active  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Set addressLineOne
         * @param addressLineOne First line of address (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder addressLineOne(String addressLineOne) {
            this.addressLineOne = addressLineOne;
            return this;
        }
        
        /**
         * Set addressLineTwo
         * @param addressLineTwo Second line of address (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder addressLineTwo(String addressLineTwo) {
            this.addressLineTwo = addressLineTwo;
            return this;
        }
        
        /**
         * Set postalCode
         * @param postalCode Postal or Zip code of the vendor (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder postalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
        }
        
        /**
         * Set city
         * @param city City of the vendor (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set stateProvince
         * @param stateProvince State or Province of the vendor (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder stateProvince(String stateProvince) {
            this.stateProvince = stateProvince;
            return this;
        }
        
        /**
         * Set country
         * @param country Country of the vendor (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set phoneOne
         * @param phoneOne Primary phone no. of the vendor (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder phoneOne(String phoneOne) {
            this.phoneOne = phoneOne;
            return this;
        }
        
        /**
         * Set phoneTwo
         * @param phoneTwo Secondary phone no. of the vendor (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder phoneTwo(String phoneTwo) {
            this.phoneTwo = phoneTwo;
            return this;
        }
        
        /**
         * Set fax
         * @param fax Fax no. of the vendor (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder fax(String fax) {
            this.fax = fax;
            return this;
        }
        
        /**
         * Set comments
         * @param comments Notes about the vendor (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder comments(String comments) {
            this.comments = comments;
            return this;
        }
        
        /**
         * Set contact
         * @param contact Contact person of the vendor (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder contact(String contact) {
            this.contact = contact;
            return this;
        }
        
        /**
         * Set url
         * @param url Website of the vendor (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set externalId
         * @param externalId External id of the vendor (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Set currency
         * @param currency  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder currency(Integer currency) {
            this.currency = currency;
            return this;
        }
        
        /**
         * Set paymentTermRef
         * @param paymentTermRef  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder paymentTermRef(PaymentTermRequestNullable paymentTermRef) {
            this.paymentTermRef = paymentTermRef;
            return this;
        }
        
        /**
         * Set shippingTermRef
         * @param shippingTermRef  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder shippingTermRef(ShippingTermRequestNullable shippingTermRef) {
            this.shippingTermRef = shippingTermRef;
            return this;
        }
        
        /**
         * Set paymentMethodRef
         * @param paymentMethodRef  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder paymentMethodRef(PaymentMethodRequestNullable paymentMethodRef) {
            this.paymentMethodRef = paymentMethodRef;
            return this;
        }
        
        /**
         * Set shippingMethodRef
         * @param shippingMethodRef  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder shippingMethodRef(ShippingMethodRequestNullable shippingMethodRef) {
            this.shippingMethodRef = shippingMethodRef;
            return this;
        }
        
        /**
         * Set tax
         * @param tax  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder tax(Integer tax) {
            this.tax = tax;
            return this;
        }
        
        /**
         * Set defaultPaymentMethod
         * @param defaultPaymentMethod  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder defaultPaymentMethod(Integer defaultPaymentMethod) {
            this.defaultPaymentMethod = defaultPaymentMethod;
            return this;
        }
        
        /**
         * Set is1099Eligible
         * @param is1099Eligible  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder is1099Eligible(Boolean is1099Eligible) {
            this.is1099Eligible = is1099Eligible;
            return this;
        }
        
        /**
         * Set isAutoEmailPoEnabled
         * @param isAutoEmailPoEnabled  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder isAutoEmailPoEnabled(Boolean isAutoEmailPoEnabled) {
            this.isAutoEmailPoEnabled = isAutoEmailPoEnabled;
            return this;
        }
        
        /**
         * Set poPdfLabels
         * @param poPdfLabels Placeholder for a KVStore value (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder poPdfLabels(String poPdfLabels) {
            this.poPdfLabels = poPdfLabels;
            return this;
        }
        
        /**
         * Set format
         * @param format  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for create
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OptimizedVendorRequest optimizedVendorRequest = buildBodyParams();
            return createCall(optimizedVendorRequest, format, _callback);
        }

        private OptimizedVendorRequest buildBodyParams() {
            OptimizedVendorRequest optimizedVendorRequest = new OptimizedVendorRequest();
            optimizedVendorRequest.name(this.name);
            optimizedVendorRequest.active(this.active);
            optimizedVendorRequest.addressLineOne(this.addressLineOne);
            optimizedVendorRequest.addressLineTwo(this.addressLineTwo);
            optimizedVendorRequest.postalCode(this.postalCode);
            optimizedVendorRequest.city(this.city);
            optimizedVendorRequest.stateProvince(this.stateProvince);
            optimizedVendorRequest.country(this.country);
            optimizedVendorRequest.phoneOne(this.phoneOne);
            optimizedVendorRequest.phoneTwo(this.phoneTwo);
            optimizedVendorRequest.fax(this.fax);
            optimizedVendorRequest.email(this.email);
            optimizedVendorRequest.comments(this.comments);
            optimizedVendorRequest.contact(this.contact);
            optimizedVendorRequest.url(this.url);
            optimizedVendorRequest.externalId(this.externalId);
            optimizedVendorRequest.currency(this.currency);
            optimizedVendorRequest.paymentTermRef(this.paymentTermRef);
            optimizedVendorRequest.shippingTermRef(this.shippingTermRef);
            optimizedVendorRequest.paymentMethodRef(this.paymentMethodRef);
            optimizedVendorRequest.shippingMethodRef(this.shippingMethodRef);
            optimizedVendorRequest.tax(this.tax);
            optimizedVendorRequest.type(this.type);
            optimizedVendorRequest.defaultPaymentMethod(this.defaultPaymentMethod);
            optimizedVendorRequest.is1099Eligible(this.is1099Eligible);
            optimizedVendorRequest.overallScore(this.overallScore);
            optimizedVendorRequest.isAutoEmailPoEnabled(this.isAutoEmailPoEnabled);
            optimizedVendorRequest.poPdfLabels(this.poPdfLabels);
            return optimizedVendorRequest;
        }

        /**
         * Execute create request
         * @return VendorDetailSerializerSingleCreate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public VendorDetailSerializerSingleCreate execute() throws ApiException {
            OptimizedVendorRequest optimizedVendorRequest = buildBodyParams();
            ApiResponse<VendorDetailSerializerSingleCreate> localVarResp = createWithHttpInfo(optimizedVendorRequest, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute create request with HTTP info returned
         * @return ApiResponse&lt;VendorDetailSerializerSingleCreate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VendorDetailSerializerSingleCreate> executeWithHttpInfo() throws ApiException {
            OptimizedVendorRequest optimizedVendorRequest = buildBodyParams();
            return createWithHttpInfo(optimizedVendorRequest, format);
        }

        /**
         * Execute create request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VendorDetailSerializerSingleCreate> _callback) throws ApiException {
            OptimizedVendorRequest optimizedVendorRequest = buildBodyParams();
            return createAsync(optimizedVendorRequest, format, _callback);
        }
    }

    /**
     * Create Vendor
     * Create a new vendor  Due to having multiple vendors with the same name, especially common if user keeps deleting vendors with the same name, these deleted vendors get thrown into the inactive list.  **Vendor Types**  | Vendor Type         | Type      | |---------------------|-----------| | OTHER               | 1         | | HIDDEN              | 2         | | PREFERRED (default) | 3         | | REGULAR             | 4         | | EMPLOYEE            | 5         | | CC_PROVIDER         | 6         |
     * @param optimizedVendorRequest  (required)
     * @return CreateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateRequestBuilder create(String name, List<String> email, VendorTypeEnum type, BigDecimal overallScore) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            if (name != null && name.length() < 1) {
              throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
            }

        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
        
            

        return new CreateRequestBuilder(name, email, type, overallScore);
    }
    private okhttp3.Call listCall(String vendorGroup, Boolean excludeOther, String externalId, String format, String name, String orderBy, Integer page, Integer pageSize, String search, Integer type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/vendors"
            .replace("{" + "vendor_group" + "}", localVarApiClient.escapeString(vendorGroup.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (excludeOther != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_other", excludeOther));
        }

        if (externalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_id", externalId));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String vendorGroup, Boolean excludeOther, String externalId, String format, String name, String orderBy, Integer page, Integer pageSize, String search, Integer type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vendorGroup' is set
        if (vendorGroup == null) {
            throw new ApiException("Missing the required parameter 'vendorGroup' when calling list(Async)");
        }

        return listCall(vendorGroup, excludeOther, externalId, format, name, orderBy, page, pageSize, search, type, _callback);

    }


    private ApiResponse<PaginatedOptimizedVendorList> listWithHttpInfo(String vendorGroup, Boolean excludeOther, String externalId, String format, String name, String orderBy, Integer page, Integer pageSize, String search, Integer type) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(vendorGroup, excludeOther, externalId, format, name, orderBy, page, pageSize, search, type, null);
        Type localVarReturnType = new TypeToken<PaginatedOptimizedVendorList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String vendorGroup, Boolean excludeOther, String externalId, String format, String name, String orderBy, Integer page, Integer pageSize, String search, Integer type, final ApiCallback<PaginatedOptimizedVendorList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(vendorGroup, excludeOther, externalId, format, name, orderBy, page, pageSize, search, type, _callback);
        Type localVarReturnType = new TypeToken<PaginatedOptimizedVendorList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private final String vendorGroup;
        private Boolean excludeOther;
        private String externalId;
        private String format;
        private String name;
        private String orderBy;
        private Integer page;
        private Integer pageSize;
        private String search;
        private Integer type;

        private ListRequestBuilder(String vendorGroup) {
            this.vendorGroup = vendorGroup;
        }

        /**
         * Set excludeOther
         * @param excludeOther  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder excludeOther(Boolean excludeOther) {
            this.excludeOther = excludeOther;
            return this;
        }
        
        /**
         * Set externalId
         * @param externalId  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Set format
         * @param format  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy Which field to use when ordering the results. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set page
         * @param page A page number within the paginated result set. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Number of results to return per page. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set search
         * @param search A search term. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Set type
         * @param type Type of the vendor. See above for possible options. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder type(Integer type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(vendorGroup, excludeOther, externalId, format, name, orderBy, page, pageSize, search, type, _callback);
        }


        /**
         * Execute list request
         * @return PaginatedOptimizedVendorList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PaginatedOptimizedVendorList execute() throws ApiException {
            ApiResponse<PaginatedOptimizedVendorList> localVarResp = listWithHttpInfo(vendorGroup, excludeOther, externalId, format, name, orderBy, page, pageSize, search, type);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;PaginatedOptimizedVendorList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaginatedOptimizedVendorList> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(vendorGroup, excludeOther, externalId, format, name, orderBy, page, pageSize, search, type);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaginatedOptimizedVendorList> _callback) throws ApiException {
            return listAsync(vendorGroup, excludeOther, externalId, format, name, orderBy, page, pageSize, search, type, _callback);
        }
    }

    /**
     * Get list of all active vendors
     * **Vendor Type Codes**  | Vendor Type         | Type      | Description                       | |---------------------|-----------|-----------------------------------| | OTHER               | 1         | Previously &#39;OTHER&#39; vendor (ID&#x3D;1), used for storing non-vendor |                     |           | for storing non-vendor Vendor names in request. | | HIDDEN              | 2         | New type of vendors that is reserved for system purposes (eg. Amazon Business). | | PREFERRED (default) | 3         | The default vendors from previous list |                     |           | where active vendor dropdowns everywhere previously showed. |                     |           | Request now ONLY shows these vendors (+OTHER) | | REGULAR             | 4         | New type of vendors that are non-preferred, |                     |           | for any AP purposes and purchasers to update. |                     |           | (DOES NOT show up in Request, but shows up in Procure) | | EMPLOYEE            | 5         | New type of vendors that do not show up anywhere except in AP employees list. | | CC_PROVIDER         | 6         | Similar type of vendors to AP employees, but for AP credit card providers. |
     * @param vendorGroup  **\&quot;all\&quot;**: Get list of all vendors.  **\&quot;credit_card_providers\&quot;**: Get list of credit card provider vendors. These vendors are displayed in Payee Management for Credit Card Providers.  **\&quot;default\&quot;**: Get list of \&quot;preferred\&quot; and \&quot;regular\&quot; vendors. These vendors are displayed in Procure (procurement, vendors, etc) and AP i.e., default vendor list. OTHER is discontinued from procure.  **\&quot;other\&quot;**: Get list of \&quot;other\&quot; vendors. Only returns the &#39;OTHER&#39; vendor reserved for requesting non-vendor names.  **\&quot;preferred\&quot;**: Get list of \&quot;preferred\&quot; vendors.  **\&quot;purchasable\&quot;**: Get list of \&quot;purchasable\&quot; vendors.  **\&quot;requestable\&quot;**: Get list of \&quot;requestable\&quot; vendors. These vendors are displayed in Request and designated by Purchaser. (required)
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list(String vendorGroup) throws IllegalArgumentException {
        if (vendorGroup == null) throw new IllegalArgumentException("\"vendorGroup\" is required but got null");
            

        return new ListRequestBuilder(vendorGroup);
    }
    private okhttp3.Call partialUpdateCall(Integer id, String format, PatchedOptimizedVendorRequest patchedOptimizedVendorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedOptimizedVendorRequest;

        // create path and map variables
        String localVarPath = "/api/v3/vendors/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "",
            "application/xml",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partialUpdateValidateBeforeCall(Integer id, String format, PatchedOptimizedVendorRequest patchedOptimizedVendorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling partialUpdate(Async)");
        }

        return partialUpdateCall(id, format, patchedOptimizedVendorRequest, _callback);

    }


    private ApiResponse<OptimizedVendorSerializerSingle> partialUpdateWithHttpInfo(Integer id, String format, PatchedOptimizedVendorRequest patchedOptimizedVendorRequest) throws ApiException {
        okhttp3.Call localVarCall = partialUpdateValidateBeforeCall(id, format, patchedOptimizedVendorRequest, null);
        Type localVarReturnType = new TypeToken<OptimizedVendorSerializerSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call partialUpdateAsync(Integer id, String format, PatchedOptimizedVendorRequest patchedOptimizedVendorRequest, final ApiCallback<OptimizedVendorSerializerSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = partialUpdateValidateBeforeCall(id, format, patchedOptimizedVendorRequest, _callback);
        Type localVarReturnType = new TypeToken<OptimizedVendorSerializerSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PartialUpdateRequestBuilder {
        private final Integer id;
        private String name;
        private Boolean active;
        private String addressLineOne;
        private String addressLineTwo;
        private String postalCode;
        private String city;
        private String stateProvince;
        private String country;
        private String phoneOne;
        private String phoneTwo;
        private String fax;
        private List<String> email;
        private String comments;
        private String contact;
        private String url;
        private String externalId;
        private Integer currency;
        private PaymentTermRequestNullable paymentTermRef;
        private ShippingTermRequestNullable shippingTermRef;
        private PaymentMethodRequestNullable paymentMethodRef;
        private ShippingMethodRequestNullable shippingMethodRef;
        private Integer tax;
        private VendorTypeEnum type;
        private Integer defaultPaymentMethod;
        private Boolean is1099Eligible;
        private BigDecimal overallScore;
        private Boolean isAutoEmailPoEnabled;
        private String poPdfLabels;
        private String format;

        private PartialUpdateRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set name
         * @param name Name of the vendor (optional)
         * @return PartialUpdateRequestBuilder
         */
        public PartialUpdateRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set active
         * @param active  (optional)
         * @return PartialUpdateRequestBuilder
         */
        public PartialUpdateRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Set addressLineOne
         * @param addressLineOne First line of address (optional)
         * @return PartialUpdateRequestBuilder
         */
        public PartialUpdateRequestBuilder addressLineOne(String addressLineOne) {
            this.addressLineOne = addressLineOne;
            return this;
        }
        
        /**
         * Set addressLineTwo
         * @param addressLineTwo Second line of address (optional)
         * @return PartialUpdateRequestBuilder
         */
        public PartialUpdateRequestBuilder addressLineTwo(String addressLineTwo) {
            this.addressLineTwo = addressLineTwo;
            return this;
        }
        
        /**
         * Set postalCode
         * @param postalCode Postal or Zip code of the vendor (optional)
         * @return PartialUpdateRequestBuilder
         */
        public PartialUpdateRequestBuilder postalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
        }
        
        /**
         * Set city
         * @param city City of the vendor (optional)
         * @return PartialUpdateRequestBuilder
         */
        public PartialUpdateRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set stateProvince
         * @param stateProvince State or Province of the vendor (optional)
         * @return PartialUpdateRequestBuilder
         */
        public PartialUpdateRequestBuilder stateProvince(String stateProvince) {
            this.stateProvince = stateProvince;
            return this;
        }
        
        /**
         * Set country
         * @param country Country of the vendor (optional)
         * @return PartialUpdateRequestBuilder
         */
        public PartialUpdateRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set phoneOne
         * @param phoneOne Primary phone no. of the vendor (optional)
         * @return PartialUpdateRequestBuilder
         */
        public PartialUpdateRequestBuilder phoneOne(String phoneOne) {
            this.phoneOne = phoneOne;
            return this;
        }
        
        /**
         * Set phoneTwo
         * @param phoneTwo Secondary phone no. of the vendor (optional)
         * @return PartialUpdateRequestBuilder
         */
        public PartialUpdateRequestBuilder phoneTwo(String phoneTwo) {
            this.phoneTwo = phoneTwo;
            return this;
        }
        
        /**
         * Set fax
         * @param fax Fax no. of the vendor (optional)
         * @return PartialUpdateRequestBuilder
         */
        public PartialUpdateRequestBuilder fax(String fax) {
            this.fax = fax;
            return this;
        }
        
        /**
         * Set email
         * @param email  (optional)
         * @return PartialUpdateRequestBuilder
         */
        public PartialUpdateRequestBuilder email(List<String> email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set comments
         * @param comments Notes about the vendor (optional)
         * @return PartialUpdateRequestBuilder
         */
        public PartialUpdateRequestBuilder comments(String comments) {
            this.comments = comments;
            return this;
        }
        
        /**
         * Set contact
         * @param contact Contact person of the vendor (optional)
         * @return PartialUpdateRequestBuilder
         */
        public PartialUpdateRequestBuilder contact(String contact) {
            this.contact = contact;
            return this;
        }
        
        /**
         * Set url
         * @param url Website of the vendor (optional)
         * @return PartialUpdateRequestBuilder
         */
        public PartialUpdateRequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set externalId
         * @param externalId External id of the vendor (optional)
         * @return PartialUpdateRequestBuilder
         */
        public PartialUpdateRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Set currency
         * @param currency  (optional)
         * @return PartialUpdateRequestBuilder
         */
        public PartialUpdateRequestBuilder currency(Integer currency) {
            this.currency = currency;
            return this;
        }
        
        /**
         * Set paymentTermRef
         * @param paymentTermRef  (optional)
         * @return PartialUpdateRequestBuilder
         */
        public PartialUpdateRequestBuilder paymentTermRef(PaymentTermRequestNullable paymentTermRef) {
            this.paymentTermRef = paymentTermRef;
            return this;
        }
        
        /**
         * Set shippingTermRef
         * @param shippingTermRef  (optional)
         * @return PartialUpdateRequestBuilder
         */
        public PartialUpdateRequestBuilder shippingTermRef(ShippingTermRequestNullable shippingTermRef) {
            this.shippingTermRef = shippingTermRef;
            return this;
        }
        
        /**
         * Set paymentMethodRef
         * @param paymentMethodRef  (optional)
         * @return PartialUpdateRequestBuilder
         */
        public PartialUpdateRequestBuilder paymentMethodRef(PaymentMethodRequestNullable paymentMethodRef) {
            this.paymentMethodRef = paymentMethodRef;
            return this;
        }
        
        /**
         * Set shippingMethodRef
         * @param shippingMethodRef  (optional)
         * @return PartialUpdateRequestBuilder
         */
        public PartialUpdateRequestBuilder shippingMethodRef(ShippingMethodRequestNullable shippingMethodRef) {
            this.shippingMethodRef = shippingMethodRef;
            return this;
        }
        
        /**
         * Set tax
         * @param tax  (optional)
         * @return PartialUpdateRequestBuilder
         */
        public PartialUpdateRequestBuilder tax(Integer tax) {
            this.tax = tax;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return PartialUpdateRequestBuilder
         */
        public PartialUpdateRequestBuilder type(VendorTypeEnum type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set defaultPaymentMethod
         * @param defaultPaymentMethod  (optional)
         * @return PartialUpdateRequestBuilder
         */
        public PartialUpdateRequestBuilder defaultPaymentMethod(Integer defaultPaymentMethod) {
            this.defaultPaymentMethod = defaultPaymentMethod;
            return this;
        }
        
        /**
         * Set is1099Eligible
         * @param is1099Eligible  (optional)
         * @return PartialUpdateRequestBuilder
         */
        public PartialUpdateRequestBuilder is1099Eligible(Boolean is1099Eligible) {
            this.is1099Eligible = is1099Eligible;
            return this;
        }
        
        /**
         * Set overallScore
         * @param overallScore  (optional)
         * @return PartialUpdateRequestBuilder
         */
        public PartialUpdateRequestBuilder overallScore(BigDecimal overallScore) {
            this.overallScore = overallScore;
            return this;
        }
        
        /**
         * Set isAutoEmailPoEnabled
         * @param isAutoEmailPoEnabled  (optional)
         * @return PartialUpdateRequestBuilder
         */
        public PartialUpdateRequestBuilder isAutoEmailPoEnabled(Boolean isAutoEmailPoEnabled) {
            this.isAutoEmailPoEnabled = isAutoEmailPoEnabled;
            return this;
        }
        
        /**
         * Set poPdfLabels
         * @param poPdfLabels Placeholder for a KVStore value (optional)
         * @return PartialUpdateRequestBuilder
         */
        public PartialUpdateRequestBuilder poPdfLabels(String poPdfLabels) {
            this.poPdfLabels = poPdfLabels;
            return this;
        }
        
        /**
         * Set format
         * @param format  (optional)
         * @return PartialUpdateRequestBuilder
         */
        public PartialUpdateRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for partialUpdate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PatchedOptimizedVendorRequest patchedOptimizedVendorRequest = buildBodyParams();
            return partialUpdateCall(id, format, patchedOptimizedVendorRequest, _callback);
        }

        private PatchedOptimizedVendorRequest buildBodyParams() {
            PatchedOptimizedVendorRequest patchedOptimizedVendorRequest = new PatchedOptimizedVendorRequest();
            patchedOptimizedVendorRequest.name(this.name);
            patchedOptimizedVendorRequest.active(this.active);
            patchedOptimizedVendorRequest.addressLineOne(this.addressLineOne);
            patchedOptimizedVendorRequest.addressLineTwo(this.addressLineTwo);
            patchedOptimizedVendorRequest.postalCode(this.postalCode);
            patchedOptimizedVendorRequest.city(this.city);
            patchedOptimizedVendorRequest.stateProvince(this.stateProvince);
            patchedOptimizedVendorRequest.country(this.country);
            patchedOptimizedVendorRequest.phoneOne(this.phoneOne);
            patchedOptimizedVendorRequest.phoneTwo(this.phoneTwo);
            patchedOptimizedVendorRequest.fax(this.fax);
            patchedOptimizedVendorRequest.email(this.email);
            patchedOptimizedVendorRequest.comments(this.comments);
            patchedOptimizedVendorRequest.contact(this.contact);
            patchedOptimizedVendorRequest.url(this.url);
            patchedOptimizedVendorRequest.externalId(this.externalId);
            patchedOptimizedVendorRequest.currency(this.currency);
            patchedOptimizedVendorRequest.paymentTermRef(this.paymentTermRef);
            patchedOptimizedVendorRequest.shippingTermRef(this.shippingTermRef);
            patchedOptimizedVendorRequest.paymentMethodRef(this.paymentMethodRef);
            patchedOptimizedVendorRequest.shippingMethodRef(this.shippingMethodRef);
            patchedOptimizedVendorRequest.tax(this.tax);
            patchedOptimizedVendorRequest.type(this.type);
            patchedOptimizedVendorRequest.defaultPaymentMethod(this.defaultPaymentMethod);
            patchedOptimizedVendorRequest.is1099Eligible(this.is1099Eligible);
            patchedOptimizedVendorRequest.overallScore(this.overallScore);
            patchedOptimizedVendorRequest.isAutoEmailPoEnabled(this.isAutoEmailPoEnabled);
            patchedOptimizedVendorRequest.poPdfLabels(this.poPdfLabels);
            return patchedOptimizedVendorRequest;
        }

        /**
         * Execute partialUpdate request
         * @return OptimizedVendorSerializerSingle
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public OptimizedVendorSerializerSingle execute() throws ApiException {
            PatchedOptimizedVendorRequest patchedOptimizedVendorRequest = buildBodyParams();
            ApiResponse<OptimizedVendorSerializerSingle> localVarResp = partialUpdateWithHttpInfo(id, format, patchedOptimizedVendorRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute partialUpdate request with HTTP info returned
         * @return ApiResponse&lt;OptimizedVendorSerializerSingle&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OptimizedVendorSerializerSingle> executeWithHttpInfo() throws ApiException {
            PatchedOptimizedVendorRequest patchedOptimizedVendorRequest = buildBodyParams();
            return partialUpdateWithHttpInfo(id, format, patchedOptimizedVendorRequest);
        }

        /**
         * Execute partialUpdate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OptimizedVendorSerializerSingle> _callback) throws ApiException {
            PatchedOptimizedVendorRequest patchedOptimizedVendorRequest = buildBodyParams();
            return partialUpdateAsync(id, format, patchedOptimizedVendorRequest, _callback);
        }
    }

    /**
     * Partial Update Vendor
     * 
     * @param id A unique integer value identifying this vendor. (required)
     * @return PartialUpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PartialUpdateRequestBuilder partialUpdate(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new PartialUpdateRequestBuilder(id);
    }
    private okhttp3.Call retrieveCall(Integer id, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/vendors/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveValidateBeforeCall(Integer id, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retrieve(Async)");
        }

        return retrieveCall(id, format, _callback);

    }


    private ApiResponse<VendorDetailSerializerSingleRetrieve> retrieveWithHttpInfo(Integer id, String format) throws ApiException {
        okhttp3.Call localVarCall = retrieveValidateBeforeCall(id, format, null);
        Type localVarReturnType = new TypeToken<VendorDetailSerializerSingleRetrieve>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call retrieveAsync(Integer id, String format, final ApiCallback<VendorDetailSerializerSingleRetrieve> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveValidateBeforeCall(id, format, _callback);
        Type localVarReturnType = new TypeToken<VendorDetailSerializerSingleRetrieve>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RetrieveRequestBuilder {
        private final Integer id;
        private String format;

        private RetrieveRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set format
         * @param format  (optional)
         * @return RetrieveRequestBuilder
         */
        public RetrieveRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for retrieve
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return retrieveCall(id, format, _callback);
        }


        /**
         * Execute retrieve request
         * @return VendorDetailSerializerSingleRetrieve
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public VendorDetailSerializerSingleRetrieve execute() throws ApiException {
            ApiResponse<VendorDetailSerializerSingleRetrieve> localVarResp = retrieveWithHttpInfo(id, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute retrieve request with HTTP info returned
         * @return ApiResponse&lt;VendorDetailSerializerSingleRetrieve&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VendorDetailSerializerSingleRetrieve> executeWithHttpInfo() throws ApiException {
            return retrieveWithHttpInfo(id, format);
        }

        /**
         * Execute retrieve request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VendorDetailSerializerSingleRetrieve> _callback) throws ApiException {
            return retrieveAsync(id, format, _callback);
        }
    }

    /**
     * Get Vendor by ID
     * Get detail of a vendor by id
     * @param id A unique integer value identifying this vendor. (required)
     * @return RetrieveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveRequestBuilder retrieve(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new RetrieveRequestBuilder(id);
    }
    private okhttp3.Call updateCall(Integer id, OptimizedVendorRequest optimizedVendorRequest, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = optimizedVendorRequest;

        // create path and map variables
        String localVarPath = "/api/v3/vendors/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "",
            "application/xml",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateValidateBeforeCall(Integer id, OptimizedVendorRequest optimizedVendorRequest, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling update(Async)");
        }

        // verify the required parameter 'optimizedVendorRequest' is set
        if (optimizedVendorRequest == null) {
            throw new ApiException("Missing the required parameter 'optimizedVendorRequest' when calling update(Async)");
        }

        return updateCall(id, optimizedVendorRequest, format, _callback);

    }


    private ApiResponse<VendorSerializerSingle> updateWithHttpInfo(Integer id, OptimizedVendorRequest optimizedVendorRequest, String format) throws ApiException {
        okhttp3.Call localVarCall = updateValidateBeforeCall(id, optimizedVendorRequest, format, null);
        Type localVarReturnType = new TypeToken<VendorSerializerSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAsync(Integer id, OptimizedVendorRequest optimizedVendorRequest, String format, final ApiCallback<VendorSerializerSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateValidateBeforeCall(id, optimizedVendorRequest, format, _callback);
        Type localVarReturnType = new TypeToken<VendorSerializerSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRequestBuilder {
        private final String name;
        private final List<String> email;
        private final VendorTypeEnum type;
        private final BigDecimal overallScore;
        private final Integer id;
        private Boolean active;
        private String addressLineOne;
        private String addressLineTwo;
        private String postalCode;
        private String city;
        private String stateProvince;
        private String country;
        private String phoneOne;
        private String phoneTwo;
        private String fax;
        private String comments;
        private String contact;
        private String url;
        private String externalId;
        private Integer currency;
        private PaymentTermRequestNullable paymentTermRef;
        private ShippingTermRequestNullable shippingTermRef;
        private PaymentMethodRequestNullable paymentMethodRef;
        private ShippingMethodRequestNullable shippingMethodRef;
        private Integer tax;
        private Integer defaultPaymentMethod;
        private Boolean is1099Eligible;
        private Boolean isAutoEmailPoEnabled;
        private String poPdfLabels;
        private String format;

        private UpdateRequestBuilder(String name, List<String> email, VendorTypeEnum type, BigDecimal overallScore, Integer id) {
            this.name = name;
            this.email = email;
            this.type = type;
            this.overallScore = overallScore;
            this.id = id;
        }

        /**
         * Set active
         * @param active  (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Set addressLineOne
         * @param addressLineOne First line of address (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder addressLineOne(String addressLineOne) {
            this.addressLineOne = addressLineOne;
            return this;
        }
        
        /**
         * Set addressLineTwo
         * @param addressLineTwo Second line of address (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder addressLineTwo(String addressLineTwo) {
            this.addressLineTwo = addressLineTwo;
            return this;
        }
        
        /**
         * Set postalCode
         * @param postalCode Postal or Zip code of the vendor (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder postalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
        }
        
        /**
         * Set city
         * @param city City of the vendor (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set stateProvince
         * @param stateProvince State or Province of the vendor (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder stateProvince(String stateProvince) {
            this.stateProvince = stateProvince;
            return this;
        }
        
        /**
         * Set country
         * @param country Country of the vendor (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set phoneOne
         * @param phoneOne Primary phone no. of the vendor (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder phoneOne(String phoneOne) {
            this.phoneOne = phoneOne;
            return this;
        }
        
        /**
         * Set phoneTwo
         * @param phoneTwo Secondary phone no. of the vendor (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder phoneTwo(String phoneTwo) {
            this.phoneTwo = phoneTwo;
            return this;
        }
        
        /**
         * Set fax
         * @param fax Fax no. of the vendor (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder fax(String fax) {
            this.fax = fax;
            return this;
        }
        
        /**
         * Set comments
         * @param comments Notes about the vendor (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder comments(String comments) {
            this.comments = comments;
            return this;
        }
        
        /**
         * Set contact
         * @param contact Contact person of the vendor (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder contact(String contact) {
            this.contact = contact;
            return this;
        }
        
        /**
         * Set url
         * @param url Website of the vendor (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set externalId
         * @param externalId External id of the vendor (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Set currency
         * @param currency  (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder currency(Integer currency) {
            this.currency = currency;
            return this;
        }
        
        /**
         * Set paymentTermRef
         * @param paymentTermRef  (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder paymentTermRef(PaymentTermRequestNullable paymentTermRef) {
            this.paymentTermRef = paymentTermRef;
            return this;
        }
        
        /**
         * Set shippingTermRef
         * @param shippingTermRef  (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder shippingTermRef(ShippingTermRequestNullable shippingTermRef) {
            this.shippingTermRef = shippingTermRef;
            return this;
        }
        
        /**
         * Set paymentMethodRef
         * @param paymentMethodRef  (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder paymentMethodRef(PaymentMethodRequestNullable paymentMethodRef) {
            this.paymentMethodRef = paymentMethodRef;
            return this;
        }
        
        /**
         * Set shippingMethodRef
         * @param shippingMethodRef  (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder shippingMethodRef(ShippingMethodRequestNullable shippingMethodRef) {
            this.shippingMethodRef = shippingMethodRef;
            return this;
        }
        
        /**
         * Set tax
         * @param tax  (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder tax(Integer tax) {
            this.tax = tax;
            return this;
        }
        
        /**
         * Set defaultPaymentMethod
         * @param defaultPaymentMethod  (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder defaultPaymentMethod(Integer defaultPaymentMethod) {
            this.defaultPaymentMethod = defaultPaymentMethod;
            return this;
        }
        
        /**
         * Set is1099Eligible
         * @param is1099Eligible  (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder is1099Eligible(Boolean is1099Eligible) {
            this.is1099Eligible = is1099Eligible;
            return this;
        }
        
        /**
         * Set isAutoEmailPoEnabled
         * @param isAutoEmailPoEnabled  (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder isAutoEmailPoEnabled(Boolean isAutoEmailPoEnabled) {
            this.isAutoEmailPoEnabled = isAutoEmailPoEnabled;
            return this;
        }
        
        /**
         * Set poPdfLabels
         * @param poPdfLabels Placeholder for a KVStore value (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder poPdfLabels(String poPdfLabels) {
            this.poPdfLabels = poPdfLabels;
            return this;
        }
        
        /**
         * Set format
         * @param format  (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for update
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OptimizedVendorRequest optimizedVendorRequest = buildBodyParams();
            return updateCall(id, optimizedVendorRequest, format, _callback);
        }

        private OptimizedVendorRequest buildBodyParams() {
            OptimizedVendorRequest optimizedVendorRequest = new OptimizedVendorRequest();
            optimizedVendorRequest.name(this.name);
            optimizedVendorRequest.active(this.active);
            optimizedVendorRequest.addressLineOne(this.addressLineOne);
            optimizedVendorRequest.addressLineTwo(this.addressLineTwo);
            optimizedVendorRequest.postalCode(this.postalCode);
            optimizedVendorRequest.city(this.city);
            optimizedVendorRequest.stateProvince(this.stateProvince);
            optimizedVendorRequest.country(this.country);
            optimizedVendorRequest.phoneOne(this.phoneOne);
            optimizedVendorRequest.phoneTwo(this.phoneTwo);
            optimizedVendorRequest.fax(this.fax);
            optimizedVendorRequest.email(this.email);
            optimizedVendorRequest.comments(this.comments);
            optimizedVendorRequest.contact(this.contact);
            optimizedVendorRequest.url(this.url);
            optimizedVendorRequest.externalId(this.externalId);
            optimizedVendorRequest.currency(this.currency);
            optimizedVendorRequest.paymentTermRef(this.paymentTermRef);
            optimizedVendorRequest.shippingTermRef(this.shippingTermRef);
            optimizedVendorRequest.paymentMethodRef(this.paymentMethodRef);
            optimizedVendorRequest.shippingMethodRef(this.shippingMethodRef);
            optimizedVendorRequest.tax(this.tax);
            optimizedVendorRequest.type(this.type);
            optimizedVendorRequest.defaultPaymentMethod(this.defaultPaymentMethod);
            optimizedVendorRequest.is1099Eligible(this.is1099Eligible);
            optimizedVendorRequest.overallScore(this.overallScore);
            optimizedVendorRequest.isAutoEmailPoEnabled(this.isAutoEmailPoEnabled);
            optimizedVendorRequest.poPdfLabels(this.poPdfLabels);
            return optimizedVendorRequest;
        }

        /**
         * Execute update request
         * @return VendorSerializerSingle
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public VendorSerializerSingle execute() throws ApiException {
            OptimizedVendorRequest optimizedVendorRequest = buildBodyParams();
            ApiResponse<VendorSerializerSingle> localVarResp = updateWithHttpInfo(id, optimizedVendorRequest, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute update request with HTTP info returned
         * @return ApiResponse&lt;VendorSerializerSingle&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VendorSerializerSingle> executeWithHttpInfo() throws ApiException {
            OptimizedVendorRequest optimizedVendorRequest = buildBodyParams();
            return updateWithHttpInfo(id, optimizedVendorRequest, format);
        }

        /**
         * Execute update request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VendorSerializerSingle> _callback) throws ApiException {
            OptimizedVendorRequest optimizedVendorRequest = buildBodyParams();
            return updateAsync(id, optimizedVendorRequest, format, _callback);
        }
    }

    /**
     * Update Vendor
     * 
     * @param id A unique integer value identifying this vendor. (required)
     * @param optimizedVendorRequest  (required)
     * @return UpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRequestBuilder update(String name, List<String> email, VendorTypeEnum type, BigDecimal overallScore, Integer id) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            if (name != null && name.length() < 1) {
              throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
            }

        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
        
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new UpdateRequestBuilder(name, email, type, overallScore, id);
    }
}
