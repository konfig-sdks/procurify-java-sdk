/*
 * Procurify API Documentation
 *  # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PaginatedPermissionGroupList;
import com.konfigthis.client.model.PaginatedPermissionReadList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PermissionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PermissionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PermissionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAvailableSystemRolesCall(String format, String orderBy, Integer page, Integer pageSize, String permission, String search, Integer type, Integer user, Integer userprofile, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/permissions/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (userprofile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userprofile", userprofile));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvailableSystemRolesValidateBeforeCall(String format, String orderBy, Integer page, Integer pageSize, String permission, String search, Integer type, Integer user, Integer userprofile, final ApiCallback _callback) throws ApiException {
        return getAvailableSystemRolesCall(format, orderBy, page, pageSize, permission, search, type, user, userprofile, _callback);

    }


    private ApiResponse<PaginatedPermissionGroupList> getAvailableSystemRolesWithHttpInfo(String format, String orderBy, Integer page, Integer pageSize, String permission, String search, Integer type, Integer user, Integer userprofile) throws ApiException {
        okhttp3.Call localVarCall = getAvailableSystemRolesValidateBeforeCall(format, orderBy, page, pageSize, permission, search, type, user, userprofile, null);
        Type localVarReturnType = new TypeToken<PaginatedPermissionGroupList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAvailableSystemRolesAsync(String format, String orderBy, Integer page, Integer pageSize, String permission, String search, Integer type, Integer user, Integer userprofile, final ApiCallback<PaginatedPermissionGroupList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvailableSystemRolesValidateBeforeCall(format, orderBy, page, pageSize, permission, search, type, user, userprofile, _callback);
        Type localVarReturnType = new TypeToken<PaginatedPermissionGroupList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAvailableSystemRolesRequestBuilder {
        private String format;
        private String orderBy;
        private Integer page;
        private Integer pageSize;
        private String permission;
        private String search;
        private Integer type;
        private Integer user;
        private Integer userprofile;

        private GetAvailableSystemRolesRequestBuilder() {
        }

        /**
         * Set format
         * @param format  (optional)
         * @return GetAvailableSystemRolesRequestBuilder
         */
        public GetAvailableSystemRolesRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy Which field to use when ordering the results. (optional)
         * @return GetAvailableSystemRolesRequestBuilder
         */
        public GetAvailableSystemRolesRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set page
         * @param page A page number within the paginated result set. (optional)
         * @return GetAvailableSystemRolesRequestBuilder
         */
        public GetAvailableSystemRolesRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Number of results to return per page. (optional)
         * @return GetAvailableSystemRolesRequestBuilder
         */
        public GetAvailableSystemRolesRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set permission
         * @param permission  (optional)
         * @return GetAvailableSystemRolesRequestBuilder
         */
        public GetAvailableSystemRolesRequestBuilder permission(String permission) {
            this.permission = permission;
            return this;
        }
        
        /**
         * Set search
         * @param search A search term. (optional)
         * @return GetAvailableSystemRolesRequestBuilder
         */
        public GetAvailableSystemRolesRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return GetAvailableSystemRolesRequestBuilder
         */
        public GetAvailableSystemRolesRequestBuilder type(Integer type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set user
         * @param user  (optional)
         * @return GetAvailableSystemRolesRequestBuilder
         */
        public GetAvailableSystemRolesRequestBuilder user(Integer user) {
            this.user = user;
            return this;
        }
        
        /**
         * Set userprofile
         * @param userprofile  (optional)
         * @return GetAvailableSystemRolesRequestBuilder
         */
        public GetAvailableSystemRolesRequestBuilder userprofile(Integer userprofile) {
            this.userprofile = userprofile;
            return this;
        }
        
        /**
         * Build call for getAvailableSystemRoles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAvailableSystemRolesCall(format, orderBy, page, pageSize, permission, search, type, user, userprofile, _callback);
        }


        /**
         * Execute getAvailableSystemRoles request
         * @return PaginatedPermissionGroupList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PaginatedPermissionGroupList execute() throws ApiException {
            ApiResponse<PaginatedPermissionGroupList> localVarResp = getAvailableSystemRolesWithHttpInfo(format, orderBy, page, pageSize, permission, search, type, user, userprofile);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAvailableSystemRoles request with HTTP info returned
         * @return ApiResponse&lt;PaginatedPermissionGroupList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaginatedPermissionGroupList> executeWithHttpInfo() throws ApiException {
            return getAvailableSystemRolesWithHttpInfo(format, orderBy, page, pageSize, permission, search, type, user, userprofile);
        }

        /**
         * Execute getAvailableSystemRoles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaginatedPermissionGroupList> _callback) throws ApiException {
            return getAvailableSystemRolesAsync(format, orderBy, page, pageSize, permission, search, type, user, userprofile, _callback);
        }
    }

    /**
     * Get Available System Roles
     * 
     * @return GetAvailableSystemRolesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetAvailableSystemRolesRequestBuilder getAvailableSystemRoles() throws IllegalArgumentException {
        return new GetAvailableSystemRolesRequestBuilder();
    }
    private okhttp3.Call listCall(String format, String orderBy, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/permissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String format, String orderBy, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        return listCall(format, orderBy, page, pageSize, search, _callback);

    }


    private ApiResponse<PaginatedPermissionReadList> listWithHttpInfo(String format, String orderBy, Integer page, Integer pageSize, String search) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(format, orderBy, page, pageSize, search, null);
        Type localVarReturnType = new TypeToken<PaginatedPermissionReadList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String format, String orderBy, Integer page, Integer pageSize, String search, final ApiCallback<PaginatedPermissionReadList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(format, orderBy, page, pageSize, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedPermissionReadList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private String format;
        private String orderBy;
        private Integer page;
        private Integer pageSize;
        private String search;

        private ListRequestBuilder() {
        }

        /**
         * Set format
         * @param format  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy Which field to use when ordering the results. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set page
         * @param page A page number within the paginated result set. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Number of results to return per page. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set search
         * @param search A search term. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(format, orderBy, page, pageSize, search, _callback);
        }


        /**
         * Execute list request
         * @return PaginatedPermissionReadList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PaginatedPermissionReadList execute() throws ApiException {
            ApiResponse<PaginatedPermissionReadList> localVarResp = listWithHttpInfo(format, orderBy, page, pageSize, search);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;PaginatedPermissionReadList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaginatedPermissionReadList> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(format, orderBy, page, pageSize, search);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaginatedPermissionReadList> _callback) throws ApiException {
            return listAsync(format, orderBy, page, pageSize, search, _callback);
        }
    }

    /**
     * Get Available User Permissions
     * 
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
}
