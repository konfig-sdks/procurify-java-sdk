/*
 * Procurify API Documentation
 *  # Disclaimer  - Procurify’s API is evolving and is subject to change at any time. Additionally, aspects of the API are undocumented, including certain methods, events, and properties. Given that both documented and undocumented aspects of the Procurify API may change at any time, the client relies on the API at their own risk. - Client (and/or client’s representative) is responsible for building, testing, and maintaining any API connection between Procurify and any other tool.  Procurify’s responsibility strictly involves providing support on clarifications in regards to the issued API document. - Procurify’s API is offered on an “as is” and “as available” basis, without warranties of any kind. By accepting this agreement, you agree that you have read the current API documentation, and accept the API functionality in its current state including current limitations. For questions and clarification around the documentation, please contact support@procurify.com. - In accordance with Section 2.(b) of our Subscription Services Agreement, Procurify reserves the right to deny access to our API at any time. If your API requests are too large and time out, contact us immediately to avoid possible suspension of access. - You may not attempt to reverse engineer or otherwise derive source code, trade secrets, or know-how in the Procurify API or portion thereof. You may not use the Procurify API to replicate or compete with core products or services offered by Procurify. 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddressRequest;
import com.konfigthis.client.model.LanguageEnum;
import com.konfigthis.client.model.LocationCreateUpsertRequest;
import com.konfigthis.client.model.LocationViewSerializerSingleCreate;
import com.konfigthis.client.model.LocationViewSerializerSingleRetrieve;
import com.konfigthis.client.model.PaginatedLocationViewSerializerListList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LocationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LocationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LocationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCall(LocationCreateUpsertRequest locationCreateUpsertRequest, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = locationCreateUpsertRequest;

        // create path and map variables
        String localVarPath = "/api/v2/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "",
            "application/xml",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(LocationCreateUpsertRequest locationCreateUpsertRequest, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'locationCreateUpsertRequest' is set
        if (locationCreateUpsertRequest == null) {
            throw new ApiException("Missing the required parameter 'locationCreateUpsertRequest' when calling create(Async)");
        }

        return createCall(locationCreateUpsertRequest, format, _callback);

    }


    private ApiResponse<LocationViewSerializerSingleCreate> createWithHttpInfo(LocationCreateUpsertRequest locationCreateUpsertRequest, String format) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(locationCreateUpsertRequest, format, null);
        Type localVarReturnType = new TypeToken<LocationViewSerializerSingleCreate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAsync(LocationCreateUpsertRequest locationCreateUpsertRequest, String format, final ApiCallback<LocationViewSerializerSingleCreate> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(locationCreateUpsertRequest, format, _callback);
        Type localVarReturnType = new TypeToken<LocationViewSerializerSingleCreate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRequestBuilder {
        private final String name;
        private final String currency;
        private final String phoneOne;
        private final AddressRequest primaryBillingAddress;
        private final AddressRequest primaryShippingAddress;
        private final List<AddressRequest> shippingAddresses;
        private String url;
        private String logo;
        private String fax;
        private String email;
        private LanguageEnum language;
        private Object locationTimezone;
        private Boolean active;
        private String externalId;
        private String format;

        private CreateRequestBuilder(String name, String currency, String phoneOne, AddressRequest primaryBillingAddress, AddressRequest primaryShippingAddress, List<AddressRequest> shippingAddresses) {
            this.name = name;
            this.currency = currency;
            this.phoneOne = phoneOne;
            this.primaryBillingAddress = primaryBillingAddress;
            this.primaryShippingAddress = primaryShippingAddress;
            this.shippingAddresses = shippingAddresses;
        }

        /**
         * Set url
         * @param url  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set logo
         * @param logo  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder logo(String logo) {
            this.logo = logo;
            return this;
        }
        
        /**
         * Set fax
         * @param fax  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder fax(String fax) {
            this.fax = fax;
            return this;
        }
        
        /**
         * Set email
         * @param email  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set language
         * @param language  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder language(LanguageEnum language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set locationTimezone
         * @param locationTimezone  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder locationTimezone(Object locationTimezone) {
            this.locationTimezone = locationTimezone;
            return this;
        }
        
        /**
         * Set active
         * @param active  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Set externalId
         * @param externalId External id (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Set format
         * @param format  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for create
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LocationCreateUpsertRequest locationCreateUpsertRequest = buildBodyParams();
            return createCall(locationCreateUpsertRequest, format, _callback);
        }

        private LocationCreateUpsertRequest buildBodyParams() {
            LocationCreateUpsertRequest locationCreateUpsertRequest = new LocationCreateUpsertRequest();
            locationCreateUpsertRequest.name(this.name);
            locationCreateUpsertRequest.url(this.url);
            locationCreateUpsertRequest.logo(this.logo);
            locationCreateUpsertRequest.currency(this.currency);
            locationCreateUpsertRequest.phoneOne(this.phoneOne);
            locationCreateUpsertRequest.fax(this.fax);
            locationCreateUpsertRequest.email(this.email);
            locationCreateUpsertRequest.primaryBillingAddress(this.primaryBillingAddress);
            locationCreateUpsertRequest.primaryShippingAddress(this.primaryShippingAddress);
            locationCreateUpsertRequest.shippingAddresses(this.shippingAddresses);
            locationCreateUpsertRequest.language(this.language);
            locationCreateUpsertRequest.locationTimezone(this.locationTimezone);
            locationCreateUpsertRequest.active(this.active);
            locationCreateUpsertRequest.externalId(this.externalId);
            return locationCreateUpsertRequest;
        }

        /**
         * Execute create request
         * @return LocationViewSerializerSingleCreate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public LocationViewSerializerSingleCreate execute() throws ApiException {
            LocationCreateUpsertRequest locationCreateUpsertRequest = buildBodyParams();
            ApiResponse<LocationViewSerializerSingleCreate> localVarResp = createWithHttpInfo(locationCreateUpsertRequest, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute create request with HTTP info returned
         * @return ApiResponse&lt;LocationViewSerializerSingleCreate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LocationViewSerializerSingleCreate> executeWithHttpInfo() throws ApiException {
            LocationCreateUpsertRequest locationCreateUpsertRequest = buildBodyParams();
            return createWithHttpInfo(locationCreateUpsertRequest, format);
        }

        /**
         * Execute create request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LocationViewSerializerSingleCreate> _callback) throws ApiException {
            LocationCreateUpsertRequest locationCreateUpsertRequest = buildBodyParams();
            return createAsync(locationCreateUpsertRequest, format, _callback);
        }
    }

    /**
     * Create New Location
     * Create New Location. Note: only users with superuser permission can create locations.
     * @param locationCreateUpsertRequest  (required)
     * @return CreateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateRequestBuilder create(String name, String currency, String phoneOne, AddressRequest primaryBillingAddress, AddressRequest primaryShippingAddress, List<AddressRequest> shippingAddresses) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            if (name != null && name.length() < 1) {
              throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
            }

        if (currency == null) throw new IllegalArgumentException("\"currency\" is required but got null");
            if (currency != null && currency.length() < 1) {
              throw new IllegalArgumentException("Invalid value for currency. Length must be greater than or equal to 1.");
            }

        if (phoneOne == null) throw new IllegalArgumentException("\"phoneOne\" is required but got null");
            if (phoneOne != null && phoneOne.length() < 1) {
              throw new IllegalArgumentException("Invalid value for phoneOne. Length must be greater than or equal to 1.");
            }

        if (primaryBillingAddress == null) throw new IllegalArgumentException("\"primaryBillingAddress\" is required but got null");
        if (primaryShippingAddress == null) throw new IllegalArgumentException("\"primaryShippingAddress\" is required but got null");
        if (shippingAddresses == null) throw new IllegalArgumentException("\"shippingAddresses\" is required but got null");
        return new CreateRequestBuilder(name, currency, phoneOne, primaryBillingAddress, primaryShippingAddress, shippingAddresses);
    }
    private okhttp3.Call listCall(Boolean active, String format, Boolean headquarter, String orderBy, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (headquarter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("headquarter", headquarter));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(Boolean active, String format, Boolean headquarter, String orderBy, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        return listCall(active, format, headquarter, orderBy, page, pageSize, search, _callback);

    }


    private ApiResponse<PaginatedLocationViewSerializerListList> listWithHttpInfo(Boolean active, String format, Boolean headquarter, String orderBy, Integer page, Integer pageSize, String search) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(active, format, headquarter, orderBy, page, pageSize, search, null);
        Type localVarReturnType = new TypeToken<PaginatedLocationViewSerializerListList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(Boolean active, String format, Boolean headquarter, String orderBy, Integer page, Integer pageSize, String search, final ApiCallback<PaginatedLocationViewSerializerListList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(active, format, headquarter, orderBy, page, pageSize, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedLocationViewSerializerListList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private Boolean active;
        private String format;
        private Boolean headquarter;
        private String orderBy;
        private Integer page;
        private Integer pageSize;
        private String search;

        private ListRequestBuilder() {
        }

        /**
         * Set active
         * @param active  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Set format
         * @param format  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set headquarter
         * @param headquarter  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder headquarter(Boolean headquarter) {
            this.headquarter = headquarter;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy Which field to use when ordering the results. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set page
         * @param page A page number within the paginated result set. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Number of results to return per page. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set search
         * @param search A search term. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(active, format, headquarter, orderBy, page, pageSize, search, _callback);
        }


        /**
         * Execute list request
         * @return PaginatedLocationViewSerializerListList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PaginatedLocationViewSerializerListList execute() throws ApiException {
            ApiResponse<PaginatedLocationViewSerializerListList> localVarResp = listWithHttpInfo(active, format, headquarter, orderBy, page, pageSize, search);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;PaginatedLocationViewSerializerListList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaginatedLocationViewSerializerListList> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(active, format, headquarter, orderBy, page, pageSize, search);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaginatedLocationViewSerializerListList> _callback) throws ApiException {
            return listAsync(active, format, headquarter, orderBy, page, pageSize, search, _callback);
        }
    }

    /**
     * Get Locations
     * 
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call retrieveCall(String id, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/locations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuthentication", "M2MAuthentication", "RemoteAuthentication", "cookieAuth", "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveValidateBeforeCall(String id, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retrieve(Async)");
        }

        return retrieveCall(id, format, _callback);

    }


    private ApiResponse<LocationViewSerializerSingleRetrieve> retrieveWithHttpInfo(String id, String format) throws ApiException {
        okhttp3.Call localVarCall = retrieveValidateBeforeCall(id, format, null);
        Type localVarReturnType = new TypeToken<LocationViewSerializerSingleRetrieve>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call retrieveAsync(String id, String format, final ApiCallback<LocationViewSerializerSingleRetrieve> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveValidateBeforeCall(id, format, _callback);
        Type localVarReturnType = new TypeToken<LocationViewSerializerSingleRetrieve>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RetrieveRequestBuilder {
        private final String id;
        private String format;

        private RetrieveRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set format
         * @param format  (optional)
         * @return RetrieveRequestBuilder
         */
        public RetrieveRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for retrieve
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return retrieveCall(id, format, _callback);
        }


        /**
         * Execute retrieve request
         * @return LocationViewSerializerSingleRetrieve
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public LocationViewSerializerSingleRetrieve execute() throws ApiException {
            ApiResponse<LocationViewSerializerSingleRetrieve> localVarResp = retrieveWithHttpInfo(id, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute retrieve request with HTTP info returned
         * @return ApiResponse&lt;LocationViewSerializerSingleRetrieve&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LocationViewSerializerSingleRetrieve> executeWithHttpInfo() throws ApiException {
            return retrieveWithHttpInfo(id, format);
        }

        /**
         * Execute retrieve request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LocationViewSerializerSingleRetrieve> _callback) throws ApiException {
            return retrieveAsync(id, format, _callback);
        }
    }

    /**
     * Get Location by ID
     * 
     * @param id  (required)
     * @return RetrieveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveRequestBuilder retrieve(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RetrieveRequestBuilder(id);
    }
}
